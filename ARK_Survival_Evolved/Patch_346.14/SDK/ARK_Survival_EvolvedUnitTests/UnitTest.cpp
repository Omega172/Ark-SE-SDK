#include "pch.h"
#include "Defs.h"
#include "CppUnitTest.h"
#include "../ARK_Survival_Evolved/SDK.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace CheatGearCppUnitTests
{
	TEST_CLASS(CheatGear)
	{
	public:

		// BlueprintGeneratedClass WorldModifiersContainer_BP.WorldModifiersContainer_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WorldModifiersContainer_BP__WorldModifiersContainer_BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldModifiersContainer_BP_C, 0x0038);
		}

		// WidgetBlueprintGeneratedClass DataListEntryWidgetGeneric_AutomaticRefresh.DataListEntryWidgetGeneric_AutomaticRefresh_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__DataListEntryWidgetGeneric_AutomaticRefresh__DataListEntryWidgetGeneric_AutomaticRefresh_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryWidgetGeneric_AutomaticRefresh_C, MyDataListButton, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataListEntryWidgetGeneric_AutomaticRefresh_C, 0x02F8);
		}

		// WidgetBlueprintGeneratedClass DataListButton_ListSession.DataListButton_ListSession_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__DataListButton_ListSession__DataListButton_ListSession_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListButton_ListSession_C, Button, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListButton_ListSession_C, Image_130, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListButton_ListSession_C, Image_138, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListButton_ListSession_C, Image_1458, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataListButton_ListSession_C, 0x07D8);
		}

		// Class Slate.ButtonWidgetStyle
		TEST_METHOD(Class__Slate__ButtonWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonWidgetStyle, ButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonWidgetStyle, 0x0278);
		}

		// Class Slate.CheckBoxWidgetStyle
		TEST_METHOD(Class__Slate__CheckBoxWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxWidgetStyle, CheckBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxWidgetStyle, 0x0538);
		}

		// Class Slate.ComboBoxWidgetStyle
		TEST_METHOD(Class__Slate__ComboBoxWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxWidgetStyle, ComboBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxWidgetStyle, 0x03C8);
		}

		// Class Slate.ComboButtonWidgetStyle
		TEST_METHOD(Class__Slate__ComboButtonWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboButtonWidgetStyle, ComboButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboButtonWidgetStyle, 0x0380);
		}

		// Class Slate.EditableTextBoxWidgetStyle
		TEST_METHOD(Class__Slate__EditableTextBoxWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBoxWidgetStyle, EditableTextBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBoxWidgetStyle, 0x0540);
		}

		// Class Slate.EditableTextWidgetStyle
		TEST_METHOD(Class__Slate__EditableTextWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextWidgetStyle, EditableTextStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextWidgetStyle, 0x0260);
		}

		// Class Slate.ProgressWidgetStyle
		TEST_METHOD(Class__Slate__ProgressWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressWidgetStyle, ProgressBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressWidgetStyle, 0x01A0);
		}

		// Class Slate.ScrollBarWidgetStyle
		TEST_METHOD(Class__Slate__ScrollBarWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBarWidgetStyle, ScrollBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBarWidgetStyle, 0x0290);
		}

		// Class Slate.ScrollBoxWidgetStyle
		TEST_METHOD(Class__Slate__ScrollBoxWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxWidgetStyle, ScrollBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxWidgetStyle, 0x0218);
		}

		// Class Slate.SpinBoxWidgetStyle
		TEST_METHOD(Class__Slate__SpinBoxWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBoxWidgetStyle, SpinBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBoxWidgetStyle, 0x02C8);
		}

		// Class Slate.TextBlockWidgetStyle
		TEST_METHOD(Class__Slate__TextBlockWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlockWidgetStyle, TextBlockStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlockWidgetStyle, 0x0148);
		}

		// Class InputCore.InputCoreTypes
		TEST_METHOD(Class__InputCore__InputCoreTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputCoreTypes, 0x0028);
		}

		// Class EngineMessages.EngineServiceMessages
		TEST_METHOD(Class__EngineMessages__EngineServiceMessages)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineServiceMessages, 0x0028);
		}

		// WidgetBlueprintGeneratedClass ListSessions.ListSessions_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__ListSessions__ListSessions_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, Close, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, Open, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, AcceptPassword, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, AscendingDescendingIcon, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, AutoFavoriteCheckBox, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, CancelButton, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, CancelPassword, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, CreatureBottomBorder, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, CreatureTopBorder, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, FavoritesButton, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, FindSessionName, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, GameModeComboBox, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, GamepadButtonLegend_FaceLeft, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, GamepadButtonLegend_FaceTop, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, GamepadButtonLegend_Start, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, Image_3195, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, IncludeServersWithActiveModsCheckBox, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, JoinLastPlayedServer, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, JoinSessionButton, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, MapComboBox, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, PasswordField, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, RefreshSessionsButton, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, RentYourOwnServerButton, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, ServerTypeComboBox, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, ShowNotFullServers, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, ShowProtectedServersCheckBox, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, SortComboBox, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, SortOrderToggleButton, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, K2Node_ComponentBoundEvent_bIsChecked, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, K2Node_ComponentBoundEvent_bIsChecked3, 0x0C39);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListSessions_C, K2Node_ComponentBoundEvent_bIsChecked2, 0x0C3A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListSessions_C, 0x0C3B);
		}

		// Class VivoxCore.VivoxPluginHackFix
		TEST_METHOD(Class__VivoxCore__VivoxPluginHackFix)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVivoxPluginHackFix, 0x00D8);
		}

		// Class UdpMessaging.UdpMessagingSettings
		TEST_METHOD(Class__UdpMessaging__UdpMessagingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_HU4S, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnicastEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastEndpoint, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastTimeToLive, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_GDDO, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, StaticEndpoints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTunnel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_2MT5, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelUnicastEndpoint, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelMulticastEndpoint, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, RemoteTunnelEndpoints, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUdpMessagingSettings, 0x00A0);
		}

		// WidgetBlueprintGeneratedClass OptionsMenu.OptionsMenu_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__OptionsMenu__OptionsMenu_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, FadeIn, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, FadeOut, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Close, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Open, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, AccessInventory, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, AdvancedSettingsMenuButton, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, AllowAnimationStaggeringCheckbox, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, AllowCrosshairCheckbox, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, AllowEnhancedDistanceDetailModeCheckbox, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, AllowHitMarkersCheckbox, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, AltFire, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, AmbientSoundVolumeSlider, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, AntiAliasingComboBox, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ApplyButton, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, AudioVolumeSlider, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, BrakeDino, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CallAggressive, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CallAttackTarget, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CallFollow, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CallFollowDistanceCycleOne, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CallFollowOne, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CallLandOne, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CallMoveTo, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CallNeutral, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CallPassive, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CallSetAggressive, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CallStay, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CallStayOne, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CameraBobCheckbox, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CameraShakeScaleSlider, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CancelButton, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CancelOrder, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CenterPlayer, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CenterSelection, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CharacterActionWheel, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CharacterSlider, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ChatBubblesCheckbox, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ChatShowSteamNameCheckbox, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ChatShowTribeNameCheckbox, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ClientNetSpeedComboBox, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CloseGamepadControlsButton, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ColorizedItemNamesCheckbox, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CreatureBottomBorder, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CreatureTopBorder, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Crouch, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, DefaultCharacterItemsCheckbox, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, DisableBloomCheckbox, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, DisableLightShaftsCheckbox, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, DisableMenuMusicCheckbox, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, DisableMenuTransitionsCheckbox, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, DisableSubtitlesCheckbox, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, DisableTorporEffectCheckbox, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, DisableTPVCameraInterpolationCheckbox, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, DistanceFieldShadowingCheckbox, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Drag, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, DropItem, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, DynamicTessCheckbox, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, EmoteKey1, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, EmoteKey2, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, EnableBloodEffectsCheckbox, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, EnableColorGradingCheckbox, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, EnableHMDButton, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ExtraLevelStreamingDistanceCheckbox, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, FilmGrainCheckbox, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Fire, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, FirstPersonRidingCheckbox, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, FloatingNamesCheckbox, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ForceCraftButton, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ForceTPVCameraOffsetCheckbox, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, FOVSlider, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, FrontOverlayAdditive, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, GamepadControlsButton, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, GamepadIcon_NextMenu, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, GamepadIcon_PrevMenu, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, GamepadImage, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, GamepadMenuButton, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Gamma1Editbox, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Gamma2Editbox, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, GiveDefaultWeapon, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, GraphicsQualityComboBox, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, GraphicsQualityHelpTooltip, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, GroundClutterDensitySlider, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, GroundClutterDistanceSlider, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, GroupAddOrRemoveTame, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, HeightTextBox, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, HideFloatingPlayerNamesCheckbox, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, HideGamepadItemSelectionModifierCheckbox, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, HideServerInfoCheckbox, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, HighQualityAnisotropicFilteringCheckbox, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, HighQualityLODsCheckbox, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, HighQualityMaterialsCheckbox, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, HighQualitySurfacesCheckbox, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, HighQualityVFXCheckbox, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_12, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_152, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_1545, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_1546, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_1586, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_2016, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_242, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_243, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_257, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_266, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_270, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_321, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_419, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_537, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_538, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_55, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_56, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_59, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_610, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_64, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_66, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_67, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_9, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_93, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_922, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_923, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Image_963, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, InventoryAccessSoundCheckbox, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, InvertMouse, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, IssueOrder, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, JoinNotificationsCheckbox, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Jump, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, KeyBindingsMenuButton, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, LODScalarSlider, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, LookDown, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, LookLeftRightSensitivitySlider, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, LookUp, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, LookUpDownSensitivitySlider, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, LowQualityAnimationsCheckbox, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, MeleeCameraSwingAnimsCheckbox, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, MotionBlurCheckbox, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, MoveBackward, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, MoveForward, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, MusicSlider, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, NoTooltipDelayCheckbox, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, OpenMapMarkers, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, OptionsMenuButton, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, OrbitCam, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, OrbitCamToggle, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, PlayActionWheelClickSoundCheckbox, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Poop, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, PostProcessingComboBox, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Prone, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, PS4GamepadImage, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, PushToTalk, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, QuickToggleItemNamesCheckbox, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Reload, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, RepositionHMDViewButton, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ResetButton, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ResetIntroCinematicsButton, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ResetTutorials, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ResolutionScaleSlider, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ResolutionsComboBox, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, RTSMenuButton, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Run, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, RunToggle, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, SaveButton, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ScaleSlider, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, SelectUnit, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, SetGamma1, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, SetGamma2, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, SFXSlider, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ShadowsComboBox, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ShowChatCheckbox, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ShowExtendedInfo, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ShowLocalChat, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ShowMyCraftables, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ShowMyInventory, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ShowTribeChat, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ShowTribeManager, 0x0F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, SimpleDistanceMovementCheckbox, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, SSAOCheckbox, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, StadiaGamepadImage, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, StatusNotificationMessagesCheckbox, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, StrafeLeft, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, StrafeRight, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, SubMenuSwitcher, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, SwitchGamepadImage, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Targeting, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, TemperatureFCheckbox, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, TerrainShadowComboBox, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, TexturesComboBox, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ToggleAutoChat, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ToggleConsole, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ToggleExtendedHUDInfoCheckbox, 0x0FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ToggleHUDHidden, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ToggleMap, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ToggleRTS, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ToggleToTalkCheckBox, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, TrueSkyQualitySlider, 0x0FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, TurnLeft, 0x0FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, TurnRight, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UIQuickbarScalingSlider, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Use, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UseDFAOCheckbox, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UseItem1, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UseItem10, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UseItem2, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UseItem3, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UseItem4, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UseItem5, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UseItem6, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UseItem7, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UseItem8, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UseItem9, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UseLowQualityFarLevelStreamingCheckbox, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ViewDistanceComboBox, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, VoiceSlider, 0x1068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, WeaponAccessory, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Whisper, 0x1078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, WidthTextBox, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, WindowModeComboBox, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, WorldTileBufferComboBox, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, XBoxGamepadImage, 0x1098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, Yell, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ZoomIn, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, ZoomOut, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, GraphicsToolTipIsVisible, 0x10B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UnknownData_0PD3, 0x10B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_Event_MyGeometry, 0x10BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_Event_InDeltaTime, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UnknownData_F01O, 0x10F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_SelectedItem5, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_SelectionType5, 0x1108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UnknownData_S7KD, 0x1109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_SelectedItem4, 0x1110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_SelectionType4, 0x1120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UnknownData_DWPX, 0x1121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_SelectedItem3, 0x1128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_SelectionType3, 0x1138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UnknownData_OW5N, 0x1139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_SelectedItem2, 0x1140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_SelectionType2, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UnknownData_RKRJ, 0x1151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_SelectedItem, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_SelectionType, 0x1168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UnknownData_JRKN, 0x1169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_SelectedItem6, 0x1170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_SelectionType6, 0x1180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, UnknownData_AUCH, 0x1181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_Value2, 0x1184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_Value, 0x1188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_bIsChecked4, 0x118C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_bIsChecked3, 0x118D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_bIsChecked2, 0x118E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_bIsChecked, 0x118F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_SelectedItem7, 0x1190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, K2Node_ComponentBoundEvent_SelectionType7, 0x11A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CallFunc_Not_PreBool_ReturnValue, 0x11A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CallFunc_IsHovered_ReturnValue, 0x11A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CallFunc_BooleanAND_ReturnValue, 0x11A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CallFunc_Not_PreBool_ReturnValue2, 0x11A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenu_C, CallFunc_BooleanAND_ReturnValue2, 0x11A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOptionsMenu_C, 0x11A6);
		}

		// Class ScriptPlugin.ScriptBlueprintGeneratedClass
		TEST_METHOD(Class__ScriptPlugin__ScriptBlueprintGeneratedClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptBlueprintGeneratedClass, ByteCode, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptBlueprintGeneratedClass, SourceCode, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptBlueprintGeneratedClass, ScriptProperties, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptBlueprintGeneratedClass, 0x0208);
		}

		// Class ScriptPlugin.ScriptBlueprint
		TEST_METHOD(Class__ScriptPlugin__ScriptBlueprint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptBlueprint, SourceFilePath, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptBlueprint, SourceFileTimestamp, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptBlueprint, ByteCode, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptBlueprint, SourceCode, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptBlueprint, 0x0100);
		}

		// Class ScriptPlugin.ScriptComponent
		TEST_METHOD(Class__ScriptPlugin__ScriptComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptComponent, UnknownData_AZVG, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptComponent, 0x00E0);
		}

		// Class ScriptPlugin.ScriptContext
		TEST_METHOD(Class__ScriptPlugin__ScriptContext)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptContext, UnknownData_02CO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptContext, 0x0030);
		}

		// Class ScriptPlugin.ScriptContextComponent
		TEST_METHOD(Class__ScriptPlugin__ScriptContextComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptContextComponent, UnknownData_0CXT, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptContextComponent, 0x00E0);
		}

		// Class ScriptPlugin.ScriptTestActor
		TEST_METHOD(Class__ScriptPlugin__ScriptTestActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AScriptTestActor, TestString, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScriptTestActor, TestValue, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScriptTestActor, TestBool, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScriptTestActor, UnknownData_QIA4, 0x047D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScriptTestActor, 0x0480);
		}

		// Class Telemetry.TelemetryFunctionLibrary
		TEST_METHOD(Class__Telemetry__TelemetryFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTelemetryFunctionLibrary, 0x0028);
		}

		// BlueprintGeneratedClass MainMenuGameMode.MainMenuGameMode_C
		TEST_METHOD(BlueprintGeneratedClass__MainMenuGameMode__MainMenuGameMode_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuGameMode_C, DefaultSceneRoot, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainMenuGameMode_C, 0x05B0);
		}

		// WidgetBlueprintGeneratedClass DataListButton_MainMenu.DataListButton_MainMenu_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__DataListButton_MainMenu__DataListButton_MainMenu_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListButton_MainMenu_C, Button, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataListButton_MainMenu_C, 0x0590);
		}

		// WidgetBlueprintGeneratedClass DataListButton_HostSession.DataListButton_HostSession_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__DataListButton_HostSession__DataListButton_HostSession_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListButton_HostSession_C, Button, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListButton_HostSession_C, DeleteDedicatedServerSaveData, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListButton_HostSession_C, DeleteSinglePlayerSaveData, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListButton_HostSession_C, Image_331, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListButton_HostSession_C, Image_342, 0x05F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataListButton_HostSession_C, 0x05F8);
		}

		// WidgetBlueprintGeneratedClass UI_HelpPage.UI_HelpPage_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HelpPage__UI_HelpPage_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Close, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Open, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, CancelButton, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, CraftingButton_Page1, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, CraftingButton_Page2, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, CraftingButton_Page3, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, CraftingButton_Page4, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, CraftingButton_Page5, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, CraftingButton_Page6, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, CraftingMenuButton, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, CreaturesButton_Page1, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, CreaturesButton_Page2, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, CreaturesButton_Page3, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, CreaturesMenuButton, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, ExplorationButton_Page1, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, ExplorationButton_Page2, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, ExplorationMenuButton, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, HelpMenuButton, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_1098, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_1194, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_1293, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_1394, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_1495, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_1671, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_1705, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_1739, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_1773, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_1808, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_2378, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_2414, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_2451, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_2488, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_2523, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_256, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_295, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_347, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_452, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_55, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_56, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_59, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_62, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_643, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_66, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_651, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_690, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_764, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_93, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, Image_924, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, OptionsMenuButton, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, SeparatorLineTop, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, SubMenuSwitcher, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, UIButton_Page1, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, UIButton_Page2, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, UIButton_Page3, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, UIButton_Page4, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, UIButton_Page5, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, UIButton_Page6, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, UIMenuButton, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, WelcomeButton_Page1, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, WidgetSwitcher_Crafting, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, WidgetSwitcher_Creatures, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, WidgetSwitcher_Exploration, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, WidgetSwitcher_UI, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage_C, WidgetSwitcher_Welcome, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HelpPage_C, 0x0808);
		}

		// Class MovieSceneCore.MovieScene
		TEST_METHOD(Class__MovieSceneCore__MovieScene)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Spawnables, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Possessables, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ObjectBindings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MasterTracks, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene, 0x0068);
		}

		// Class MovieSceneCore.MovieSceneBindings
		TEST_METHOD(Class__MovieSceneCore__MovieSceneBindings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindings, RootMovieScene, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindings, BoundObjects, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindings, 0x0040);
		}

		// Class MovieSceneCore.MovieSceneSection
		TEST_METHOD(Class__MovieSceneCore__MovieSceneSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, StartTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EndTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, RowIndex, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_RQGB, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSection, 0x0038);
		}

		// Class MovieSceneCore.MovieSceneTrack
		TEST_METHOD(Class__MovieSceneCore__MovieSceneTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrack, 0x0028);
		}

		// Class MovieSceneCore.MovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneCore__MovieScenePropertyTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyPath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, Sections, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, bSectionsAreShowable, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, UnknownData_GLXT, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyTrack, 0x0058);
		}

		// Class MovieSceneCore.RuntimeMovieScenePlayer
		TEST_METHOD(Class__MovieSceneCore__RuntimeMovieScenePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeMovieScenePlayer, UnknownData_XZWV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeMovieScenePlayer, MovieSceneBindings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeMovieScenePlayer, TimeCursorPosition, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeMovieScenePlayer, bIsPlaying, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeMovieScenePlayer, UnknownData_N109, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeMovieScenePlayer, 0x00B8);
		}

		// WidgetBlueprintGeneratedClass ProceduralSettings.ProceduralSettings_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__ProceduralSettings__ProceduralSettings_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, ArkNameTextBox, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, CancelButton, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, CreatureBottomBorder, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, CreatureTopBorder, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, DeepWaterBiomesDepthTextBox, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, DepositionStrengthTextBox, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, East1EndXTextBox, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, East1EndYTextBox, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, East1StartXTextBox, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, East1StartYTextBox, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, East2EndXTextBox, 0x1068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, East2EndYTextBox, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, East2StartXTextBox, 0x1078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, East2StartYTextBox, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, East3EndXTextBox, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, East3EndYTextBox, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, East3StartXTextBox, 0x1098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, East3StartYTextBox, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, ErosionStepsTextBox, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, ErosionStrengthTextBox, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, FavoritesComboBox, 0x10B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, GrassDensityTextBox, 0x10C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, HostButton, 0x10C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, Image_139, 0x10D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, Image_140, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, Image_152, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, Image_1749, 0x10E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, Image_1900, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, Image_1901, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, Image_1902, 0x1100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, Image_1925, 0x1108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, Image_1926, 0x1110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, Image_321, 0x1118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, Image_3485, 0x1120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, Image_3486, 0x1128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, Image_3996, 0x1130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, Image_3997, 0x1138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, InlandWaterObjectsDensityTextBox, 0x1140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, IslandBorderCurveTextBox, 0x1148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, JungleBiomeTextBox, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, JungleGrassDensityTextBox, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, JungleTreeDensityCheckbox, 0x1160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, LandscapeRadiusTextBox, 0x1168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, LoadFavoriteButton, 0x1170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, MapSeedTextBox, 0x1178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, MaxSawnHeightTextBox, 0x1180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, MountainBiomeStartTextBox, 0x1188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, MountainFrequencyTextBox, 0x1190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, MountainGeneralTreesPercentTextBox, 0x1198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, MountainGrassDensityTextBox, 0x11A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, MountainHeightTextBox, 0x11A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, MountainSlopeTextBox, 0x11B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, MountainTreeDensityTextBox, 0x11B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, North1EndXTextBox, 0x11C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, North1EndYTextBox, 0x11C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, North1StartXTextBox, 0x11D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, North1StartYTextBox, 0x11D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, North2EndXTextBox, 0x11E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, North2EndYTextBox, 0x11E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, North2StartXTextBox, 0x11F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, North2StartYTextBox, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, North3EndXTextBox, 0x1200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, North3EndYTextBox, 0x1208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, North3StartXTextBox, 0x1210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, North3StartYTextBox, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, OceanFloorLevelTextBox, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, PresetsComboBox, 0x1228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, RandomizeButton, 0x1230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, RedwoodBiomeLocationXTextBox, 0x1238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, RedwoodBiomeLocationYTextBox, 0x1240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, RedwoodBiomeSizeTextBox, 0x1248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, RedwoodGrassDensityCheckbox, 0x1250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, RedWoodTreeDensityCheckbox, 0x1258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, ResetButton, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, SaveFavoriteButton, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, ShorelineStartOffsetTextBox, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, ShorelineThicknessTextBox, 0x1278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, ShoreSlopeTextBox, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, ShoreTreeDensityCheckbox, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, SnowBiomeLocationXTextBox, 0x1290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, SnowBiomeLocationYTextBox, 0x1298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, SnowBiomeSizeTextBox, 0x12A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, SnowGrassDensityTextBox, 0x12A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, SnowMountainGrassDensityTextBox, 0x12B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, SnowMountainsTreeDensityCheckbox, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, SnowShoreTreeDensityCheckbox, 0x12C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, SnowTreeDensityCheckbox, 0x12C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, South1EndXTextBox, 0x12D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, South1EndYTextBox, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, South1StartXTextBox, 0x12E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, South1StartYTextBox, 0x12E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, South2EndXTextBox, 0x12F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, South2EndYTextBox, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, South2StartXTextBox, 0x1300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, South2StartYTextBox, 0x1308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, South3EndXTextBox, 0x1310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, South3EndYTextBox, 0x1318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, South3StartXTextBox, 0x1320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, South3StartYTextBox, 0x1328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, TerrainScaleXTextBox, 0x1330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, TerrainScaleYTextBox, 0x1338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, TerrainScaleZTextBox, 0x1340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, TreeDensityCheckbox, 0x1348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, TreesGroundSlopeAccuracyTextBox, 0x1350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, TurbulencePowerTextBox, 0x1358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, UnderwaterObjectsDensityCheckbox, 0x1360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, WaterFrequencyTextBox, 0x1368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, WaterLevelTextBox, 0x1370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, West1EndXTextBox, 0x1378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, West1EndYTextBox, 0x1380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, West1StartXTextBox, 0x1388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, West1StartYTextBox, 0x1390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, West2EndXTextBox, 0x1398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, West2EndYTextBox, 0x13A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, West2StartXTextBox, 0x13A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, West2StartYTextBox, 0x13B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, West3EndXTextBox, 0x13B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, West3EndYTextBox, 0x13C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, West3StartXTextBox, 0x13C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSettings_C, West3StartYTextBox, 0x13D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralSettings_C, 0x13D8);
		}

		// BlueprintGeneratedClass FPVMeleeHitCameraShakeMobile.FPVMeleeHitCameraShakeMobile_C
		TEST_METHOD(BlueprintGeneratedClass__FPVMeleeHitCameraShakeMobile__FPVMeleeHitCameraShakeMobile_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFPVMeleeHitCameraShakeMobile_C, 0x00B0);
		}

		// BlueprintGeneratedClass RagdollKinematicActor_BP.RagdollKinematicActor_BP_C
		TEST_METHOD(BlueprintGeneratedClass__RagdollKinematicActor_BP__RagdollKinematicActor_BP_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARagdollKinematicActor_BP_C, 0x0478);
		}

		// WidgetBlueprintGeneratedClass StartScreenUI.StartScreenUI_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__StartScreenUI__StartScreenUI_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStartScreenUI_C, 0x0518);
		}

		// Class SessionMessages.SessionServiceMessages
		TEST_METHOD(Class__SessionMessages__SessionServiceMessages)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USessionServiceMessages, 0x0028);
		}

		// Class CustomMeshComponent.CustomMeshComponent
		TEST_METHOD(Class__CustomMeshComponent__CustomMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_NXYT, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomMeshComponent, 0x0690);
		}

		// Class OculusLibrary.OculusFunctionLibrary
		TEST_METHOD(Class__OculusLibrary__OculusFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusFunctionLibrary, 0x0028);
		}

		// BlueprintGeneratedClass FPVMeleeHitCameraShake.FPVMeleeHitCameraShake_C
		TEST_METHOD(BlueprintGeneratedClass__FPVMeleeHitCameraShake__FPVMeleeHitCameraShake_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFPVMeleeHitCameraShake_C, 0x00B0);
		}

		// WidgetBlueprintGeneratedClass ToolTipWidgetMiniHelp.ToolTipWidgetMiniHelp_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__ToolTipWidgetMiniHelp__ToolTipWidgetMiniHelp_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolTipWidgetMiniHelp_C, 0x02A8);
		}

		// BlueprintGeneratedClass MainMenu.MainMenu_C
		TEST_METHOD(BlueprintGeneratedClass__MainMenu__MainMenu_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, Counter, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, UnknownData_ERNS, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, CaptureComp, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, CallFunc_Create_ReturnValue, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, CallFunc_GetGameInstance_ReturnValue, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, K2Node_DynamicCast_AsShooterGameInstance, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, K2Node_DynamicCast_CastSuccess, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, UnknownData_R1K7, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, MatineeActor_0_ExecuteUbergraph_MainMenu_RefProperty, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainMenu_C, 0x04A8);
		}

		// Class GameLiveStreaming.GameLiveStreamingFunctionLibrary
		TEST_METHOD(Class__GameLiveStreaming__GameLiveStreamingFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameLiveStreamingFunctionLibrary, 0x0028);
		}

		// Class GameLiveStreaming.QueryLiveStreamsCallbackProxy
		TEST_METHOD(Class__GameLiveStreaming__QueryLiveStreamsCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UQueryLiveStreamsCallbackProxy, OnQueriedLiveStreams, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQueryLiveStreamsCallbackProxy, UnknownData_ND0M, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQueryLiveStreamsCallbackProxy, 0x0048);
		}

		// Class TrueSkyPlugin.TrueSkyComponent
		TEST_METHOD(Class__TrueSkyPlugin__TrueSkyComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrueSkyComponent, 0x00D8);
		}

		// Class TrueSkyPlugin.TrueSkySequenceActor
		TEST_METHOD(Class__TrueSkyPlugin__TrueSkySequenceActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrueSkySequenceActor, ActiveSequences, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrueSkySequenceActor, BlendWeights, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrueSkySequenceActor, MoonTexture, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrueSkySequenceActor, CosmicBackgroundTexture, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrueSkySequenceActor, External_ScatterRT, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrueSkySequenceActor, External_LossRT, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrueSkySequenceActor, Brightness, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrueSkySequenceActor, MetresPerUnit, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrueSkySequenceActor, MinSimpleCloudShadowing, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrueSkySequenceActor, MaxSimpleCloudShadowing, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrueSkySequenceActor, MinSimpleCloudShadowingDistance, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrueSkySequenceActor, MaxSimpleCloudShadowingDistance, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrueSkySequenceActor, SimpleCloudShadowSharpness, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrueSkySequenceActor, UnknownData_V8VG, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrueSkySequenceActor, Visible, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrueSkySequenceActor, UnknownData_R7OK, 0x04C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrueSkySequenceActor, 0x04D8);
		}

		// Class TrueSkyPlugin.TrueSkySequenceAsset
		TEST_METHOD(Class__TrueSkyPlugin__TrueSkySequenceAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrueSkySequenceAsset, SequenceText, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrueSkySequenceAsset, 0x0038);
		}

		// WidgetBlueprintGeneratedClass CreditsUI.CreditsUI_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__CreditsUI__CreditsUI_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, FadeIn, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, FadeOut, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, Close, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, Open, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, CloseButton, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, CreditsPanel, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, FCreditsText, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, FullBlackBkg, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, Image_2, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, Image_564, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, CurrentTextPosition, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, ScrollTextSpeed, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, LoopTextPosition, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, InitialTextPosition, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, CurrentBkgOpacity, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, bSetCredits, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, UnknownData_G9K5, 0x057D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, K2Node_Event_MyGeometry, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, K2Node_Event_InDeltaTime, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, K2Node_DynamicCast_AsCanvasPanelSlot, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, K2Node_DynamicCast_CastSuccess, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, UnknownData_SRGX, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, CallFunc_Multiply_FloatFloat_ReturnValue, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, CallFunc_MakeVector2D_ReturnValue, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, CallFunc_Subtract_FloatFloat_ReturnValue, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, CallFunc_Less_FloatFloat_ReturnValue, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, UnknownData_2E3O, 0x05D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, K2Node_CreateDelegate_OutputDelegate, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, CallFunc_FInterpTo_ReturnValue, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, UnknownData_BKJR, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, CallFunc_GetClassDefaultObject_ReturnValue, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, K2Node_DynamicCast_AsPrimalGlobalsBlueprint_C, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, K2Node_DynamicCast2_CastSuccess, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, UnknownData_X93Q, 0x0601);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, CallFunc_GetGameMode_ReturnValue, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, K2Node_DynamicCast_AsShooterGame_Menu, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, K2Node_DynamicCast3_CastSuccess, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, UnknownData_YR03, 0x0619);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsUI_C, CallFunc_GetShooterGameUserSettings_ReturnValue, 0x0620);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreditsUI_C, 0x0628);
		}

		// Class Engine.EngineBaseTypes
		TEST_METHOD(Class__Engine__EngineBaseTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineBaseTypes, 0x0028);
		}

		// Class Engine.EngineTypes
		TEST_METHOD(Class__Engine__EngineTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineTypes, 0x0028);
		}

		// Class Engine.Actor
		TEST_METHOD(Class__Engine__Actor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, PrimaryActorTick, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_AJWT, 0x0083);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, CustomTimeDilation, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_0NWO, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ClientReplicationSendNowThreshold, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, bForceAllowNetMulticast, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RemoteRole, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_ONJB, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Owner, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_4OMX, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ReplicatedMovement, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AttachmentReplication, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Role, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDormancy, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_A3ZE, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ReplicatedComponents, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_YZLI, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AutoReceiveInput, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_5ZKW, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, DefaultStasisComponentOctreeFlags, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, StasisCheckComponent, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetworkSpatializationChildren, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetworkSpatializationParent, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetworkAndStasisRangeMultiplier, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_7RKW, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnstasisLastInRangeTime, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, LastPreReplicationTime, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, LastEnterStasisTime, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, LastExitStasisTime, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, CustomTag, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, CustomData, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ReplicationIntervalMultiplier, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_IDC5, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, StasisUnRegisteredComponents, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputComponent, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputConsumeOption, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_NTM1, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetCullDistanceSquared, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetCullDistanceSquaredDormant, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetTag, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetUpdateTime, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetUpdateFrequency, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetPriority, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, LastNetUpdateTime, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDriverName, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_JTOM, 0x0215);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, TargetingTeam, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OverrideStasisComponentRadius, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Instigator, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, CreationTime, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OriginalCreationTime, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Children, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AnimUpdateRateShiftTag, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AnimUpdateRateFrameCount, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RootComponent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ControllingMatineeActors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InitialLifeSpan, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_SRC2, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Layers, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ParentComponentActor, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, LastRenderTime, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, LastRenderTimeIgnoreShadow, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Tags, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, HiddenEditorViews, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeAnyDamage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakePointDamage, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorBeginOverlap, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorEndOverlap, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnBeginCursorOver, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndCursorOver, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnClicked, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnReleased, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchBegin, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnd, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnter, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchLeave, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorHit, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTargetingTeamChanged, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, DefaultActorLocation, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UniqueGuidId, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_0Y7L, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnDestroyed, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorCustomEvent, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndPlay, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_GCW0, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnMatineeUpdated, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_15UA, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnSemaphoreTaken, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ForceMaximumReplicationRateUntilTime, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_GM0R, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, LastActorForceReplicationTime, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_TM9D, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, SerializedComponents, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_LO3W, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, bUseBPPreventAttachments, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, bForceNonBlockingHits, 0x0465);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_2LDE, 0x0466);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActor, 0x0468);
		}

		// Class Engine.Controller
		TEST_METHOD(Class__Engine__Controller)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_8GOS, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Character, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, PlayerState, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Pawn, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, ControlRotation, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_WNIW, 0x049D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, StateName, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, OnInstigatedAnyDamage, 0x04B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AController, 0x04C0);
		}

		// Class Engine.AnimationAsset
		TEST_METHOD(Class__Engine__AnimationAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, Skeleton, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_BQU1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationAsset, 0x0040);
		}

		// Class Engine.ActorComponent
		TEST_METHOD(Class__Engine__ActorComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_RH11, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, PrimaryComponentTick, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, ComponentTags, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, AssetUserData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_K9MP, 0x00AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, CustomTag, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, CustomData, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_FBRI, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_YI9T, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponent, 0x00D8);
		}

		// Class Engine.SceneComponent
		TEST_METHOD(Class__Engine__SceneComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_EHXT, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ComponentToWorld, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_OSPC, 0x0112);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, Mobility, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_V3B9, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachParent, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, attachSocketName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachChildren, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeLocation, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeRotation, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeTranslation, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, DetailMode, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_YPO2, 0x017D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachmentChangedIncrementer, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_ZD9T, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeScale3D, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ComponentVelocity, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolume, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolumeChangedDelegate, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_MFFO, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneComponent, 0x01E0);
		}

		// Class Engine.PrimitiveComponent
		TEST_METHOD(Class__Engine__PrimitiveComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MinDrawDistance, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MassiveLODSizeOnScreen, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LDMaxDrawDistance, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CachedMaxDrawDistance, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, DepthPriorityGroup, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, ViewOwnerDepthPriorityGroup, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_KYBP, 0x01F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_7JVN, 0x01F7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilValue, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_4EDK, 0x01FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, ObjectLayer, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_V27D, 0x0206);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, IndirectLightingCacheQuality, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, bHasCachedStaticLighting, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, bStaticLightingBuildEnqueued, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_S2PQ, 0x020B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_CLET, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, TranslucencySortPriority, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VisibilityId, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_BXUE, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, InternalOctreeMask, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LpvBiasMultiplier, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OverrideStepHeight, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_X34N, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BodyInstance, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_AXF2, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BoundsScale, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LastSubmitTime, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LastRenderTime, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LastRenderTimeIgnoreShadow, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CanBeCharacterBase, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CanCharacterStepUpOn, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_Z4FF, 0x04F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentHit, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentBeginOverlap, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentEndOverlap, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnBeginCursorOver, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnEndCursorOver, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnClicked, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnReleased, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchBegin, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnd, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnter, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchLeave, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_3W9J, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, ProxyMeshID, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, bIsProxyMeshParent, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_PBAZ, 0x05FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, PostPhysicsComponentTick, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_E32M, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimitiveComponent, 0x0670);
		}

		// Class Engine.MeshComponent
		TEST_METHOD(Class__Engine__MeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, Materials, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_PUYC, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshComponent, 0x0680);
		}

		// Class Engine.SkinnedMeshComponent
		TEST_METHOD(Class__Engine__SkinnedMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkeletalMesh, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_BS81, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_O5D7, 0x06D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ActiveVertexAnims, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, PhysicsAssetOverride, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ForcedLodModel, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MinLodModel, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, PredictedLODLevel, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, OldPredictedLODLevel, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MaxDistanceFactor, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ShadowedRecentlyRenderedBoundsScaleMultiplier, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, LODInfo, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, StreamingDistanceMultiplier, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, WireframeColor, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ForceTickPoseWithinRangeSquared, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_TAMS, 0x0725);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_XJJ5, 0x0739);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MeshComponentUpdateFlag, 0x073C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_UN3U, 0x073D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_96ZP, 0x0741);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ProgressiveDrawingFraction, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CustomSortAlternateIndexMode, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_PFOH, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedLocalBounds, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, bCachedLocalBoundsUpToDate, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, bEnableUpdateRateOptimizations, 0x0775);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, bDisplayDebugUpdateRateOptimizations, 0x0776);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_GK9U, 0x0777);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkippedTickDeltaTime, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_VGR9, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, AnimUpdateRateParams, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_TO7T, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, OverrideTickingVisiblityMesh, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_Y2EZ, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinnedMeshComponent, 0x07A0);
		}

		// Class Engine.AnimInstance
		TEST_METHOD(Class__Engine__AnimInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, DeltaTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_RG7X, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, CurrentSkeleton, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UngroupedActivePlayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, SyncGroups, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, VertexAnims, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageBlendingOut, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageEnded, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_R0UP, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, bBoneCachesInvalidated, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_LEO2, 0x02E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstance, 0x0340);
		}

		// Class Engine.AnimNotify
		TEST_METHOD(Class__Engine__AnimNotify)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify, bIgnoreOnDediServer, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify, UnknownData_MYBX, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify, 0x0038);
		}

		// Class Engine.AnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState, bIgnoreOnDediServer, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState, UnknownData_HU84, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState, 0x0030);
		}

		// Class Engine.CurveBase
		TEST_METHOD(Class__Engine__CurveBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveBase, UnknownData_KJOM, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveBase, ImportPath, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveBase, 0x0040);
		}

		// Class Engine.CurveFloat
		TEST_METHOD(Class__Engine__CurveFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, FloatKeys, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, FloatCurve, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, bIsEventCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, UnknownData_SXJX, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveFloat, 0x00C0);
		}

		// Class Engine.ForceFeedbackEffect
		TEST_METHOD(Class__Engine__ForceFeedbackEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, ChannelDetails, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, UnknownData_I6PT, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackEffect, 0x0040);
		}

		// Class Engine.Scene
		TEST_METHOD(Class__Engine__Scene)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScene, 0x0028);
		}

		// Class Engine.PlayerCameraManager
		TEST_METHOD(Class__Engine__PlayerCameraManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PCOwner, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, TransformComponent, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraStyle, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultFOV, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LockedFOV, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultOrthoWidth, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LockedOrthoWidth, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, bIsOrthographic, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_B1XR, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultAspectRatio, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FadeColor, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FadeAmount, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ColorScale, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DesiredColorScale, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, OriginalColorScale, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ColorScaleInterpDuration, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ColorScaleInterpStartTime, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_SN4B, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCache, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCache, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTarget, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PendingViewTarget, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, BlendTimeToGo, 0x1360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, BlendParams, 0x1364);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_CCG0, 0x1374);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ModifierList, 0x1378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamDistance, 0x1388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamOffset, 0x138C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, TPVCameraOffset, 0x1398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, TPVCameraCollisionHeightScaler, 0x13A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FadeAlpha, 0x13A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FadeTime, 0x13B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FadeTimeRemaining, 0x13B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraLensEffects, 0x13B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraShakeCamMod, 0x13C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraShakeCamModClass, 0x13D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, bAlwaysApplyModifiers, 0x13D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_CPMY, 0x13D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimInstPool, 0x13E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_6F0S, 0x1420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ActiveAnims, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeAnims, 0x1450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimCameraActor, 0x1460);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_VKN4, 0x146A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMin, 0x146C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMax, 0x1470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMin, 0x1474);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMax, 0x1478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMin, 0x147C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMax, 0x1480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_JZ2A, 0x1484);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastPreModifierCameraCache, 0x1488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerCameraManager, 0x1820);
		}

		// Class Engine.PlayerController
		TEST_METHOD(Class__Engine__PlayerController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, Player, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_JMFH, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, AcknowledgedPawn, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ControllingDirTrackInst, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_BO6M, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, MyHUD, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManager, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManagerClass, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bAutoManageActiveCameraTarget, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_JHFJ, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, TargetViewRotation, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_A5N4, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenActors, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorStateSynchTime, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClientCap, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_EG2L, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatManager, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatClass, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerInput, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ActiveForceFeedbackEffects, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_72M0, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_S3B9, 0x05C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetPlayerIndex, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_GNY8, 0x05CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PendingSwapConnection, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetConnection, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, RotationInput, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PreviousRotationInput, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputYawScale, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputPitchScale, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputRollScale, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_S204, 0x068D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultMouseCursor, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentMouseCursor, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultClickTraceChannel, 0x0692);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentClickTraceChannel, 0x0693);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_GJL0, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bLockedInputUI, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_ZL0F, 0x06A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, TransformComponent, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_R79P, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InactiveStateInputComponent, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_079V, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentTouchInterface, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_SM4M, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpectatorPawn, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpawnLocation, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_Q1DA, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SeamlessTravelCount, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastCompletedSeamlessTravelCount, 0x078A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_C6YI, 0x078C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerController, 0x0858);
		}

		// Class Engine.HUD
		TEST_METHOD(Class__Engine__HUD)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, WhiteColor, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, GreenColor, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, RedColor, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_Y463, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PlayerOwner, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_1L05, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PostRenderedActors, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, LastHUDRenderTime, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, RenderDelta, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugDisplay, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ToggledDebugCategories, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, Canvas, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugCanvas, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugTextList, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_NPD5, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHUD, 0x0550);
		}

		// Class Engine.Info
		TEST_METHOD(Class__Engine__Info)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInfo, 0x0468);
		}

		// Class Engine.PlayerState
		TEST_METHOD(Class__Engine__PlayerState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Score, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Ping, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_QGKS, 0x046D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerName, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_RRZ2, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerId, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_U6EM, 0x0495);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, StartTime, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_6MZO, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, EngineMessageClass, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_T51V, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UniqueID, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_S375, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerState, 0x04F0);
		}

		// Class Engine.Brush
		TEST_METHOD(Class__Engine__Brush)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, CsgOper, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushType, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_L8VL, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushColor, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, PolyFlags, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_AKAL, 0x0475);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, Brush, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushComponent, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_QCE1, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, SavedSelections, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrush, 0x04A0);
		}

		// Class Engine.Volume
		TEST_METHOD(Class__Engine__Volume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolume, 0x04A0);
		}

		// Class Engine.CameraModifier
		TEST_METHOD(Class__Engine__CameraModifier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_D48S, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, CameraOwner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Priority, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_G7BJ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_72NB, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaInTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaOutTime, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Alpha, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, TargetAlpha, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_1P1E, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier, 0x0058);
		}

		// Class Engine.DestructibleActor
		TEST_METHOD(Class__Engine__DestructibleActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, DestructibleComponent, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, UnknownData_RNYA, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, OnActorFracture, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADestructibleActor, 0x0488);
		}

		// Class Engine.DataAsset
		TEST_METHOD(Class__Engine__DataAsset)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataAsset, 0x0028);
		}

		// Class Engine.Light
		TEST_METHOD(Class__Engine__Light)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, LightComponent, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, UnknownData_LZQ8, 0x0471);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALight, 0x0478);
		}

		// Class Engine.DamageType
		TEST_METHOD(Class__Engine__DamageType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_AC1J, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, ImpulseMinimumZPercent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleImpulseScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, ImpulseRagdollScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DefaultImpulse, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, PointDamageArmorEffectiveness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, GeneralDamageArmorEffectiveness, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, ArmorDurabilityDegradationMultiplier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, RadialPartiallyObstructedDamagePercent, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_ISJ3, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType, 0x0050);
		}

		// Class Engine.BlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintFunctionLibrary, 0x0028);
		}

		// Class Engine.Note
		TEST_METHOD(Class__Engine__Note)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANote, 0x0468);
		}

		// Class Engine.SplineActor
		TEST_METHOD(Class__Engine__SplineActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineActor, SplineComponent, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineActor, 0x0470);
		}

		// Class Engine.Emitter
		TEST_METHOD(Class__Engine__Emitter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, ParticleSystemComponent, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, UnknownData_AR1V, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleSpawn, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleBurst, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleDeath, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleCollide, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitter, 0x04B8);
		}

		// Class Engine.Pawn
		TEST_METHOD(Class__Engine__Pawn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_L2H2, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_1RK1, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, BaseEyeHeight, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossess, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_TLGH, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AIControllerClass, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, PlayerState, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, RemoteViewPitch, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_OKYZ, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastHitBy, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, Controller, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_3L5Y, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, bClearOnConsume, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_8JVP, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, TetherActor, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, TetherRadius, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, TetherHeight, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_MG06, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, OnMovementTetherSet, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, ControlInputVector, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastControlInputVector, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, SpawnedForController, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APawn, 0x04F8);
		}

		// Class Engine.Character
		TEST_METHOD(Class__Engine__Character)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, Mesh, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterMovement, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CapsuleComponent, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BasedMovement, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedBasedMovement, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseTranslationOffset, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedMovementMode, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_8WF8, 0x057D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CrouchedEyeHeight, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ProneEyeHeight, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, HarvestingDestructionMeshRangeMultipler, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_KMPJ, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterOverrideSoundFrom, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterOverrideSoundTo, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterOverrideParticleFrom, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterOverrideParticleTo, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, bInBaseReplication, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_AZ0D, 0x05D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpKeyHoldTime, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxHoldTime, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, LastMovementDesiredRotation, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_IO32, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnCharacterMovementUpdated, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ClientRootMotionParams, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RootMotionRepMoves, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RepRootMotion, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ExtraMaxAccelerationModifier, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ExtraFrictionModifier, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_RNUZ, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ForceUnfreezeSkeletalDynamicsUntilTime, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_PF6N, 0x06B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacter, 0x06C0);
		}

		// Class Engine.ReverbVolume
		TEST_METHOD(Class__Engine__ReverbVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AReverbVolume, Priority, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AReverbVolume, UnknownData_HBFB, 0x04A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AReverbVolume, Settings, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AReverbVolume, AmbientZoneSettings, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AReverbVolume, UnknownData_Y2QS, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AReverbVolume, NextLowerPriorityVolume, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReverbVolume, 0x04F0);
		}

		// Class Engine.WorldSettings
		TEST_METHOD(Class__Engine__WorldSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_DCMF, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GroundColorMultiplier, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, SkyColorMultiplier, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, AtmosphericFogMultiplier, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, TrueSkyIntensityMultiplier, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxGroundClutterLayers, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, SM4DirectionalLightMultiplier, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, SM4SKyLightMultiplier, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, SM5DirectionalLightMultiplier, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, SM5SKyLightMultiplier, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NoTrueSkySM5DirectionalLightMultiplier, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NoTrueSkySM5SKyLightMultiplier, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ConsoleSM5DirectionalLightMultiplier, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ConsoleSM5SKyLightMultiplier, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, IBLFadeDistanceMultiplier, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, TexturePoolSizeOverride, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ConsoleOnlyTexturePoolSizeOverride, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalViewDistanceMultiplier, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalProxyDistanceMultiplier, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, bWorldUseStasis, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_JO0J, 0x04C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, SkyLightReference, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DirectionalLightReference, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalIBLCaptureBrightness, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalBakeAndStreamIBLMultiplier, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, TrueSkyColorMultiplier, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, SkyIBLIntensityMultiplier, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZIntervalMin, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZIntervalMax, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, bDisableDFAO, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, bForceAtmosphericFogWithTrueSky, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_92LW, 0x04FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DistanceFieldShadowRaytraceDistanceOverride, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, bInteriorLightingKeepDistanceFieldsOnLowEnd, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_QNX6, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PooledParticles, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_5V6N, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_FHGF, 0x09C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LevelsToAbsolutelyNotLoadOnDediServer, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MasterSkyLightOverride, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_55H7, 0x09E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultAmbientShadowNear, 0x09E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultAmbientShadowFar, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_SX0N, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, Title, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZ, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_MMXR, 0x0A04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZDamageType, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldGravityZ, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalGravityZ, 0x0A14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PhysicsCollisionHandlerClass, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultGameMode, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultMapPrefixes, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GameNetworkManagerClass, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PackedLightAndShadowMapTextureSize, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_R4VM, 0x0A45);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultColorScale, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultMaxDistanceFieldOcclusionDistance, 0x0A54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalDistanceFieldViewDistance, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_6K91, 0x0A5D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityCellSize, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityAggressiveness, 0x0A64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_IY6W, 0x0A65);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_SYRF, 0x0A69);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LightmassSettings, 0x0A6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LevelLightingQuality, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_KI6F, 0x0AB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultReverbSettings, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultAmbientZoneSettings, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_CTGV, 0x0AF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBaseSoundMix, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, bDisableSpatialReplication, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_BVRE, 0x0B01);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, SM4ExposureOffset, 0x0B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_6QKE, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultWaterReverbSettings, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultWaterAmbientZoneSettings, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ProxySettings, 0x0B4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_L121, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldToMeters, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_61UR, 0x0BAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, StreamingLevels, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, TimeDilation, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MatineeTimeDilation, 0x0BC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, Pauser, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_32BI, 0x0BD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DistanceFieldRuntimeQualityMultiplier, 0x0BD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, AlwaysVisibleLevelNames, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LevelsToForceInvisibleWhenExcluded, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinInstancesForConsoleFoliageAutoReduction, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ConsoleFoliageAutoReductionPercent, 0x0BFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_ZBPQ, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, AssetUserData, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_WC18, 0x0C68);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldSettings, 0x0CC8);
		}

		// Class Engine.MovementComponent
		TEST_METHOD(Class__Engine__MovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedComponent, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_K07M, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, Velocity, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintNormal, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintOrigin, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_5GNC, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementComponent, 0x0118);
		}

		// Class Engine.NavigationTypes
		TEST_METHOD(Class__Engine__NavigationTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationTypes, 0x0028);
		}

		// Class Engine.NavMovementComponent
		TEST_METHOD(Class__Engine__NavMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, NavAgentProps, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, UnknownData_SQLT, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, MovementState, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMovementComponent, 0x0130);
		}

		// Class Engine.PawnMovementComponent
		TEST_METHOD(Class__Engine__PawnMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnMovementComponent, PawnOwner, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnMovementComponent, UnknownData_VWT3, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnMovementComponent, 0x0140);
		}

		// Class Engine.CharacterMovementComponent
		TEST_METHOD(Class__Engine__CharacterMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_DM4Q, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CharacterOwner, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_1LWK, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxStepHeight, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpZVelocity, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOffJumpZFactor, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, bSlipOffLedges, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_8KGQ, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeSlipCapsuleRadiusMultiplier, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeSlipPushVelocity, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeSlipVelocityBuildUpMultiplier, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorAngle, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorZ, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_CAW5, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MovementMode, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CustomMovementMode, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_5G1N, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GravityScale, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundFriction, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeed, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeedCrouched, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeedProne, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxCustomMovementSpeed, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSwimSpeed, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxFlySpeed, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LandedPreventRequestedMoveInterval, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LandedPreventRequestedMoveMinVelocityMagnitude, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinimumImpulseToApply, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_DHVK, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxAcceleration, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxImpulseVelocityMagnitude, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxImpulseVelocityZ, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationWalking, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFalling, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationSwimming, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFlying, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControl, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostMultiplier, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostVelocityThreshold, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, FallingLateralFriction, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CrouchedHalfHeight, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ProneHalfHeight, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Buoyancy, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchRadiusThreshold, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchAdditionalHeight, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RotationRate, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DeferredUpdatedMoveComponent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxOutOfWaterStepHeight, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, OutOfWaterZ, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Mass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DinoClientPositionErrorToleranceStopped, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DinoClientPositionErrorToleranceMovingFlying, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PlayerClientPositionErrorToleranceOverride, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, SimulatedTickSkipDistanceSQ, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, bEnablePhysicsInteraction, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, bTouchForceScaledToMass, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, bPushForceScaledToMass, 0x026E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, bScalePushForceToVelocity, 0x026F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, StandingDownwardForceScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, InitialPushForceFactor, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForceFactor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForcePointZOffsetFactor, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, TouchForceFactor, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTouchForce, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxTouchForce, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RepulsionForce, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_XP1V, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CrouchedSpeedMultiplier, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateLocation, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MoveStartLocation, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnalogInputModifier, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BackwardsMaxSpeedMultiplier, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BackwardsMovementDotThreshold, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingForceToApply, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingImpulseToApply, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Acceleration, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationTimeStep, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationIterations, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeCheckThreshold, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOutOfWaterPitch, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UpperImpactNormalScale, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_3MOA, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentFloor, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultLandMovementMode, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultWaterMovementMode, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_1VV4, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_XEV7, 0x0397);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PreventWaterHoppingPlaneOffset, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_RF7X, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PreventWaterHopping_LastTimeAtSurface, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AccelerationFollowsRotationMinDot, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AccelerationFollowsRotationStopDistance, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RotationAcceleration, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RotationBraking, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AngleToStartRotationBraking, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, SwimmingAccelZMultiplier, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, TamedSwimmingAccelZMultiplier, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_C06K, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_JWAY, 0x03CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastForcedNetVelocity, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_KSSI, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastStepUpTime, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_4X9R, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastSwimTime, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentRotationSpeed, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RequestedVelocity, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DisableMovementPhysicsUntilTime, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LostDeltaTime, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastLostDeltaTime, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceUID, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceWeight, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingLaunchVelocity, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_BXTZ, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PreClothComponentTick, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_QIZI, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTimeBetweenTimeStampResets, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_5VRF, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ClientMovedData, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_9W5J, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RootMotionParams, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, bWasSimulatingRootMotion, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_CC9O, 0x0521);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMovementComponent, 0x0540);
		}

		// Class Engine.CheatManager
		TEST_METHOD(Class__Engine__CheatManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerRef, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, UnknownData_12B7, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatManager, 0x0080);
		}

		// Class Engine.Engine
		TEST_METHOD(Class__Engine__Engine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_2NOG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFont, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFontName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFont, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFontName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFont, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFontName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFont, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFontName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFont, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFontName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFonts, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_NGPZ, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFontNames, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClass, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClassName, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClass, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClassName, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClassName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClassName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClassName, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClass, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClassName, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClass, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClass, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClassName, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClassName, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClass, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettings, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClass, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClassName, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBlueprintBaseClassName, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingletonClassName, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingleton, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTireType, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTireTypeName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPreviewPawnClass, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPreviewPawnClassName, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PlayOnConsoleSaveDir, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTexture, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTextureName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTexture, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTextureName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTexture, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTextureName, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTexture, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTextureName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTexture, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTextureName, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterial, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterialName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterial, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterialName, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterial, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterialName, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterial, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterialName, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityMaterial, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityName, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterial, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterialName, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterial, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterialName, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterial, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterialName, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterial, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterialName, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_ColorOnly, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_ColorOnly, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_AlphaAsColor, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_AlphaAsColor, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_RedOnly, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_RedOnly, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_GreenOnly, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_GreenOnly, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_BlueOnly, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_BlueOnly, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterial, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialX, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialY, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZ, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialName, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterial, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterialName, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterial, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterialName, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterial, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialName, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingOnlyBrightness, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightComplexityColors, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShaderComplexityColors, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StationaryLightOverlapColors, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxPixelShaderAdditiveComplexityCount, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES2PixelShaderAdditiveComplexityCount, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinLightMapDensity, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, IdealLightMapDensity, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxLightMapDensity, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_K8R3, 0x04AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityGrayscaleScale, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityColorScale, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityVertexMappedColor, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensitySelectedColor, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StatColorMappings, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterial, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterialName, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveGameNameRedirects, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveClassRedirects, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActivePluginRedirects, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveStructRedirects, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTexture, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTextureName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTexture, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTextureName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTexture, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTextureName, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTexture, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTextureName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_353C, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewport, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DeferredCommands, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TickCycles, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameCycles, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ClientCycles, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NearClipPlane, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_VTB1, 0x05D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimeBetweenPurgingPendingKillObjects, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_NP6T, 0x05D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AsyncLoadingTimeLimit, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_CP8L, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PriorityAsyncLoadingExtraTime, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelStreamingActorsUpdateTimeLimit, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelStreamingComponentsRegistrationGranularity, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaximumLoopIterationCount, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_6P28, 0x05F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmoothedFrameRateRange, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_9INA, 0x0609);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NumPawnsAllowedToBeSpawnedInAFrame, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_UNKW, 0x0611);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WorldBox, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushWire, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_AddWire, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SubtractWire, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SemiSolidWire, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_NonSolidWire, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WireBackground, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_ScaleBoxHi, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_VolumeCollision, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BSPCollision, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_OrthoBackground, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_Volume, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushShape, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingDistanceFactor, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionType, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_GHOB, 0x064D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionDescription, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionGameMode, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MeshLODRange, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_R7UO, 0x0675);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraRotationThreshold, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraTranslationThreshold, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PrimitiveProbablyVisibleTime, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxOcclusionPixelsFraction, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_ORCW, 0x0689);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResize, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResizeWarn, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_EDQV, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PendingDroppedNotes, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicErrorCorrection, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetClientTicksPerSecond, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_3YVQ, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DisplayGamma, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinDesiredFrameRate, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultSelectedMaterialColor, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColor, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionOutlineColor, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColorOverride, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bIsOverridingSelectedColor, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_SW0Y, 0x0715);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_5NZJ, 0x0719);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bEnableVisualLogRecordingOnStart, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DeviceProfileManager, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_IEF8, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ScreenSaverInhibitorSemaphore, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_WUZM, 0x0731);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MatineeCaptureName, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MatineePackageCaptureName, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MatineeCaptureFPS, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MatineeCaptureType, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bNoTextureStreaming, 0x075D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_IRH2, 0x075E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_RV97, 0x0761);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ParticleEventManagerClassPath, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_N13N, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensity, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BSPSelectionHighlightIntensity, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HoverHighlightIntensity, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensityBillboards, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_IMMS, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetDriverDefinitions, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ServerActors, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_XX10, 0x0921);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NextWorldContextHandle, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_DOIC, 0x093C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngine, 0x0950);
		}

		// Class Engine.GameEngine
		TEST_METHOD(Class__Engine__GameEngine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, UnknownData_SNLY, 0x0951);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, MaxDeltaTime, 0x0954);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, GameInstance, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, UnknownData_75XD, 0x0960);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEngine, 0x0990);
		}

		// Class Engine.GameMode
		TEST_METHOD(Class__Engine__GameMode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MatchState, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_2PKK, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, OptionsString, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, DefaultPawnClass, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, HUDClass, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumSpectators, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumPlayers, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumBots, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MinRespawnDelay, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, GameSession, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumTravellingPlayers, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, CurrentID, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, DefaultPlayerName, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, PlayerStarts, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, EngineMessageClass, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, PlayerControllerClass, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, SpectatorClass, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, PlayerStateClass, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, GameStateClass, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, GameState, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerArray, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_0ADT, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, AntiDupeTransactionLog, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, GameModeClassAliases, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerStateLifeSpan, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_CSV5, 0x0544);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameMode, 0x0558);
		}

		// Class Engine.GameInstance
		TEST_METHOD(Class__Engine__GameInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_09G6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, LocalPlayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_ZIZF, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstance, 0x0058);
		}

		// Class Engine.GameSession
		TEST_METHOD(Class__Engine__GameSession)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSpectators, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPlayers, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSplitscreensPerConnection, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, bRequiresPushToTalk, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, UnknownData_SJVM, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, SessionName, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, UnknownData_D2FG, 0x047C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameSession, 0x0480);
		}

		// Class Engine.GameState
		TEST_METHOD(Class__Engine__GameState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, GameModeClass, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, AuthorityGameMode, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, SpectatorClass, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, UnknownData_V5LI, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, MatchState, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, PreviousMatchState, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, UnknownData_H9FB, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, OnAnyPostProcessVolumeEntered, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, OnAnyPostProcessVolumeLeft, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, ElapsedTime, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, UnknownData_DLJV, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, PlayerArray, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, InactivePlayerArray, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, UnknownData_Q89M, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameState, 0x0530);
		}

		// Class Engine.GameUserSettings
		TEST_METHOD(Class__Engine__GameUserSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseVSync, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_IAM0, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, MacroCtrl0, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, MacroCtrl1, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, MacroCtrl2, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, MacroCtrl3, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, MacroCtrl4, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, MacroCtrl5, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, MacroCtrl6, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, MacroCtrl7, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, MacroCtrl8, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, MacroCtrl9, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeX, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeY, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeX, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeY, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosX, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosY, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDesktopResolutionForFullscreen, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_MVX5, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FullscreenMode, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedFullscreenMode, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, Version, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameUserSettings, 0x0128);
		}

		// Class Engine.ScriptViewportClient
		TEST_METHOD(Class__Engine__ScriptViewportClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptViewportClient, UnknownData_QK3Y, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptViewportClient, 0x0030);
		}

		// Class Engine.GameViewportClient
		TEST_METHOD(Class__Engine__GameViewportClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_XKBP, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, ViewPortWidgets, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, ViewportConsole, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, DebugProperties, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_6MVB, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, World, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, GameInstance, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_A4VW, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameViewportClient, 0x0140);
		}

		// Class Engine.MaterialInterface
		TEST_METHOD(Class__Engine__MaterialInterface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_TFJ8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, SubsurfaceProfile, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_L4PI, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, LightmassSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_6NR0, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInterface, 0x0060);
		}

		// Class Engine.ParticleSystemComponent
		TEST_METHOD(Class__Engine__ParticleSystemComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, Template, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, EmitterMaterials, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SkelMeshComponents, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_WEC5, 0x0692);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, InstanceParameters, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleSpawn, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleBurst, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleDeath, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleCollide, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OldPosition, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, PartSysVelocity, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTime, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTickRate, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_M3XB, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SecondsBeforeInactive, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_LW6N, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, MaxTimeBeforeForceUpdateTransform, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_4C7S, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_VJ5I, 0x0729);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, LODMethod, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_FJPG, 0x072D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_CHFS, 0x0731);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, CachedViewRelevanceFlags, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_QW0M, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, ReplayClips, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_DNOW, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, CustomTimeDilation, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_PJU9, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnSystemFinished, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_JXQ5, 0x07F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemComponent, 0x0830);
		}

		// Class Engine.SaveGame
		TEST_METHOD(Class__Engine__SaveGame)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGame, 0x0028);
		}

		// Class Engine.Player
		TEST_METHOD(Class__Engine__Player)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_YGRH, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, PlayerController, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, CurrentNetSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredInternetSpeed, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredLanSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_9XPF, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayer, 0x0050);
		}

		// Class Engine.LocalPlayer
		TEST_METHOD(Class__Engine__LocalPlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ControllerId, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_8EBS, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ViewportClient, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, Origin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, Size, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, LastViewLocation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, AspectRatioAxisConstraint, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_30M1, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, PendingLevelPlayerControllerClass, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_EA9Y, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, bValidCachedViewFrustum, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_K17I, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, OnlineSession, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_JVTT, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayer, 0x0230);
		}

		// Class Engine.OnlineSession
		TEST_METHOD(Class__Engine__OnlineSession)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSession, 0x0028);
		}

		// Class Engine.DefaultPawn
		TEST_METHOD(Class__Engine__DefaultPawn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseTurnRate, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseLookUpRate, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MovementComponent, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, CollisionComponent, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MeshComponent, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, UnknownData_AZAQ, 0x0519);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPawn, 0x0520);
		}

		// Class Engine.SpectatorPawn
		TEST_METHOD(Class__Engine__SpectatorPawn)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorPawn, 0x0520);
		}

		// Class Engine.SoundNode
		TEST_METHOD(Class__Engine__SoundNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, ChildNodes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNode, 0x0038);
		}

		// Class Engine.PhysicsVolume
		TEST_METHOD(Class__Engine__PhysicsVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, TerminalVelocity, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, Priority, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, FluidFriction, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, UnknownData_9VFJ, 0x04AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, WaterDensity, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, WaterDamping, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, PhysicsMinWalkableFloorZ, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, UnknownData_1BR6, 0x04BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsVolume, 0x04C0);
		}

		// Class Engine.AISystemBase
		TEST_METHOD(Class__Engine__AISystemBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemClassName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystemBase, 0x0040);
		}

		// Class Engine.BlueprintGeneratedClass
		TEST_METHOD(Class__Engine__BlueprintGeneratedClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, NumReplicatedProperties, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_JLY9, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ReplicatedPropertiesInitialOnly, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, DynamicBindingObjects, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentTemplates, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, Timelines, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, SimpleConstructionScript, 0x01D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGeneratedClass, 0x01D8);
		}

		// Class Engine.NetConnection
		TEST_METHOD(Class__Engine__NetConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Children, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Driver, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMap, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_4CRL, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OpenChannels, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, SentTemporaries, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, LastDormancyLocCheck, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PlayerControllerTimer, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_16MS, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, SpatialFrame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, NextSpatialFrameCheckTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Viewer, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OwningActor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, MaxPacket, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_KH4S, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, LastReceiveTime, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_DNG5, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ClientGivenIP, 0x341E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_RXGG, 0x341F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetConnection, 0x34318);
		}

		// Class Engine.NetDriver
		TEST_METHOD(Class__Engine__NetDriver)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_FAWR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClassName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxDownloadSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_99C5, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetServerMaxTickRate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxInternetClientRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxClientRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerTravelPause, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, SpawnPrioritySeconds, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RelevantTimeout, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, KeepAliveTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, InitialConnectTimeout, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ConnectionTimeout, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, InitialConnectTimeoutToServer, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ConnectionTimeoutToServer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RequireEngineVersionMatch, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_NZWX, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerConnection, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ClientConnections, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, World, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_HJG2, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RoleProperty, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RemoteRoleProperty, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetDriverName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_IVMJ, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, Time, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_RJ3F, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetDriver, 0x03A0);
		}

		// Class Engine.Model
		TEST_METHOD(Class__Engine__Model)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UModel, UnknownData_DA0Y, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModel, 0x05A0);
		}

		// Class Engine.Interface_AssetUserData
		TEST_METHOD(Class__Engine__Interface_AssetUserData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_AssetUserData, 0x0028);
		}

		// Class Engine.AmbientSound
		TEST_METHOD(Class__Engine__AmbientSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, UnknownData_QNA2, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, AudioComponent, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, SoundNodeInstance, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, bOverrideAutoplay, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, UnknownData_YKNE, 0x0481);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmbientSound, 0x0488);
		}

		// Class Engine.LevelBase
		TEST_METHOD(Class__Engine__LevelBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelBase, UnknownData_2JUW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelBase, 0x00B0);
		}

		// Class Engine.PendingNetGame
		TEST_METHOD(Class__Engine__PendingNetGame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_RTHY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, NetDriver, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_AFY8, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPendingNetGame, 0x0130);
		}

		// Class Engine.World
		TEST_METHOD(Class__Engine__World)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_NWU6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLevel, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, SaveGameSummary, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetDriver, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LineBatcher, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLineBatcher, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ForegroundLineBatcher, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, GameState, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetworkManager, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PhysicsCollisionHandler, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ExtraReferencedObjects, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevels, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsPrefix, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingVisibility, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, MyParticleEventManager, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DefaultPhysicsVolume, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_0P73, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_1KOV, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AuthorityGameMode, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NavigationSystem, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AISystem, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AvoidanceManager, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, Levels, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_R67U, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevel, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, OwningGameInstance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ParameterCollectionInstances, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForRenderingToTarget, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForDrawMaterialToRenderTarget, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, FrameCounter, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_40IG, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, WorldComposition, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_Z02M, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_OXD9, 0x0C1D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorld, 0x0C20);
		}

		// Class Engine.Level
		TEST_METHOD(Class__Engine__Level)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_GODG, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, OwningWorld, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, Model, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ModelComponents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelScriptActor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListStart, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListEnd, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightmapTotalSize, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ShadowmapTotalSize, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StaticNavigableGeometry, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_Y672, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_YK74, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, MovieSceneBindingsArray, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ActiveRuntimeMovieScenePlayers, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, AssetUserData, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_9VJW, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevel, 0x0350);
		}

		// Class Engine.BrushShape
		TEST_METHOD(Class__Engine__BrushShape)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrushShape, 0x04A0);
		}

		// Class Engine.BlockingVolume
		TEST_METHOD(Class__Engine__BlockingVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlockingVolume, bAddToBlockingVolumeList, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlockingVolume, UnknownData_QO7A, 0x04A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlockingVolume, 0x04A8);
		}

		// Class Engine.CameraBlockingVolume
		TEST_METHOD(Class__Engine__CameraBlockingVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraBlockingVolume, 0x04A0);
		}

		// Class Engine.CullDistanceVolume
		TEST_METHOD(Class__Engine__CullDistanceVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, CullDistances, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, UnknownData_OLY6, 0x04B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACullDistanceVolume, 0x04B8);
		}

		// Class Engine.FoliageInclusionVolume
		TEST_METHOD(Class__Engine__FoliageInclusionVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFoliageInclusionVolume, 0x04A0);
		}

		// Class Engine.LevelStreamingVolume
		TEST_METHOD(Class__Engine__LevelStreamingVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingLevelNames, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_6HZA, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingUsage, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_ZZY1, 0x04B5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelStreamingVolume, 0x04B8);
		}

		// Class Engine.LightmassCharacterIndirectDetailVolume
		TEST_METHOD(Class__Engine__LightmassCharacterIndirectDetailVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassCharacterIndirectDetailVolume, 0x04A0);
		}

		// Class Engine.LightmassImportanceVolume
		TEST_METHOD(Class__Engine__LightmassImportanceVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassImportanceVolume, 0x04A0);
		}

		// Class Engine.MergeMeshVolume
		TEST_METHOD(Class__Engine__MergeMeshVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMergeMeshVolume, GridCountX, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMergeMeshVolume, GridCountY, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMergeMeshVolume, GridCountZ, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMergeMeshVolume, UnknownData_EAMH, 0x04AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMergeMeshVolume, 0x04B0);
		}

		// Class Engine.NavMeshBoundsVolume
		TEST_METHOD(Class__Engine__NavMeshBoundsVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, UnknownData_S772, 0x04A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavMeshBoundsVolume, 0x04A8);
		}

		// Class Engine.NavRelevantInterface
		TEST_METHOD(Class__Engine__NavRelevantInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantInterface, 0x0028);
		}

		// Class Engine.NavModifierVolume
		TEST_METHOD(Class__Engine__NavModifierVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, UnknownData_KQKR, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, AreaClass, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavModifierVolume, 0x04B0);
		}

		// Class Engine.DefaultPhysicsVolume
		TEST_METHOD(Class__Engine__DefaultPhysicsVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPhysicsVolume, 0x04C0);
		}

		// Class Engine.KillZVolume
		TEST_METHOD(Class__Engine__KillZVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillZVolume, 0x04C0);
		}

		// Class Engine.PainCausingVolume
		TEST_METHOD(Class__Engine__PainCausingVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_BG01, 0x04C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamagePerSec, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageType, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, PainInterval, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_OWTN, 0x04D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, ActorClassesToExclude, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, ActorClassesToInclude, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_BN6R, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageInstigator, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APainCausingVolume, 0x0508);
		}

		// Class Engine.Interface_PostProcessVolume
		TEST_METHOD(Class__Engine__Interface_PostProcessVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PostProcessVolume, 0x0028);
		}

		// Class Engine.PostProcessVolume
		TEST_METHOD(Class__Engine__PostProcessVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_BSDE, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Settings, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Priority, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendRadius, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendWeight, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, MaterialWaterLineParameterValue, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_905T, 0x0811);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, VolumeType, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_RTXU, 0x0815);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_E4V5, 0x0819);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, ViewDistanceMultiplier, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, OnPostProcessVolumeEntered, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, OnPostProcessVolumeLeft, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, DisabledHeightFogs, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, PrimaryLerpingHeightFogs, 0x0850);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APostProcessVolume, 0x0860);
		}

		// Class Engine.SpherePostProcessVolume
		TEST_METHOD(Class__Engine__SpherePostProcessVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpherePostProcessVolume, SphereVolumeRadius, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpherePostProcessVolume, UnknownData_KPC2, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpherePostProcessVolume, SphereComponent, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpherePostProcessVolume, 0x0870);
		}

		// Class Engine.PrecomputedVisibilityOverrideVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityOverrideVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideVisibleActors, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleActors, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleLevels, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityOverrideVolume, 0x04D0);
		}

		// Class Engine.PrecomputedVisibilityVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityVolume, 0x04A0);
		}

		// Class Engine.TileStreamingVolume
		TEST_METHOD(Class__Engine__TileStreamingVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATileStreamingVolume, StreamingLevelNames, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATileStreamingVolume, ExcludeLevelNames, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATileStreamingVolume, UnknownData_5WA4, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATileStreamingVolume, UnknownData_FTMP, 0x0511);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATileStreamingVolume, 0x0518);
		}

		// Class Engine.TriggerVolume
		TEST_METHOD(Class__Engine__TriggerVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerVolume, 0x04A0);
		}

		// Class Engine.CameraActor
		TEST_METHOD(Class__Engine__CameraActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AutoActivateForPlayer, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_6M0H, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, CameraComponent, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_SCLP, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_VTO2, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AspectRatio, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, FOVAngle, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessBlendWeight, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessSettings, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraActor, 0x07E8);
		}

		// Class Engine.NavAgentInterface
		TEST_METHOD(Class__Engine__NavAgentInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAgentInterface, 0x0028);
		}

		// Class Engine.InputComponent
		TEST_METHOD(Class__Engine__InputComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_8VLR, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputComponent, 0x0150);
		}

		// Class Engine.DebugCameraController
		TEST_METHOD(Class__Engine__DebugCameraController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_J76N, 0x0859);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, DrawFrustum, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_9LNK, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraController, 0x08A0);
		}

		// Class Engine.LogVisualizerCameraController
		TEST_METHOD(Class__Engine__LogVisualizerCameraController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALogVisualizerCameraController, PickedActor, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALogVisualizerCameraController, UnknownData_ZQRM, 0x08A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALogVisualizerCameraController, 0x08B8);
		}

		// Class Engine.DecalActor
		TEST_METHOD(Class__Engine__DecalActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADecalActor, Decal, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADecalActor, 0x0470);
		}

		// Class Engine.DocumentationActor
		TEST_METHOD(Class__Engine__DocumentationActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADocumentationActor, UnknownData_9Q60, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADocumentationActor, 0x0470);
		}

		// Class Engine.DynamicCaptureManager
		TEST_METHOD(Class__Engine__DynamicCaptureManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, SavePath, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, bUseMapRelativeSaving, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, UnknownData_TQ1I, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, Matinee, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, CapturesData, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, OverridenCapturesData, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, bIsMasterSkylightOverrider, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, UnknownData_ASBH, 0x0799);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, OverrideMasterSkylightCapturesPath, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, OverrideMasterSkylightData, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, CaptureInterval, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, PreviewMatineeTime, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, UnknownData_7K2D, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, LoadedSnapshot0, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, LoadedSnapshot1, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, OverrideLoadedSnapshot0, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, OverrideLoadedSnapshot1, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, OldCapturesData, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADynamicCaptureManager, UnknownData_DJA7, 0x0948);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADynamicCaptureManager, 0x0A90);
		}

		// Class Engine.EmitterCameraLensEffectBase
		TEST_METHOD(Class__Engine__EmitterCameraLensEffectBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffect, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffectNonExtremeContent, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseFOV, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, DistFromCamera, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_TX8S, 0x04D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, EmittersToTreatAsSame, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseCamera, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitterCameraLensEffectBase, 0x04F0);
		}

		// Class Engine.GroundClutterLayerActor
		TEST_METHOD(Class__Engine__GroundClutterLayerActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGroundClutterLayerActor, ClutterComponent, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGroundClutterLayerActor, 0x0470);
		}

		// Class Engine.HierarchicalInstancedStaticMeshActor
		TEST_METHOD(Class__Engine__HierarchicalInstancedStaticMeshActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AHierarchicalInstancedStaticMeshActor, InstancedStaticMeshComponent, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHierarchicalInstancedStaticMeshActor, 0x0470);
		}

		// Class Engine.HoudiniEmptyActor
		TEST_METHOD(Class__Engine__HoudiniEmptyActor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHoudiniEmptyActor, 0x0468);
		}

		// Class Engine.DebugCameraHUD
		TEST_METHOD(Class__Engine__DebugCameraHUD)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraHUD, 0x0550);
		}

		// Class Engine.LogVisualizerHUD
		TEST_METHOD(Class__Engine__LogVisualizerHUD)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALogVisualizerHUD, UnknownData_86UB, 0x0550);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALogVisualizerHUD, 0x0580);
		}

		// Class Engine.AtmosphericFog
		TEST_METHOD(Class__Engine__AtmosphericFog)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAtmosphericFog, AtmosphericFogComponent, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAtmosphericFog, 0x0470);
		}

		// Class Engine.ExponentialHeightFog
		TEST_METHOD(Class__Engine__ExponentialHeightFog)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, Component, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, UnknownData_8A3W, 0x0471);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AExponentialHeightFog, 0x0478);
		}

		// Class Engine.AntiDupeTransactionLog
		TEST_METHOD(Class__Engine__AntiDupeTransactionLog)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAntiDupeTransactionLog, CurrentWorld, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAntiDupeTransactionLog, UnknownData_754F, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAntiDupeTransactionLog, 0x00C0);
		}

		// Class Engine.LocalSpawnGameMode
		TEST_METHOD(Class__Engine__LocalSpawnGameMode)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALocalSpawnGameMode, 0x0558);
		}

		// Class Engine.GameNetworkManager
		TEST_METHOD(Class__Engine__GameNetworkManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, AdjustedNetSpeed, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, LastNetSpeedUpdateTime, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, TotalNetBandwidth, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MinDynamicBandwidth, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxDynamicBandwidth, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_LAGG, 0x047D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyRxCheatTime, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyTxCheatTime, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPingThreshold, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForRxStandby, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForTxStandby, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentForBadPing, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, JoinInProgressStandbyWaitTime, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MoveRepSize, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXPOSITIONERRORSQUARED, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXNEARZEROVELOCITYSQUARED, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, CLIENTADJUSTUPDATECOST, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXCLIENTUPDATEINTERVAL, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientAuthorativePosition, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bUseDistanceBasedRelevancy, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_97FR, 0x04B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameNetworkManager, 0x04B8);
		}

		// Class Engine.MatineeActorManager
		TEST_METHOD(Class__Engine__MatineeActorManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActorManager, bPriorityToFloatSets, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActorManager, bPriorityToVectorSets, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActorManager, UnknownData_7L6L, 0x046A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActorManager, 0x0480);
		}

		// Class Engine.SkyLight
		TEST_METHOD(Class__Engine__SkyLight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, LightComponent, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, UnknownData_Z5W1, 0x0471);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyLight, 0x0478);
		}

		// Class Engine.WindDirectionalSource
		TEST_METHOD(Class__Engine__WindDirectionalSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWindDirectionalSource, Component, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWindDirectionalSource, 0x0470);
		}

		// Class Engine.InstancedFoliageActor
		TEST_METHOD(Class__Engine__InstancedFoliageActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, SelectedMesh, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, EditorScrollPercent, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, UnknownData_T6OY, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, FoliageTypes, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, InstancedStaticMeshComponent, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, UnknownData_JLU7, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, BaseMeshLookup, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, UnknownData_0ZTT, 0x04F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstancedFoliageActor, 0x0528);
		}

		// Class Engine.LandscapeGizmoActor
		TEST_METHOD(Class__Engine__LandscapeGizmoActor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActor, 0x0468);
		}

		// Class Engine.LandscapeGizmoActiveActor
		TEST_METHOD(Class__Engine__LandscapeGizmoActiveActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeGizmoActiveActor, UnknownData_RVKY, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActiveActor, 0x04B8);
		}

		// Class Engine.LandscapeProxy
		TEST_METHOD(Class__Engine__LandscapeProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SplineComponent, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeGuid, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeSectionOffset, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MaxLODLevel, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingLOD, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, DefaultPhysMaterial, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StreamingDistanceMultiplier, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_I4NP, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterial, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeHoleMaterial, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistanceFactor, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ZRescaleBuilder, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeComponents, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionComponents, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingResolution, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeActor, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_SQ9T, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightmassSettings, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionMipLevel, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionThickness, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_CV0N, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, BodyInstance, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LayerInfoObjs, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentSizeQuads, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SubsectionSizeQuads, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NumSubsections, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_BY0W, 0x069D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODFalloff, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_4NPQ, 0x06A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MaxPaintedLayersPerComponent, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_CJ27, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeProxy, 0x0748);
		}

		// Class Engine.Landscape
		TEST_METHOD(Class__Engine__Landscape)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscape, 0x0748);
		}

		// Class Engine.LevelBounds
		TEST_METHOD(Class__Engine__LevelBounds)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, bAutoUpdateBounds, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, UnknownData_TNCM, 0x0469);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelBounds, 0x0470);
		}

		// Class Engine.LevelScriptActor
		TEST_METHOD(Class__Engine__LevelScriptActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelScriptActor, UnknownData_B0DU, 0x0469);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelScriptActor, 0x0470);
		}

		// Class Engine.DirectionalLight
		TEST_METHOD(Class__Engine__DirectionalLight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADirectionalLight, UnknownData_L6NP, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADirectionalLight, 0x0480);
		}

		// Class Engine.PointLight
		TEST_METHOD(Class__Engine__PointLight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APointLight, PointLightComponent, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointLight, 0x0480);
		}

		// Class Engine.SpotLight
		TEST_METHOD(Class__Engine__SpotLight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpotLight, SpotLightComponent, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpotLight, 0x0480);
		}

		// Class Engine.GeneratedMeshAreaLight
		TEST_METHOD(Class__Engine__GeneratedMeshAreaLight)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeneratedMeshAreaLight, 0x0480);
		}

		// Class Engine.MaterialInstanceActor
		TEST_METHOD(Class__Engine__MaterialInstanceActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMaterialInstanceActor, TargetActors, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMaterialInstanceActor, 0x0478);
		}

		// Class Engine.MatineeActor
		TEST_METHOD(Class__Engine__MatineeActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_F2LU, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeData, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeControllerName, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PlayRate, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_IAAH, 0x0485);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ForceStartPosition, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeManagerPriority, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_2I7Z, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PreferredSplitScreenNum, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_I9QU, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, InterpPosition, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupActorInfos, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_VRZO, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupInst, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, CameraCuts, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_5JR8, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ReplicationForceIsPlaying, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_9B64, 0x04E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActor, 0x04F0);
		}

		// Class Engine.MatineeActorCameraAnim
		TEST_METHOD(Class__Engine__MatineeActorCameraAnim)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActorCameraAnim, CameraAnim, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActorCameraAnim, 0x04F8);
		}

		// Class Engine.NavigationQueryFilter
		TEST_METHOD(Class__Engine__NavigationQueryFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, Areas, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, IncludeFlags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, ExcludeFlags, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter, 0x0040);
		}

		// Class Engine.NavigationData
		TEST_METHOD(Class__Engine__NavigationData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RenderingComp, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, NavDataConfig, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_SOT4, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, ObservedPathsTickInterval, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_162K, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, SupportedAreas, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_WXGS, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationData, 0x05E0);
		}

		// Class Engine.NavigationGraph
		TEST_METHOD(Class__Engine__NavigationGraph)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraph, 0x05E0);
		}

		// Class Engine.RecastNavMesh
		TEST_METHOD(Class__Engine__RecastNavMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_1CU2, 0x05E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DrawOffset, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSizeUU, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellSize, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellHeight, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentRadius, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentHeight, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxHeight, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxSlope, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxStepHeight, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MinRegionArea, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MergeRegionSize, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimplificationError, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultDrawDistance, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxSearchNodes, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxHierarchicalSearchNodes, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_CVNC, 0x0621);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionPartitioning, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerPartitioning, 0x0625);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_1NEY, 0x0626);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionChunkSplits, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerChunkSplits, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxTileGridWidth, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxTileGridHeight, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_MG1D, 0x0639);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSetUpdateInterval, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, HeuristicScale, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_Y86X, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARecastNavMesh, 0x06F8);
		}

		// Class Engine.NavigationGraphNode
		TEST_METHOD(Class__Engine__NavigationGraphNode)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraphNode, 0x0468);
		}

		// Class Engine.NavigationObjectBase
		TEST_METHOD(Class__Engine__NavigationObjectBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_UXSP, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, CapsuleComponent, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, GoodSprite, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, BadSprite, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_ZX3L, 0x0489);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationObjectBase, 0x0490);
		}

		// Class Engine.PlayerStart
		TEST_METHOD(Class__Engine__PlayerStart)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerStart, PlayerStartTag, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerStart, SpawnPointRegion, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerStart, UnknownData_FE6C, 0x049C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStart, 0x04A0);
		}

		// Class Engine.PlayerStartPIE
		TEST_METHOD(Class__Engine__PlayerStartPIE)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStartPIE, 0x04A0);
		}

		// Class Engine.NavPathObserverInterface
		TEST_METHOD(Class__Engine__NavPathObserverInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavPathObserverInterface, 0x0028);
		}

		// Class Engine.NavigationTestingActor
		TEST_METHOD(Class__Engine__NavigationTestingActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_M01Q, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CapsuleComponent, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, NavAgentProps, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, QueryingExtent, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_FKF1, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MyNavData, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ProjectedLocation, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_WQRW, 0x04B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostDisplayMode, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_FI3U, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, TextCanvasOffset, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_K9KI, 0x04C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingTime, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathCost, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingSteps, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_OPAU, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OtherActor, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, FilterClass, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ShowStepIndex, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OffsetFromCornersDistance, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_GPL8, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationTestingActor, 0x0500);
		}

		// Class Engine.NavLinkDefinition
		TEST_METHOD(Class__Engine__NavLinkDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, Links, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, SegmentLinks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, UnknownData_AODV, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkDefinition, 0x0050);
		}

		// Class Engine.NavLinkHostInterface
		TEST_METHOD(Class__Engine__NavLinkHostInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkHostInterface, 0x0028);
		}

		// Class Engine.NavLinkProxy
		TEST_METHOD(Class__Engine__NavLinkProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_O81E, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, PointLinks, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SegmentLinks, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SmartLinkComp, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, bSmartLinkIsRelevant, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_0KIK, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, OnSmartLinkReached, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavLinkProxy, 0x04B8);
		}

		// Class Engine.NiagaraActor
		TEST_METHOD(Class__Engine__NiagaraActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, NiagaraComponent, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraActor, 0x0470);
		}

		// Class Engine.ParticleEventManager
		TEST_METHOD(Class__Engine__ParticleEventManager)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AParticleEventManager, 0x0468);
		}

		// Class Engine.Skeleton
		TEST_METHOD(Class__Engine__Skeleton)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BoneTree, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, RefLocalPoses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_QZ9S, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, LinkupCache, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, Sockets, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_3MCX, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SmartNames, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_KKX6, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SlotGroups, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_IAMA, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeleton, 0x02B0);
		}

		// Class Engine.SkeletalMesh
		TEST_METHOD(Class__Engine__SkeletalMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_VTOC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Skeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Bounds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, CachedInitialSphereRadiusBounds, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Materials, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, CloseToGroundBoneName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, GroundBonesChains, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, DefaultTraceLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, TraceStartOffset, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, InterpolationSpeed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, InterpolationSpeedUpward, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorTable, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorAxis, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorFlipAxis, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_VL9T, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, LODInfo, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_6SE4, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ConsoleDropLODNewTriangleCount, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_CLUE, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PhysicsAsset, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, StreamingDistanceMultiplier, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_0MZL, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MorphTargetTable, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MorphTargets, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_NET8, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, RotOffset, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, LocOffset, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ScaleMultiplier, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_MDDM, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ClothingAssets, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_VRVI, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Sockets, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_1JGY, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMesh, 0x02C8);
		}

		// Class Engine.WheeledVehicle
		TEST_METHOD(Class__Engine__WheeledVehicle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, Mesh, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, VehicleMovement, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheeledVehicle, 0x0508);
		}

		// Class Engine.ReflectionCapture
		TEST_METHOD(Class__Engine__ReflectionCapture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AReflectionCapture, CaptureComponent, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReflectionCapture, 0x0470);
		}

		// Class Engine.BoxReflectionCapture
		TEST_METHOD(Class__Engine__BoxReflectionCapture)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABoxReflectionCapture, 0x0470);
		}

		// Class Engine.PlaneReflectionCapture
		TEST_METHOD(Class__Engine__PlaneReflectionCapture)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaneReflectionCapture, 0x0470);
		}

		// Class Engine.SphereReflectionCapture
		TEST_METHOD(Class__Engine__SphereReflectionCapture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASphereReflectionCapture, DrawCaptureRadius, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASphereReflectionCapture, 0x0478);
		}

		// Class Engine.RigidBodyBase
		TEST_METHOD(Class__Engine__RigidBodyBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARigidBodyBase, 0x0468);
		}

		// Class Engine.PhysicsConstraintActor
		TEST_METHOD(Class__Engine__PhysicsConstraintActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintComp, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor1, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor2, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, UnknownData_8MD9, 0x0481);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsConstraintActor, 0x0488);
		}

		// Class Engine.PhysicsThruster
		TEST_METHOD(Class__Engine__PhysicsThruster)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsThruster, ThrusterComponent, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsThruster, 0x0470);
		}

		// Class Engine.RadialForceActor
		TEST_METHOD(Class__Engine__RadialForceActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadialForceActor, ForceComponent, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadialForceActor, 0x0470);
		}

		// Class Engine.SceneCapture
		TEST_METHOD(Class__Engine__SceneCapture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, MeshComp, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture, 0x0470);
		}

		// Class Engine.SceneCapture2D
		TEST_METHOD(Class__Engine__SceneCapture2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture2D, CaptureComponent2D, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture2D, DrawFrustum, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture2D, 0x0480);
		}

		// Class Engine.SceneCaptureCube
		TEST_METHOD(Class__Engine__SceneCaptureCube)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCaptureCube, CaptureComponentCube, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCaptureCube, DrawFrustum, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCaptureCube, 0x0480);
		}

		// Class Engine.Interface_CollisionDataProvider
		TEST_METHOD(Class__Engine__Interface_CollisionDataProvider)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_CollisionDataProvider, 0x0028);
		}

		// Class Engine.PhysicsConstraintComponent
		TEST_METHOD(Class__Engine__PhysicsConstraintComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor1, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName1, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor2, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName2, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_AZ7Z, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintSetup, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, OnConstraintBroken, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintInstance, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintComponent, 0x0380);
		}

		// Class Engine.SkeletalMeshComponent
		TEST_METHOD(Class__Engine__SkeletalMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationMode, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_J086, 0x07A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_6NY6, 0x07A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OriginalBonesOffsets, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_S551, 0x07E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, IkLegs, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, IkGroundPlaneOverrides, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, IkRootAdjustmentPoints, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, IkRootAdjustmentHeightCS, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, IkRootOffsetInterpSpeed, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, IkRootOffsetInterpSpeedUp, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, IkRootWorldOffsetInterpSpeed, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, IkRootWorldOffsetInterpSpeedUp, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, IkInterpSpeed, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, IkInterpSpeedUp, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, IkFabrikInterpSpeed, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, IkFeetAlignmentInterpSpeed, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, IkGroundPlaneInterpSpeed, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MinHitNormalZForFeetAlignment, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, FeetAlignmentLimit, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LegLimitRatioFromCylinderHeight, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_HV1O, 0x084D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, IkRootRotationOffset, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, IkRootLocationOffset, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DinoIKDelayedTraceFreezeDurationMultiplier, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DinoIKSlopeMatchingRootHeightOffset, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_ADRF, 0x0871);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DinoIKAnimationLegZOffsetingMultiplier, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TwoLegVirtualHitLocationWS, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TwoLegVirtualHitLocationWSTarget, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TwoLegVirtualHitLocationCS, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DistanceFromGroundToStartIK, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DistanceFromGroundToStartIKBias, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MaxIterations, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MatchSlopeRotationSpeed, 0x08AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootPitchRotationLimit, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootRollRotationLimit, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ForceUpdateValuesTimeLimit, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootOffset, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootRotationOffset, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_5YIN, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LastIkUpdateTime, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_94TC, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimBlueprintGeneratedClass, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimScriptInstance, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationData, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_JCSV, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedLocalAtoms, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedSpaceBases, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, GlobalAnimRateScale, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_HN65, 0x0A05);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, KinematicBonesUpdateType, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_BIQ4, 0x0A09);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_6CQ9, 0x0A0E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ComponentMassScale, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MinLinearDamping, 0x0A14);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MinAngularDamping, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_EYHL, 0x0A1D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportDistanceThreshold, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportRotationThreshold, 0x0A24);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothBlendWeight, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_BOEZ, 0x0A2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootBoneTranslation, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_CUCX, 0x0A3D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BodySetup, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_Q2MB, 0x0A4A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PreSleepingKinematicsCollisionType, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_SK04, 0x0A51);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LineCheckBoundsScale, 0x0A54);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnConstraintBroken, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_H1RB, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, SequenceToPlay, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimToPlay, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_WGBT, 0x0BD9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DefaultPosition, 0x0BDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DefaultPlayRate, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_A3OY, 0x0BE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LastTickTime, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PreventSoundCuesTime, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_3RS3, 0x0C00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshComponent, 0x0C10);
		}

		// Class Engine.MatineeAnimInterface
		TEST_METHOD(Class__Engine__MatineeAnimInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeAnimInterface, 0x0028);
		}

		// Class Engine.SkeletalMeshActor
		TEST_METHOD(Class__Engine__SkeletalMeshActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_PBZF, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_801L, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, SkeletalMeshComponent, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMesh, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedPhysAsset, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial0, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial1, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_6ZHK, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkeletalMeshActor, 0x04A8);
		}

		// Class Engine.StaticMeshActor
		TEST_METHOD(Class__Engine__StaticMeshActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, StaticMeshComponent, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, UnknownData_5G0C, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, bStaticMeshReplicateMovement, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, UnknownData_0EC6, 0x0475);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticMeshActor, 0x0478);
		}

		// Class Engine.InteractiveFoliageActor
		TEST_METHOD(Class__Engine__InteractiveFoliageActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, CapsuleComponent, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, TouchingActorEntryPosition, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageVelocity, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageForce, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliagePosition, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamageImpulseScale, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageTouchImpulseScale, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffness, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffnessQuadratic, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamping, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxDamageImpulse, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxTouchImpulse, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxForce, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, Mass, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, UnknownData_1IFR, 0x04D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractiveFoliageActor, 0x04D8);
		}

		// Class Engine.TargetPoint
		TEST_METHOD(Class__Engine__TargetPoint)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATargetPoint, 0x0468);
		}

		// Class Engine.TextRenderActor
		TEST_METHOD(Class__Engine__TextRenderActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextRenderActor, TextRender, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATextRenderActor, 0x0470);
		}

		// Class Engine.TriggerBase
		TEST_METHOD(Class__Engine__TriggerBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggerBase, CollisionComponent, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggerBase, SpriteComponent, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBase, 0x0478);
		}

		// Class Engine.TriggerBox
		TEST_METHOD(Class__Engine__TriggerBox)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBox, 0x0478);
		}

		// Class Engine.TriggerCapsule
		TEST_METHOD(Class__Engine__TriggerCapsule)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerCapsule, 0x0478);
		}

		// Class Engine.TriggerSphere
		TEST_METHOD(Class__Engine__TriggerSphere)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerSphere, 0x0478);
		}

		// Class Engine.TrueSkyActorParent
		TEST_METHOD(Class__Engine__TrueSkyActorParent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrueSkyActorParent, 0x0468);
		}

		// Class Engine.VectorFieldVolume
		TEST_METHOD(Class__Engine__VectorFieldVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AVectorFieldVolume, VectorFieldComponent, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVectorFieldVolume, 0x0470);
		}

		// Class Engine.ApplicationLifecycleComponent
		TEST_METHOD(Class__Engine__ApplicationLifecycleComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillDeactivateDelegate, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasReactivatedDelegate, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillEnterBackgroundDelegate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasEnteredForegroundDelegate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillTerminateDelegate, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApplicationLifecycleComponent, 0x0128);
		}

		// Class Engine.NavigationSystem
		TEST_METHOD(Class__Engine__NavigationSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, MainNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, UnknownData_ENEE, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, SupportedAgents, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, DirtyAreasUpdateFreq, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, UnknownData_KCSG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, NavDataSet, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, NavDataRegistrationQueue, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, UnknownData_HO8P, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, PendingNavVolumeUpdates, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, OnNavDataRegisteredEvent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, RequiredNavigationDataClassNames, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, UnknownData_COSJ, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystem, 0x02E8);
		}

		// Class Engine.NetworkPredictionInterface
		TEST_METHOD(Class__Engine__NetworkPredictionInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkPredictionInterface, 0x0028);
		}

		// Class Engine.FloatingPawnMovement
		TEST_METHOD(Class__Engine__FloatingPawnMovement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, MaxSpeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Acceleration, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Deceleration, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, MaxFrameMovement, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, UnknownData_KZG5, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingPawnMovement, 0x0158);
		}

		// Class Engine.SpectatorPawnMovement
		TEST_METHOD(Class__Engine__SpectatorPawnMovement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorPawnMovement, UnknownData_M6HU, 0x0159);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorPawnMovement, 0x0160);
		}

		// Class Engine.WheeledVehicleMovementComponent
		TEST_METHOD(Class__Engine__WheeledVehicleMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WheelSetups, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Mass, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragCoefficient, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisWidth, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisHeight, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragArea, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, EstimatedMaxEngineSpeed, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxEngineRPM, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DebugDragMagnitude, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, COMOffset, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, InertiaTensorScale, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoad, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoadFiltered, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoad, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoadFiltered, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Wheels, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_BYYL, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, CollisionChannel, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_TD4H, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ReplicatedState, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_QWUH, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawSteeringInput, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawThrottleInput, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_5OTM, 0x01E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInput, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInput, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInput, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInput, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, IdleBrakeInput, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, StopThreshold, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WrongDirectionThreshold, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInputRate, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInputRate, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInputRate, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInputRate, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_LG5T, 0x0224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent, 0x0228);
		}

		// Class Engine.WheeledVehicleMovementComponent4W
		TEST_METHOD(Class__Engine__WheeledVehicleMovementComponent4W)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, EngineSetup, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, DifferentialSetup, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, UnknownData_90VN, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, TransmissionSetup, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, SteeringCurve, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, AckermannAccuracy, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, UnknownData_IPBE, 0x0374);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent4W, 0x0378);
		}

		// Class Engine.ProjectileMovementComponent
		TEST_METHOD(Class__Engine__ProjectileMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MinLifespanToUpdate, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InitialSpeed, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSpeed, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_32PO, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, ProjectileDampingFactor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, FallingProjectileDampingFactor, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, ProjectileGravityScale, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Buoyancy, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousVelocity, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Bounciness, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Friction, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceVelocityStopSimulatingThreshold, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileBounce, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileStop, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingAccelerationMagnitude, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingTargetComponent, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingTargetComponentOffset, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationTimeStep, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationIterations, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileMovementComponent, 0x0190);
		}

		// Class Engine.RotatingMovementComponent
		TEST_METHOD(Class__Engine__RotatingMovementComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, RotationRate, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, PivotTranslation, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, UnknownData_A02W, 0x0131);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotatingMovementComponent, 0x0138);
		}

		// Class Engine.NavRelevantComponent
		TEST_METHOD(Class__Engine__NavRelevantComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_XX5R, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_91CF, 0x00FD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantComponent, 0x0100);
		}

		// Class Engine.NavLinkCustomInterface
		TEST_METHOD(Class__Engine__NavLinkCustomInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomInterface, 0x0028);
		}

		// Class Engine.NavLinkCustomComponent
		TEST_METHOD(Class__Engine__NavLinkCustomComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_M9ZU, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, NavLinkUserId, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_X3EP, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, EnabledAreaClass, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, DisabledAreaClass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeStart, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeEnd, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkDirection, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_ZO1Y, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_PZU9, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleOffset, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleExtent, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleAreaClass, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastRadius, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastInterval, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastChannel, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_VGJ4, 0x0169);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomComponent, 0x0190);
		}

		// Class Engine.NavModifierComponent
		TEST_METHOD(Class__Engine__NavModifierComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, AreaClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, UnknownData_1ZRB, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavModifierComponent, 0x0118);
		}

		// Class Engine.PawnNoiseEmitterComponent
		TEST_METHOD(Class__Engine__PawnNoiseEmitterComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoisePosition, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, NoiseLifetime, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseVolume, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseTime, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseVolume, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseTime, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnNoiseEmitterComponent, 0x00F8);
		}

		// Class Engine.PhysicsHandleComponent
		TEST_METHOD(Class__Engine__PhysicsHandleComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, GrabbedComponent, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_WFSJ, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearDamping, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearStiffness, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularDamping, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularStiffness, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_JP4L, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, InterpolationSpeed, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_T612, 0x0164);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsHandleComponent, 0x0180);
		}

		// Class Engine.AtmosphericFogComponent
		TEST_METHOD(Class__Engine__AtmosphericFogComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, FogMultiplier, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityMultiplier, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityOffset, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceScale, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, AltitudeScale, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceOffset, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, GroundOffset, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, StartDistance, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunDiscScale, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SkyInscatterScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultBrightness, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultLightColor, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_SZ8E, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, LossTextures, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, ScatterTextures, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, External_ScatterRT, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, External_LossRT, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, LUT_TintScatter, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, LUT_TintLoss, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, OvertimeIndex0, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, OvertimeIndex1, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, OvertimeInterpolation, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, PrecomputeParams, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, TransmittanceTexture, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, IrradianceTexture, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_1M1S, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtmosphericFogComponent, 0x03A0);
		}

		// Class Engine.SoundAttenuation
		TEST_METHOD(Class__Engine__SoundAttenuation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundAttenuation, Attenuation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundAttenuation, UnknownData_F64N, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundAttenuation, 0x0060);
		}

		// Class Engine.AudioComponent
		TEST_METHOD(Class__Engine__AudioComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Sound, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, InstanceParameters, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SoundClassOverride, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_GM0S, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMin, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMax, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMin, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMax, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeMultiplier, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchMultiplier, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, HighFrequencyGainMultiplier, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationSettings, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationOverrides, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_78KN, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioFinished, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_WTZY, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnQueueSubtitles, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_HJ68, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioComponent, 0x02A0);
		}

		// Class Engine.CameraComponent
		TEST_METHOD(Class__Engine__CameraComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoWidth, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, AspectRatio, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_RPLI, 0x01E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, ProjectionMode, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_FZSX, 0x01E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessBlendWeight, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessSettings, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_QJVN, 0x0549);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraComponent, 0x0550);
		}

		// Class Engine.ChildActorComponent
		TEST_METHOD(Class__Engine__ChildActorComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorClass, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActor, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, UnknownData_G66M, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildActorComponent, 0x0200);
		}

		// Class Engine.DecalComponent
		TEST_METHOD(Class__Engine__DecalComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalMaterial, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, SortOrder, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_ZLH8, 0x01E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalComponent, 0x0200);
		}

		// Class Engine.ExponentialHeightFogComponent
		TEST_METHOD(Class__Engine__ExponentialHeightFogComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, Priority, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogDensity, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogInscatteringColor, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringExponent, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringStartDistance, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringColor, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogHeightFalloff, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogMaxOpacity, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, StartDistance, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, AdditionalStartDistance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_SQEL, 0x021C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExponentialHeightFogComponent, 0x0220);
		}

		// Class Engine.LightComponentBase
		TEST_METHOD(Class__Engine__LightComponentBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightGuid, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Brightness, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Intensity, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightColor, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, ExtraIntensity, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_X8PD, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, ShadowDiscardDynamicObjectsDistance, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, ShadowTexelSizeMultiplier, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, ObjectLayerMask, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_0LRU, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, IndirectLightingIntensity, 0x020C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponentBase, 0x0210);
		}

		// Class Engine.LightComponent
		TEST_METHOD(Class__Engine__LightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowMapChannel, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_4TDP, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, SourceRadius, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MinRoughness, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowBias, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSharpen, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_FDP6, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowInjectionSourceMask, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowInjectionTargetMask, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_TZR5, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowDistanceFadeFraction, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, TranslucencyColorMultiplier, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionMaterial, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionScale, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_TDWP, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESTexture, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_YA32, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESBrightnessScale, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionFadeDistance, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, DisabledBrightness, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_74YB, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomThreshold, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomTint, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, bUseRayTracedDistanceFieldShadows, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, bUseShadowmapsWithRayTracedDFS, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_NKD4, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowmapWithDFSMaxViewDistance, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, RayStartOffsetDepthScale, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_J84L, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponent, 0x0370);
		}

		// Class Engine.DirectionalLightComponent
		TEST_METHOD(Class__Engine__DirectionalLightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionMaskDarkness, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionDepthRange, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightShaftOverrideDirection, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, WholeSceneDynamicShadowRadius, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceMovableLight, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceStationaryLight, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowCascades, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeDistributionExponent, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeTransitionFraction, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowDistanceFadeoutFraction, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_GT6B, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowCascadeCount, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowDistance, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, AmbientShadowIntensityMultiplier, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DistanceFieldShadowDistance, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceAngle, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightmassSettings, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_80PQ, 0x03C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDirectionalLightComponent, 0x03D0);
		}

		// Class Engine.PointLightComponent
		TEST_METHOD(Class__Engine__PointLightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, AttenuationRadius, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, MaxDrawDistance, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_XCON, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, LightFalloffExponent, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceRadius, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceLength, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, LightmassSettings, 0x0384);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointLightComponent, 0x0390);
		}

		// Class Engine.SpotLightComponent
		TEST_METHOD(Class__Engine__SpotLightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, InnerConeAngle, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, OuterConeAngle, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, LightShaftConeAngle, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, ShadowNearScale, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, ShadowFarScale, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, InfluenceScale, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, InfluenceRange, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, InfluenceExponent, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, MaxInjectedWholeSceneDynamicShadowRadius, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, MaxInjectedShadowDistanceFadeoutFraction, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, UnknownData_31L1, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpotLightComponent, 0x03C0);
		}

		// Class Engine.SkyLightComponent
		TEST_METHOD(Class__Engine__SkyLightComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, AtmosphericFogIntensity, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, TrueSkyBrightness, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, TrueSkyColorMultiplier, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceType, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_XZFT, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Cubemap, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SkyDistanceThreshold, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_72BQ, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bLowerHemisphereIsBlack, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_GV4U, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionMaxDistance, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Contrast, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, MinOcclusion, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, ContrastTangentMult, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, ContrastTangentShift, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionTint, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_GYM2, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyLightComponent, 0x03B0);
		}

		// Class Engine.NavigationGraphNodeComponent
		TEST_METHOD(Class__Engine__NavigationGraphNodeComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, Node, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, NextNodeComponent, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, PrevNodeComponent, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationGraphNodeComponent, 0x0200);
		}

		// Class Engine.PhysicsThrusterComponent
		TEST_METHOD(Class__Engine__PhysicsThrusterComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, ThrustStrength, 0x01DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsThrusterComponent, 0x01E0);
		}

		// Class Engine.PostProcessComponent
		TEST_METHOD(Class__Engine__PostProcessComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Settings, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Priority, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendRadius, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendWeight, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_8XYG, 0x0545);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessComponent, 0x0550);
		}

		// Class Engine.ArrowComponent
		TEST_METHOD(Class__Engine__ArrowComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowSize, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, bIsScreenSizeScaled, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_V838, 0x0671);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ScreenSize, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_ODGT, 0x0679);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrowComponent, 0x0680);
		}

		// Class Engine.BillboardComponent
		TEST_METHOD(Class__Engine__BillboardComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, Sprite, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_2835, 0x0671);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, ScreenSize, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, U, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UL, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, V, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, VL, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_8L3W, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBillboardComponent, 0x0690);
		}

		// Class Engine.BrushComponent
		TEST_METHOD(Class__Engine__BrushComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, Brush, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, BrushBodySetup, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, UnknownData_46KR, 0x0679);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, PrePivot, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, UnknownData_WLOM, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushComponent, 0x0690);
		}

		// Class Engine.DrawFrustumComponent
		TEST_METHOD(Class__Engine__DrawFrustumComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAngle, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAspectRatio, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumStartDist, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumEndDist, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_KLDC, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, Texture, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_RJPB, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawFrustumComponent, 0x0690);
		}

		// Class Engine.LandscapeComponent
		TEST_METHOD(Class__Engine__LandscapeComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseY, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ComponentSizeQuads, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SubsectionSizeQuads, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NumSubsections, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_H03E, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterial, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideHoleMaterial, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstance, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapLayerAllocations, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapTextures, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, XYOffsetmapTexture, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapScaleBias, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapSubsectionOffset, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_CHKG, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapScaleBias, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapTexture, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CachedBoxSphereBounds, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CachedLocalBox, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionComponent, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_VJ3L, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, IrrelevantLights, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_EV72, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionMipLevel, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StaticLightingResolution, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ForcedLOD, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NeighborLOD, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODBias, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NeighborLODBias, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StateId, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_FNXO, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeComponent, 0x07C0);
		}

		// Class Engine.LandscapeGizmoRenderComponent
		TEST_METHOD(Class__Engine__LandscapeGizmoRenderComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGizmoRenderComponent, 0x0670);
		}

		// Class Engine.LandscapeHeightfieldCollisionComponent
		TEST_METHOD(Class__Engine__LandscapeHeightfieldCollisionComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, ComponentLayers, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, ComponentLayerInfos, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseX, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseY, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionSizeQuads, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionScale, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionQuadFlags, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, HeightfieldGuid, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CachedBoxSphereBounds, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CachedLocalBox, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, RenderComponent, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_7ALR, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CookedPhysicalMaterials, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_ATYW, 0x07C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeHeightfieldCollisionComponent, 0x07D0);
		}

		// Class Engine.LandscapeMeshCollisionComponent
		TEST_METHOD(Class__Engine__LandscapeMeshCollisionComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, MeshGuid, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, UnknownData_XZPK, 0x07D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshCollisionComponent, 0x0830);
		}

		// Class Engine.LandscapeSplinesComponent
		TEST_METHOD(Class__Engine__LandscapeSplinesComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, ControlPoints, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, Segments, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, UnknownData_CAKE, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplinesComponent, 0x0690);
		}

		// Class Engine.LineBatchComponent
		TEST_METHOD(Class__Engine__LineBatchComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_PL6A, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineBatchComponent, 0x06A0);
		}

		// Class Engine.MaterialBillboardComponent
		TEST_METHOD(Class__Engine__MaterialBillboardComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, Elements, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, UnknownData_UX3S, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialBillboardComponent, 0x0680);
		}

		// Class Engine.DestructibleComponent
		TEST_METHOD(Class__Engine__DestructibleComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, FractureEffects, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, bEnableHardSleeping, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_G2BY, 0x07B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, LargeChunkThreshold, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_B75S, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, OnComponentFracture, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_SGJH, 0x07D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleComponent, 0x0860);
		}

		// Class Engine.PoseableMeshComponent
		TEST_METHOD(Class__Engine__PoseableMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseableMeshComponent, UnknownData_XZJ1, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseableMeshComponent, 0x0820);
		}

		// Class Engine.StaticMeshComponent
		TEST_METHOD(Class__Engine__StaticMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, PreviousLODLevel, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StaticMesh, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, bOverrideWireframeColor, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_MMJL, 0x0689);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, WireframeColorOverride, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_2TLJ, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LandscapeInfoMask, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, OverriddenLightMapRes, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DirectionalShadowDistanceLimit, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingDistanceMultiplier, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, SubDivisionStepSize, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_NWY2, 0x06A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, IrrelevantLights, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LODData, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LightmassSettings, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_U40S, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshComponent, 0x0700);
		}

		// Class Engine.ControlPointMeshComponent
		TEST_METHOD(Class__Engine__ControlPointMeshComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlPointMeshComponent, 0x0700);
		}

		// Class Engine.GroundClutterComponent
		TEST_METHOD(Class__Engine__GroundClutterComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroundClutterComponent, ClutterLayers, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroundClutterComponent, ActiveClutterLayers, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroundClutterComponent, LayerID, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroundClutterComponent, bDrawDebugInfo, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroundClutterComponent, UnknownData_NRVG, 0x0725);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroundClutterComponent, 0x0740);
		}

		// Class Engine.InstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__InstancedStaticMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMData, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstancingRandomSeed, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceStartCullDistance, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceEndCullDistance, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_T28H, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceReorderTable, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_IG6D, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, RemovedInstances, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, LargestSingleBounds, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_YLOI, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, AttachedComponentClass, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, DestroyedMesh, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, DestroyedMeshActorClass, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, OverrideWalkableFloorZ, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PlayerOverrideWalkableFloorZ, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_KH98, 0x0779);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, DestroyedSound, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_CSTR, 0x0789);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, ScaleMaxX, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, ScaleMinX, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, AttachedComponentScaleFactor, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, MaxScaleForAttachedComponent, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, MinScaleForAttachedComponent, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, MeshUnscaledBounds, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_SM42, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, DamageFXActorToSpawn, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, OverrideDestructionMaterials, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_0SJP, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, ReferencedAttachedComponentObjects, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_3O8S, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstancesVisibility, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_O36D, 0x0818);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedStaticMeshComponent, 0x0820);
		}

		// Class Engine.HierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__HierarchicalInstancedStaticMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_Z4BS, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, SortedInstances, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_SX9Z, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, NumBuiltInstances, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBounds, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, OcclusionLayerNumNodes, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_ULPL, 0x087C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalInstancedStaticMeshComponent, 0x08A0);
		}

		// Class Engine.InteractiveFoliageComponent
		TEST_METHOD(Class__Engine__InteractiveFoliageComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageComponent, UnknownData_5A31, 0x0700);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveFoliageComponent, 0x0710);
		}

		// Class Engine.SplineMeshComponent
		TEST_METHOD(Class__Engine__SplineMeshComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_37N5, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineParams, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineUpDir, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_1N42, 0x076D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, ForwardAxis, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_Z0G3, 0x0771);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, BodySetup, 0x0778);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMeshComponent, 0x0780);
		}

		// Class Engine.ModelComponent
		TEST_METHOD(Class__Engine__ModelComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_7A4W, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, ModelBodySetup, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_4CJG, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModelComponent, 0x06B0);
		}

		// Class Engine.NavLinkRenderingComponent
		TEST_METHOD(Class__Engine__NavLinkRenderingComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkRenderingComponent, 0x0670);
		}

		// Class Engine.NavMeshRenderingComponent
		TEST_METHOD(Class__Engine__NavMeshRenderingComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMeshRenderingComponent, 0x0670);
		}

		// Class Engine.NavTestRenderingComponent
		TEST_METHOD(Class__Engine__NavTestRenderingComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavTestRenderingComponent, 0x0670);
		}

		// Class Engine.NiagaraComponent
		TEST_METHOD(Class__Engine__NiagaraComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UpdateScript, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, SpawnScript, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, RenderModuleType, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_WHXR, 0x0681);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, Material, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, SpawnRate, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_XMPA, 0x0694);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponent, 0x06A0);
		}

		// Class Engine.BlendableInterface
		TEST_METHOD(Class__Engine__BlendableInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendableInterface, 0x0028);
		}

		// Class Engine.ParticleSystem
		TEST_METHOD(Class__Engine__ParticleSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SystemUpdateMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_PULJ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_FPS, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_Delta, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTime, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTickRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CustomTimeDilation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Emitters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, PreviewComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_GA5S, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CurveEdSetup, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_SHWU, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistanceCheckTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODMethod, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_0K8B, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistances, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_94DG, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_OWW5, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, FixedRelativeBoundingBox, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, OverrideMaxDrawDistance, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SecondsBeforeInactive, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_YCGF, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Delay, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, DelayLow, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_VOKD, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVPosition, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVRadius, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, OcclusionBoundsMethod, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_FSST, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CustomOcclusionBounds, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SoloTracking, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, NamedMaterialSlots, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystem, 0x0128);
		}

		// Class Engine.ShapeComponent
		TEST_METHOD(Class__Engine__ShapeComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeBodySetup, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeMaterial, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, UnknownData_KHUT, 0x0681);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShapeComponent, 0x0690);
		}

		// Class Engine.BoxComponent
		TEST_METHOD(Class__Engine__BoxComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, BoxExtent, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, UnknownData_VKRW, 0x0694);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxComponent, 0x06A0);
		}

		// Class Engine.CapsuleComponent
		TEST_METHOD(Class__Engine__CapsuleComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleRadius, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleHeight, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, UnknownData_9LEQ, 0x0694);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCapsuleComponent, 0x06A0);
		}

		// Class Engine.SphereComponent
		TEST_METHOD(Class__Engine__SphereComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereComponent, 0x0690);
		}

		// Class Engine.DrawSphereComponent
		TEST_METHOD(Class__Engine__DrawSphereComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawSphereComponent, 0x0690);
		}

		// Class Engine.TextRenderComponent
		TEST_METHOD(Class__Engine__TextRenderComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Text, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextMaterial, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Font, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizontalAlignment, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VerticalAlignment, 0x0689);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_8LSY, 0x068A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextRenderColor, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, XScale, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, YScale, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, WorldSize, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, InvDefaultSize, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizSpacingAdjust, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_OX16, 0x06A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextRenderComponent, 0x06B0);
		}

		// Class Engine.VectorFieldComponent
		TEST_METHOD(Class__Engine__VectorFieldComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, VectorField, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Intensity, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Tightness, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, UnknownData_Y5IJ, 0x0679);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldComponent, 0x0690);
		}

		// Class Engine.RadialForceComponent
		TEST_METHOD(Class__Engine__RadialForceComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ImpulseStrength, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_091X, 0x01E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ForceStrength, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, DestructibleDamage, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_XMSU, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ObjectTypesToAffect, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_3A1I, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialForceComponent, 0x0210);
		}

		// Class Engine.ReflectionCaptureComponent
		TEST_METHOD(Class__Engine__ReflectionCaptureComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureBrightness, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureParent, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, PresistentCaptureParent, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, AmbientCubemap, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, SkyColor, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, GroundColor, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, SkyIBLIntensity, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, FadeOutDistanceStart, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, FadeOutDistanceEnd, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, bUseSeperateShadowFadeOut, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_6OWV, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, ShadowFadeOutDistanceStart, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, ShadowFadeOutDistanceEnd, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Bounces, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_74BQ, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, BouncesIntensity, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, AtmosphericFogIntensity, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, TheTrueSkyBrightness, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, TrueSkyColorMultiplier, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_52BW, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, ParentBrightnessMultiplier, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, SelfAndChildBrightnessMultiplier, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_H5BH, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, AmbientShadowIntensity, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, AmbientLightInfluence, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, AmbientShadowNear, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, AmbientShadowFar, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, AmbientShadowFadeDistanceFraction, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, AmbientTranslucencyColor, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, AmbientShadowCaptureObjectLayerMask, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, AmbientShadowCaptureScale, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MaxAmbientShadowCaptureSize, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, DFAOOption, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_XRXI, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, StateId, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_35N1, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReflectionCaptureComponent, 0x03A0);
		}

		// Class Engine.BoxReflectionCaptureComponent
		TEST_METHOD(Class__Engine__BoxReflectionCaptureComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, BoxTransitionDistance, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_OFEX, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewInfluenceBox, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewCaptureBox, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_1WZC, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxReflectionCaptureComponent, 0x03C0);
		}

		// Class Engine.PlaneReflectionCaptureComponent
		TEST_METHOD(Class__Engine__PlaneReflectionCaptureComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, InfluenceRadiusScale, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_ZOHG, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewInfluenceRadius, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewCaptureBox, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_7D3S, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneReflectionCaptureComponent, 0x03C0);
		}

		// Class Engine.SphereReflectionCaptureComponent
		TEST_METHOD(Class__Engine__SphereReflectionCaptureComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, InfluenceRadius, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, UsedWithDFAOInfluenceRadiusMultiplier, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, Falloff, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, ShadowFallOff, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, PercentOfRadiusToStartFalloff, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, CaptureDistanceScale, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, PreviewInfluenceRadius, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereReflectionCaptureComponent, 0x03C0);
		}

		// Class Engine.SceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenComponents, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bCaptureEveryFrame, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_3WTF, 0x01E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, MaxViewDistanceOverride, 0x01EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent, 0x01F0);
		}

		// Class Engine.SceneCaptureComponent2D
		TEST_METHOD(Class__Engine__SceneCaptureComponent2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, FOVAngle, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_LXR9, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, TextureTarget, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, DesiredTargetSize, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CaptureSource, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_ML7S, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessSettings, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessBlendWeight, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_ARX1, 0x056C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent2D, 0x0570);
		}

		// Class Engine.SceneCaptureComponentCube
		TEST_METHOD(Class__Engine__SceneCaptureComponentCube)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTarget, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_HJI4, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponentCube, 0x0200);
		}

		// Class Engine.SplineComponent
		TEST_METHOD(Class__Engine__SplineComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineInfo, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineReparamTable, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bAllowSplineEditingPerInstance, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bShowSplineDirectionOnAllPoints, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bAlwaysDrawSplineInEditorViewport, 0x01FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_MTTB, 0x01FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineDirectionArrowSize, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineDrawColor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, ReparamStepsPerSegment, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, Duration, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bStationaryEndpoints, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_FY1U, 0x0219);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineComponent, 0x0220);
		}

		// Class Engine.SpringArmComponent
		TEST_METHOD(Class__Engine__SpringArmComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, SocketOffset, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetOffset, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeSize, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeChannel, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_UE2I, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_TQSC, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagSpeed, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraRotationLagSpeed, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_JXE2, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpringArmComponent, 0x0250);
		}

		// Class Engine.WindDirectionalSourceComponent
		TEST_METHOD(Class__Engine__WindDirectionalSourceComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Speed, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_RH79, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindDirectionalSourceComponent, 0x01F0);
		}

		// Class Engine.TimelineComponent
		TEST_METHOD(Class__Engine__TimelineComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, TheTimeline, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineComponent, 0x0170);
		}

		// Class Engine.AnimSequenceBase
		TEST_METHOD(Class__Engine__AnimSequenceBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, Notifies, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, SequenceLength, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RateScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RawCurveData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceBase, 0x0068);
		}

		// Class Engine.AnimCompositeBase
		TEST_METHOD(Class__Engine__AnimCompositeBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompositeBase, 0x0068);
		}

		// Class Engine.AnimComposite
		TEST_METHOD(Class__Engine__AnimComposite)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimComposite, AnimationTrack, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimComposite, 0x0078);
		}

		// Class Engine.AnimSequence
		TEST_METHOD(Class__Engine__AnimSequence)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, NumFrames, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_P6IH, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, TrackToSkeletonMapTable, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_LQ15, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, TranslationData, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RotationData, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, ScaleData, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, CurveData, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, TranslationCompressionFormat, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RotationCompressionFormat, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, ScaleCompressionFormat, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_IXVZ, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, CompressedTrackOffsets, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, CompressedScaleOffsets, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_2H9L, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, KeyEncodingFormat, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_36DH, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AdditiveAnimType, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseType, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_AAAN, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseSeq, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefFrameIndex, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, EncodingPkgVersion, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RetargetSource, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequence, 0x0150);
		}

		// Class Engine.AnimMontage
		TEST_METHOD(Class__Engine__AnimMontage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendInTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bClientPlayWhenNotRendered, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bForceTickPoseAndServerUpdateMesh, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bAnimPauseOnFinish, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_BVVM, 0x0073);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, CompositeSections, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SlotAnimTracks, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPoints, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionTranslation, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionRotation, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, RootMotionRootLock, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_GBTF, 0x00AB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMontage, 0x00B0);
		}

		// Class Engine.BlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpaceBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, BlendParameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, InterpolationParam, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, TargetWeightInterpolationSpeedPerSec, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, NotifyTriggerMode, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, bRotationBlendInMeshSpace, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_YG5F, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, NumOfDimension, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, AnimLength, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, PerBoneBlend, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleData, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, GridSamples, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpaceBase, 0x00F8);
		}

		// Class Engine.BlendSpace
		TEST_METHOD(Class__Engine__BlendSpace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, AxisToScaleAnimation, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, UnknownData_OAVA, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace, 0x0100);
		}

		// Class Engine.AimOffsetBlendSpace
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace, 0x0100);
		}

		// Class Engine.BlendSpace1D
		TEST_METHOD(Class__Engine__BlendSpace1D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, bScaleAnimation, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, UnknownData_5631, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace1D, 0x0100);
		}

		// Class Engine.AimOffsetBlendSpace1D
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace1D)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace1D, 0x0100);
		}

		// Class Engine.AnimCompress
		TEST_METHOD(Class__Engine__AnimCompress)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_VRPI, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, TranslationCompressionFormat, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, RotationCompressionFormat, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, ScaleCompressionFormat, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_UEVK, 0x003F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress, 0x0040);
		}

		// Class Engine.AnimCompress_Automatic
		TEST_METHOD(Class__Engine__AnimCompress_Automatic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_Automatic, MaxEndEffectorError, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_Automatic, UnknownData_MF9Z, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_Automatic, 0x0048);
		}

		// Class Engine.AnimCompress_BitwiseCompressOnly
		TEST_METHOD(Class__Engine__AnimCompress_BitwiseCompressOnly)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_BitwiseCompressOnly, 0x0040);
		}

		// Class Engine.AnimCompress_LeastDestructive
		TEST_METHOD(Class__Engine__AnimCompress_LeastDestructive)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_LeastDestructive, 0x0040);
		}

		// Class Engine.AnimCompress_RemoveEverySecondKey
		TEST_METHOD(Class__Engine__AnimCompress_RemoveEverySecondKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, MinKeys, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, UnknownData_3L6Y, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveEverySecondKey, 0x0048);
		}

		// Class Engine.AnimCompress_RemoveLinearKeys
		TEST_METHOD(Class__Engine__AnimCompress_RemoveLinearKeys)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxEffectorDiff, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MinEffectorDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, EffectorDiffSocket, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, ParentKeyScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, UnknownData_IKDY, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveLinearKeys, 0x0060);
		}

		// Class Engine.AnimCompress_PerTrackCompression
		TEST_METHOD(Class__Engine__AnimCompress_PerTrackCompression)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxZeroingThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxPosDiffBitwise, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxAngleDiffBitwise, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxScaleDiffBitwise, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedRotationFormats, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedTranslationFormats, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedScaleFormats, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_65KU, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ResampledFramerate, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MinKeysForResampling, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_2SYV, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TrackHeightBias, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisor, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisorExponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_6HR7, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, RotationErrorSourceRatio, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TranslationErrorSourceRatio, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ScaleErrorSourceRatio, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxErrorPerTrackRatio, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, PerturbationProbeSize, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_2GKH, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_PerTrackCompression, 0x00E0);
		}

		// Class Engine.AnimCompress_RemoveTrivialKeys
		TEST_METHOD(Class__Engine__AnimCompress_RemoveTrivialKeys)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, UnknownData_KWPC, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveTrivialKeys, 0x0050);
		}

		// Class Engine.AnimCompress_RevertToRaw
		TEST_METHOD(Class__Engine__AnimCompress_RevertToRaw)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RevertToRaw, 0x0040);
		}

		// Class Engine.AnimSingleNodeInstance
		TEST_METHOD(Class__Engine__AnimSingleNodeInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, CurrentAsset, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, CurrentVertexAnim, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, BlendSpaceInput, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, UnknownData_2C4W, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, BlendSampleData, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, BlendFilter, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, CurrentTime, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, PlayRate, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, PostEvaluateAnimEvent, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, UnknownData_ECYR, 0x0419);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSingleNodeInstance, 0x0420);
		}

		// Class Engine.VehicleAnimInstance
		TEST_METHOD(Class__Engine__VehicleAnimInstance)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleAnimInstance, 0x0340);
		}

		// Class Engine.AnimNotifyState_TimedParticleEffect
		TEST_METHOD(Class__Engine__AnimNotifyState_TimedParticleEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, UnknownData_NYYK, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedParticleEffect, 0x0060);
		}

		// Class Engine.AnimNotifyState_Trail
		TEST_METHOD(Class__Engine__AnimNotifyState_Trail)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, FirstSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, SecondSocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_CPL5, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleCurve, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_NBXF, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Trail, 0x0058);
		}

		// Class Engine.AnimSet
		TEST_METHOD(Class__Engine__AnimSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_LD5S, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, TrackBoneNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, LinkupCache, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BoneUseAnimTranslation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceUseMeshTranslation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UseTranslationBoneNames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceMeshTranslationBoneNames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, PreviewSkelMeshName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BestRatioSkelMeshName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_8XCS, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSet, 0x00F0);
		}

		// Class Engine.AnimStateMachineTypes
		TEST_METHOD(Class__Engine__AnimStateMachineTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStateMachineTypes, 0x0028);
		}

		// Class Engine.AssetImportData
		TEST_METHOD(Class__Engine__AssetImportData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetImportData, SourceFilePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetImportData, SourceFileTimestamp, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetImportData, UnknownData_E1I6, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetImportData, 0x0050);
		}

		// Class Engine.AssetUserData
		TEST_METHOD(Class__Engine__AssetUserData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetUserData, 0x0028);
		}

		// Class Engine.AudioSettings
		TEST_METHOD(Class__Engine__AudioSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundClassName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultBaseSoundMix, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSoundClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, LowPassFilterResonance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaximumConcurrentStreams, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSettings, 0x0060);
		}

		// Class Engine.AutomationTestSettings
		TEST_METHOD(Class__Engine__AutomationTestSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AutoRunConsoleCommands, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AutoRunMapFilterWhitelist, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AutomationTestmap, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorPerformanceTestMaps, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BuildPromotionTest, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EngineTestModules, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorTestModules, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, TestLevelFolders, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, TestAssetsToOpen, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ExternalTools, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ImportExportTestDefinitions, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationTestSettings, 0x02D8);
		}

		// Class Engine.AvoidanceManager
		TEST_METHOD(Class__Engine__AvoidanceManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_G6QA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DefaultTimeToLive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterAvoid, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterClean, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DeltaTimeToPredict, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, ArtificialRadiusExpansion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, TestRadius2D, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, TestHeightDifference, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_MWS6, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvoidanceManager, 0x00C8);
		}

		// Class Engine.BadObject
		TEST_METHOD(Class__Engine__BadObject)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBadObject, 0x0028);
		}

		// Class Engine.BlueprintCore
		TEST_METHOD(Class__Engine__BlueprintCore)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, SkeletonGeneratedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, GeneratedClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyNeedToPurgeSkelRefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyGeneratedClassIsAuthoritative, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_QTJM, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, BlueprintGuid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_CQQP, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintCore, 0x0050);
		}

		// Class Engine.EdGraphNode
		TEST_METHOD(Class__Engine__EdGraphNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, Pins, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosX, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosY, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeWidth, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeHeight, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_5QU1, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeComment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_XOMD, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorMsg, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeGuid, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, AdvancedPinDisplay, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_MUOX, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode, 0x0090);
		}

		// Class Engine.EdGraphPin
		TEST_METHOD(Class__Engine__EdGraphPin)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin, PinName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin, PinFriendlyName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin, UnknownData_00FC, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin, PinToolTip, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin, Direction, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin, UnknownData_CA8S, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin, PinType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin, DefaultValue, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin, AutogeneratedDefaultValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin, DefaultObject, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin, DefaultTextValue, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin, UnknownData_426K, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin, LinkedTo, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin, SubPins, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin, ParentPin, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphPin, 0x0140);
		}

		// Class Engine.Blueprint
		TEST_METHOD(Class__Engine__Blueprint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_0FYB, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ParentClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, PRIVATE_InnermostPreviousCDO, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_OY2S, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, SimpleConstructionScript, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentTemplates, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, Timelines, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_Q9PC, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintSystemVersion, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_OC2Z, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprint, 0x00C0);
		}

		// Class Engine.AnimBlueprint
		TEST_METHOD(Class__Engine__AnimBlueprint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, TargetSkeleton, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, Groups, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprint, 0x00D8);
		}

		// Class Engine.LevelScriptBlueprint
		TEST_METHOD(Class__Engine__LevelScriptBlueprint)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelScriptBlueprint, 0x00C0);
		}

		// Class Engine.DataTable
		TEST_METHOD(Class__Engine__DataTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, RowStruct, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, ImportPath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_4E0U, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTable, 0x0090);
		}

		// Class Engine.DataTableFunctionLibrary
		TEST_METHOD(Class__Engine__DataTableFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTableFunctionLibrary, 0x0028);
		}

		// Class Engine.DebugDrawService
		TEST_METHOD(Class__Engine__DebugDrawService)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugDrawService, 0x0028);
		}

		// Class Engine.DialogueTypes
		TEST_METHOD(Class__Engine__DialogueTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueTypes, 0x0028);
		}

		// Class Engine.GameplayStatics
		TEST_METHOD(Class__Engine__GameplayStatics)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayStatics, 0x0028);
		}

		// Class Engine.HeadMountedDisplayFunctionLibrary
		TEST_METHOD(Class__Engine__HeadMountedDisplayFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadMountedDisplayFunctionLibrary, 0x0028);
		}

		// Class Engine.KismetArrayLibrary
		TEST_METHOD(Class__Engine__KismetArrayLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetArrayLibrary, 0x0028);
		}

		// Class Engine.KismetInputLibrary
		TEST_METHOD(Class__Engine__KismetInputLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInputLibrary, 0x0028);
		}

		// Class Engine.KismetMaterialLibrary
		TEST_METHOD(Class__Engine__KismetMaterialLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMaterialLibrary, 0x0028);
		}

		// Class Engine.KismetMathLibrary
		TEST_METHOD(Class__Engine__KismetMathLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMathLibrary, 0x0028);
		}

		// Class Engine.KismetNodeHelperLibrary
		TEST_METHOD(Class__Engine__KismetNodeHelperLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetNodeHelperLibrary, 0x0028);
		}

		// Class Engine.Texture
		TEST_METHOD(Class__Engine__Texture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, BulkDataFilePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, NumCinematicMipLevels, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_KUJH, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CachedCombinedLODBias, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CachedStreamingLODBias, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_5ZSP, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CompressionSettings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Filter, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODGroup, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_WU0U, 0x0053);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture, 0x00B0);
		}

		// Class Engine.TextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, TargetGamma, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, UnknownData_HENT, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget, 0x00B8);
		}

		// Class Engine.TextureRenderTarget2D
		TEST_METHOD(Class__Engine__TextureRenderTarget2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeX, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeY, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, ClearColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressX, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressY, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_H2ER, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_8PI2, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, RenderTargetFormat, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, OverrideFormat, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_N204, 0x00DB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2D, 0x00F8);
		}

		// Class Engine.KismetRenderingLibrary
		TEST_METHOD(Class__Engine__KismetRenderingLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetRenderingLibrary, 0x0028);
		}

		// Class Engine.KismetStringLibrary
		TEST_METHOD(Class__Engine__KismetStringLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringLibrary, 0x0028);
		}

		// Class Engine.KismetSystemLibrary
		TEST_METHOD(Class__Engine__KismetSystemLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetSystemLibrary, 0x0028);
		}

		// Class Engine.KismetTextLibrary
		TEST_METHOD(Class__Engine__KismetTextLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetTextLibrary, 0x0028);
		}

		// Class Engine.AnimBlueprintGeneratedClass
		TEST_METHOD(Class__Engine__AnimBlueprintGeneratedClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, BakedStateMachines, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, TargetSkeleton, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, AnimNotifies, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, RootAnimNodeIndex, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_MLI4, 0x0204);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprintGeneratedClass, 0x0220);
		}

		// Class Engine.BodySetup
		TEST_METHOD(Class__Engine__BodySetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, AggGeom, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BoneName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysicsType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_YNB3, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_0DLG, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysMaterial, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionReponse, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionTraceFlag, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_VRID, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, DefaultInstance, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, WalkableSlopeOverride, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_IR4I, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BuildScale, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BuildScale3D, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_PCL6, 0x020C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetup, 0x0288);
		}

		// Class Engine.BodySetup2D
		TEST_METHOD(Class__Engine__BodySetup2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup2D, AggGeom2D, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetup2D, 0x02B8);
		}

		// Class Engine.BoneMaskFilter
		TEST_METHOD(Class__Engine__BoneMaskFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneMaskFilter, BlendPoses, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneMaskFilter, 0x0038);
		}

		// Class Engine.BookMark
		TEST_METHOD(Class__Engine__BookMark)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, HiddenLevels, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark, 0x0050);
		}

		// Class Engine.BookMark2D
		TEST_METHOD(Class__Engine__BookMark2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Zoom2D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Location, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, UnknownData_P9R0, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark2D, 0x0038);
		}

		// Class Engine.Breakpoint
		TEST_METHOD(Class__Engine__Breakpoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_QJAU, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, Node, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_90RT, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakpoint, 0x0040);
		}

		// Class Engine.BrushBuilder
		TEST_METHOD(Class__Engine__BrushBuilder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, BitmapFilename, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, ToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_WEIY, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Vertices, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Polys, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Layer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_61MG, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBuilder, 0x0080);
		}

		// Class Engine.ButtonStyleAsset
		TEST_METHOD(Class__Engine__ButtonStyleAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonStyleAsset, ButtonStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonStyleAsset, 0x0270);
		}

		// Class Engine.CameraAnim
		TEST_METHOD(Class__Engine__CameraAnim)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, CameraInterpGroup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, AnimLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BoundingBox, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BaseFOV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_GD31, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessBlendWeight, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_VODL, 0x03B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnim, 0x03B8);
		}

		// Class Engine.CameraAnimInst
		TEST_METHOD(Class__Engine__CameraAnimInst)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, CamAnim, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, InterpGroupInst, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_EGW2, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlayRate, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_YBER, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveTrack, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveInst, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlaySpace, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_FFRZ, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimInst, 0x0110);
		}

		// Class Engine.CameraModifier_CameraShake
		TEST_METHOD(Class__Engine__CameraModifier_CameraShake)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ActiveShakes, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, SplitScreenShakeScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, UnknownData_CVDX, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier_CameraShake, 0x0070);
		}

		// Class Engine.CameraShake
		TEST_METHOD(Class__Engine__CameraShake)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_3NAB, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationDuration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendInTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendOutTime, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RotOscillation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, LocOscillation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, FOVOscillation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_JJFB, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, Anim, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimPlayRate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendInTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendOutTime, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_ASL6, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RandomAnimSegmentDuration, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShake, 0x00B0);
		}

		// Class Engine.Canvas
		TEST_METHOD(Class__Engine__Canvas)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_C3MN, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_MQJL, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ColorModulate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DefaultTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, GradientTexture0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ReporterGraph, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_5TAO, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvas, 0x0100);
		}

		// Class Engine.Channel
		TEST_METHOD(Class__Engine__Channel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, Connection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, UnknownData_KHNP, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChannel, 0x0080);
		}

		// Class Engine.ActorChannel
		TEST_METHOD(Class__Engine__ActorChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, Actor, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, ActorClass, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_CKIO, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorChannel, 0x0250);
		}

		// Class Engine.BattlEyeChannel
		TEST_METHOD(Class__Engine__BattlEyeChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBattlEyeChannel, UnknownData_Y81V, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBattlEyeChannel, 0x0098);
		}

		// Class Engine.ClassInfoChannel
		TEST_METHOD(Class__Engine__ClassInfoChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassInfoChannel, UnknownData_M43Q, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassInfoChannel, 0x0100);
		}

		// Class Engine.ControlChannel
		TEST_METHOD(Class__Engine__ControlChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlChannel, UnknownData_ISQT, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlChannel, 0x0098);
		}

		// Class Engine.VoiceChannel
		TEST_METHOD(Class__Engine__VoiceChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChannel, UnknownData_C3BE, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChannel, 0x0090);
		}

		// Class Engine.CheckBoxStyleAsset
		TEST_METHOD(Class__Engine__CheckBoxStyleAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxStyleAsset, CheckBoxStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxStyleAsset, 0x0530);
		}

		// Class Engine.ClipPadEntry
		TEST_METHOD(Class__Engine__ClipPadEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClipPadEntry, Title, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClipPadEntry, Text, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClipPadEntry, 0x0048);
		}

		// Class Engine.CollisionProfile
		TEST_METHOD(Class__Engine__CollisionProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, Profiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, DefaultChannelResponses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, EditProfiles, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, ProfileRedirects, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, CollisionChannelRedirects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, UnknownData_HWB4, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionProfile, 0x0148);
		}

		// Class Engine.Commandlet
		TEST_METHOD(Class__Engine__Commandlet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpWebLink, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamDescriptions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, UnknownData_2T1B, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandlet, 0x0080);
		}

		// Class Engine.SmokeTestCommandlet
		TEST_METHOD(Class__Engine__SmokeTestCommandlet)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmokeTestCommandlet, 0x0080);
		}

		// Class Engine.Console
		TEST_METHOD(Class__Engine__Console)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_K544, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, ConsoleTargetPlayer, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_Black, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_White, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_2BLE, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, HistoryBuffer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_YG9N, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsole, 0x00F0);
		}

		// Class Engine.CurveLinearColor
		TEST_METHOD(Class__Engine__CurveLinearColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, FloatCurves, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColor, 0x01E0);
		}

		// Class Engine.CurveVector
		TEST_METHOD(Class__Engine__CurveVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveVector, VectorKeys, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveVector, FloatCurves, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveVector, 0x0188);
		}

		// Class Engine.CurveEdPresetCurve
		TEST_METHOD(Class__Engine__CurveEdPresetCurve)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveEdPresetCurve, 0x0028);
		}

		// Class Engine.CurveTable
		TEST_METHOD(Class__Engine__CurveTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveTable, ImportPath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveTable, UnknownData_9VP7, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveTable, 0x0088);
		}

		// Class Engine.TireType
		TEST_METHOD(Class__Engine__TireType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, FrictionScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, UnknownData_R8RA, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireType, 0x0030);
		}

		// Class Engine.DestructibleFractureSettings
		TEST_METHOD(Class__Engine__DestructibleFractureSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, CellSiteCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, FractureMaterialDesc, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, RandomSeed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_51AJ, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, VoronoiSites, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, OriginalSubmeshCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_PBNI, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, Materials, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, ChunkParameters, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_JJCU, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleFractureSettings, 0x00B8);
		}

		// Class Engine.DeviceProfile
		TEST_METHOD(Class__Engine__DeviceProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, DeviceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, BaseProfileName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, Parent, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_ZP72, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, CVars, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_71OC, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfile, 0x0070);
		}

		// Class Engine.DeviceProfileManager
		TEST_METHOD(Class__Engine__DeviceProfileManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, Profiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, UnknownData_EAIO, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileManager, 0x0068);
		}

		// Class Engine.DialogueVoice
		TEST_METHOD(Class__Engine__DialogueVoice)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Gender, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Plurality, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_SO3N, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, LocalizationGUID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_MOFC, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueVoice, 0x0040);
		}

		// Class Engine.DialogueWave
		TEST_METHOD(Class__Engine__DialogueWave)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, UnknownData_GYAK, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SpokenText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, ContextMappings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, LocalizationGUID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueWave, 0x0060);
		}

		// Class Engine.Distribution
		TEST_METHOD(Class__Engine__Distribution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistribution, UnknownData_UDWH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistribution, 0x0030);
		}

		// Class Engine.DistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloat, UnknownData_7U7D, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloat, 0x0038);
		}

		// Class Engine.DistributionFloatConstant
		TEST_METHOD(Class__Engine__DistributionFloatConstant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, UnknownData_BJBJ, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstant, 0x0040);
		}

		// Class Engine.DistributionFloatParameterBase
		TEST_METHOD(Class__Engine__DistributionFloatParameterBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxInput, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinOutput, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParamMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, UnknownData_GBQV, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParameterBase, 0x0060);
		}

		// Class Engine.DistributionFloatParticleParameter
		TEST_METHOD(Class__Engine__DistributionFloatParticleParameter)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParticleParameter, 0x0060);
		}

		// Class Engine.DistributionFloatSoundParameter
		TEST_METHOD(Class__Engine__DistributionFloatSoundParameter)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatSoundParameter, 0x0060);
		}

		// Class Engine.DistributionFloatConstantCurve
		TEST_METHOD(Class__Engine__DistributionFloatConstantCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstantCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstantCurve, 0x0048);
		}

		// Class Engine.DistributionFloatUniform
		TEST_METHOD(Class__Engine__DistributionFloatUniform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniform, 0x0040);
		}

		// Class Engine.DistributionFloatUniformCurve
		TEST_METHOD(Class__Engine__DistributionFloatUniformCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniformCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniformCurve, 0x0048);
		}

		// Class Engine.DistributionVector
		TEST_METHOD(Class__Engine__DistributionVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVector, UnknownData_4SSF, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVector, 0x0038);
		}

		// Class Engine.DistributionVectorConstant
		TEST_METHOD(Class__Engine__DistributionVectorConstant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_S1P7, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, LockedAxes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_QBK1, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstant, 0x0050);
		}

		// Class Engine.DistributionVectorParameterBase
		TEST_METHOD(Class__Engine__DistributionVectorParameterBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxInput, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinOutput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxOutput, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParamModes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, UnknownData_MQYL, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParameterBase, 0x0090);
		}

		// Class Engine.DistributionVectorParticleParameter
		TEST_METHOD(Class__Engine__DistributionVectorParticleParameter)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParticleParameter, 0x0090);
		}

		// Class Engine.DistributionVectorConstantCurve
		TEST_METHOD(Class__Engine__DistributionVectorConstantCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_BSA1, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, LockedAxes, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_S7SS, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstantCurve, 0x0050);
		}

		// Class Engine.DistributionVectorUniform
		TEST_METHOD(Class__Engine__DistributionVectorUniform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Max, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Min, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_6QMZ, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, MirrorFlags, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_ZH41, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniform, 0x0060);
		}

		// Class Engine.DistributionVectorUniformCurve
		TEST_METHOD(Class__Engine__DistributionVectorUniformCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_PNAQ, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, LockedAxes, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, MirrorFlags, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_XXGA, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_Z2B5, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniformCurve, 0x0058);
		}

		// Class Engine.DynamicBlueprintBinding
		TEST_METHOD(Class__Engine__DynamicBlueprintBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicBlueprintBinding, 0x0028);
		}

		// Class Engine.ComponentDelegateBinding
		TEST_METHOD(Class__Engine__ComponentDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UComponentDelegateBinding, ComponentDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComponentDelegateBinding, 0x0038);
		}

		// Class Engine.InputDelegateBinding
		TEST_METHOD(Class__Engine__InputDelegateBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputDelegateBinding, 0x0028);
		}

		// Class Engine.InputActionDelegateBinding
		TEST_METHOD(Class__Engine__InputActionDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputActionDelegateBinding, InputActionDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputActionDelegateBinding, 0x0038);
		}

		// Class Engine.InputAxisDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisDelegateBinding, InputAxisDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisDelegateBinding, 0x0038);
		}

		// Class Engine.InputAxisKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisKeyDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisKeyDelegateBinding, InputAxisKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisKeyDelegateBinding, 0x0038);
		}

		// Class Engine.InputVectorAxisDelegateBinding
		TEST_METHOD(Class__Engine__InputVectorAxisDelegateBinding)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputVectorAxisDelegateBinding, 0x0038);
		}

		// Class Engine.InputKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputKeyDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDelegateBinding, InputKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeyDelegateBinding, 0x0038);
		}

		// Class Engine.InputTouchDelegateBinding
		TEST_METHOD(Class__Engine__InputTouchDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputTouchDelegateBinding, InputTouchDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputTouchDelegateBinding, 0x0038);
		}

		// Class Engine.DynamicCaptureData
		TEST_METHOD(Class__Engine__DynamicCaptureData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicCaptureData, ReflectionCapturesData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicCaptureData, SkyLightsData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicCaptureData, 0x0048);
		}

		// Class Engine.EdGraph
		TEST_METHOD(Class__Engine__EdGraph)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Schema, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Nodes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, UnknownData_96K2, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraph, 0x0068);
		}

		// Class Engine.EdGraphNode_Comment
		TEST_METHOD(Class__Engine__EdGraphNode_Comment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Comment, CommentColor, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Comment, UnknownData_SLYA, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Comment, MoveMode, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Comment, UnknownData_TM4B, 0x00A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode_Comment, 0x00A8);
		}

		// Class Engine.EdGraphNode_Documentation
		TEST_METHOD(Class__Engine__EdGraphNode_Documentation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Link, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Excerpt, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode_Documentation, 0x00B0);
		}

		// Class Engine.EdGraphSchema
		TEST_METHOD(Class__Engine__EdGraphSchema)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphSchema, 0x0028);
		}

		// Class Engine.Exporter
		TEST_METHOD(Class__Engine__Exporter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, SupportedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportRootScope, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatExtension, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatDescription, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, PreferredFormatIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, TextIndent, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_FAP3, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExporter, 0x0068);
		}

		// Class Engine.FoliageAttachedComponentInterface
		TEST_METHOD(Class__Engine__FoliageAttachedComponentInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageAttachedComponentInterface, 0x0028);
		}

		// Class Engine.FoliageType
		TEST_METHOD(Class__Engine__FoliageType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Density, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Radius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleMinX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleMinY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleMinZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleMaxX, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleMaxY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleMaxZ, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_APEX, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AlignMaxAngle, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RandomPitchAngle, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, GroundSlope, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, HeightMin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, HeightMax, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayer, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_I4P7, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ZOffsetMin, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ZOffsetMax, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_BXYU, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionScale, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MeshBounds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LowBoundOriginRadius, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMask, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_AU11, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskThreshold, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_9TI5, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DamageFXActorToSpawn, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AttachedComponentScaleFactor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinScaleForAttachedComponent, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxScaleForAttachedComponent, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInstancesPerCluster, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxClusterRadius, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_E7TI, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AttachedComponentClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DestroyedMesh, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DestroyedMeshActorClass, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverrideWalkableFloorZ, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, PlayerOverrideWalkableFloorZ, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_LZSQ, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverrideDestructionMaterials, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ReapplyDensityAmount, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_VP3G, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, StartCullDistance, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, EndCullDistance, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LowEnd_StartCullDistance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LowEnd_EndCullDistance, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DisplayOrder, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_74OM, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ObjectLayer, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_WJ6Y, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, BodyInstance, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType, 0x0298);
		}

		// Class Engine.FoliageType_InstancedStaticMesh
		TEST_METHOD(Class__Engine__FoliageType_InstancedStaticMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, Mesh, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_InstancedStaticMesh, 0x02A0);
		}

		// Class Engine.FontImportOptions
		TEST_METHOD(Class__Engine__FontImportOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontImportOptions, Data, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontImportOptions, 0x00D8);
		}

		// Class Engine.Font
		TEST_METHOD(Class__Engine__Font)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_NN04, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, FontCacheType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_5O21, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Characters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Textures, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_4F2D, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_43LG, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, IsRemapped, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, EmScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Ascent, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Descent, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Leading, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, DistanceFieldScreenSpaceScalar, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Kerning, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ImportOptions, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, NumCharacters, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_W57A, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, MaxCharHeight, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ScalingFactor, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_KEAN, 0x0154);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFont, 0x01A8);
		}

		// Class Engine.PlayerInput
		TEST_METHOD(Class__Engine__PlayerInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_JC88, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, DebugExecBindings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_1DPL, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, InvertedAxis, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_W2KP, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInput, 0x0338);
		}

		// Class Engine.InputSettings
		TEST_METHOD(Class__Engine__InputSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisConfig, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_QU29, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, FOVScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DoubleClickTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_WNC7, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ActionMappings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisMappings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bAlwaysShowTouchInterface, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bShowConsoleOnFourFingerTap, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_GTDV, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultTouchInterface, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKey, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKeys, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputSettings, 0x00A8);
		}

		// Class Engine.InterpCurveEdSetup
		TEST_METHOD(Class__Engine__InterpCurveEdSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, Tabs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, ActiveTab, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, UnknownData_N2WG, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpCurveEdSetup, 0x0040);
		}

		// Class Engine.InterpData
		TEST_METHOD(Class__Engine__InterpData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, PathBuildTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpGroups, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CurveEdSetup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, UnknownData_0MBV, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, BakeAndPruneStatus, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CachedDirectorGroup, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, AllEventNames, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpData, 0x0080);
		}

		// Class Engine.InterpFilter
		TEST_METHOD(Class__Engine__InterpFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpFilter, caption, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter, 0x0038);
		}

		// Class Engine.InterpFilter_Classes
		TEST_METHOD(Class__Engine__InterpFilter_Classes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Classes, 0x0038);
		}

		// Class Engine.InterpFilter_Custom
		TEST_METHOD(Class__Engine__InterpFilter_Custom)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Custom, 0x0038);
		}

		// Class Engine.InterpGroup
		TEST_METHOD(Class__Engine__InterpGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_RZ6N, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, InterpTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_DHZH, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroup, 0x0050);
		}

		// Class Engine.InterpGroupCamera
		TEST_METHOD(Class__Engine__InterpGroupCamera)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CameraAnimInst, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CompressTolerance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, UnknownData_LQ2X, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupCamera, 0x0060);
		}

		// Class Engine.InterpGroupDirector
		TEST_METHOD(Class__Engine__InterpGroupDirector)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupDirector, 0x0050);
		}

		// Class Engine.InterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInst)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, GroupActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, TrackInst, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInst, 0x0048);
		}

		// Class Engine.InterpGroupInstCamera
		TEST_METHOD(Class__Engine__InterpGroupInstCamera)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstCamera, 0x0048);
		}

		// Class Engine.InterpGroupInstDirector
		TEST_METHOD(Class__Engine__InterpGroupInstDirector)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstDirector, 0x0048);
		}

		// Class Engine.InterpTrack
		TEST_METHOD(Class__Engine__InterpTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_GIMK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, SubTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackInstClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, ActiveCondition, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_UG98, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackTitle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_C43H, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackIcon, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_UV9X, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrack, 0x0080);
		}

		// Class Engine.InterpTrackBoolProp
		TEST_METHOD(Class__Engine__InterpTrackBoolProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, BoolTrack, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackBoolProp, 0x0098);
		}

		// Class Engine.InterpTrackDirector
		TEST_METHOD(Class__Engine__InterpTrackDirector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, CutTrack, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, UnknownData_FVTX, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackDirector, 0x0098);
		}

		// Class Engine.InterpTrackEvent
		TEST_METHOD(Class__Engine__InterpTrackEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, EventTrack, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, UnknownData_WVGL, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackEvent, 0x0098);
		}

		// Class Engine.InterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, FloatTrack, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, CurveTension, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, UnknownData_Q3YX, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatBase, 0x0098);
		}

		// Class Engine.InterpTrackAnimControl
		TEST_METHOD(Class__Engine__InterpTrackAnimControl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, SlotName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, AnimSeqs, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, UnknownData_OM81, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAnimControl, 0x00B8);
		}

		// Class Engine.InterpTrackFade
		TEST_METHOD(Class__Engine__InterpTrackFade)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_IZAR, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFade, 0x00A0);
		}

		// Class Engine.InterpTrackFloatMaterialParam
		TEST_METHOD(Class__Engine__InterpTrackFloatMaterialParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, TargetMaterials, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, ParamName, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatMaterialParam, 0x00B0);
		}

		// Class Engine.InterpTrackFloatParticleParam
		TEST_METHOD(Class__Engine__InterpTrackFloatParticleParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatParticleParam, ParamName, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatParticleParam, 0x00A0);
		}

		// Class Engine.InterpTrackFloatProp
		TEST_METHOD(Class__Engine__InterpTrackFloatProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, PropertyName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, InterpMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, UnknownData_JHVA, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatProp, 0x00A8);
		}

		// Class Engine.InterpTrackMove
		TEST_METHOD(Class__Engine__InterpTrackMove)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, PosTrack, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, EulerTrack, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookupTrack, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookAtGroupName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LinCurveTension, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, AngCurveTension, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_5O0S, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, RotMode, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_HPI3, 0x00C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMove, 0x00C8);
		}

		// Class Engine.InterpTrackMoveAxis
		TEST_METHOD(Class__Engine__InterpTrackMoveAxis)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, MoveAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, UnknownData_8ILR, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, LookupTrack, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMoveAxis, 0x00B0);
		}

		// Class Engine.InterpTrackSlomo
		TEST_METHOD(Class__Engine__InterpTrackSlomo)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSlomo, 0x0098);
		}

		// Class Engine.InterpTrackLinearColorBase
		TEST_METHOD(Class__Engine__InterpTrackLinearColorBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, LinearColorTrack, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, CurveTension, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, UnknownData_0ZAS, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorBase, 0x0098);
		}

		// Class Engine.InterpTrackLinearColorProp
		TEST_METHOD(Class__Engine__InterpTrackLinearColorProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, PropertyName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, InterpMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, UnknownData_QDKN, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorProp, 0x00A8);
		}

		// Class Engine.InterpTrackParticleReplay
		TEST_METHOD(Class__Engine__InterpTrackParticleReplay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackParticleReplay, TrackKeys, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackParticleReplay, 0x0090);
		}

		// Class Engine.InterpTrackToggle
		TEST_METHOD(Class__Engine__InterpTrackToggle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, ToggleTrack, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, UnknownData_0QUB, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackToggle, 0x0098);
		}

		// Class Engine.InterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, VectorTrack, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, CurveTension, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, UnknownData_ETNL, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorBase, 0x0098);
		}

		// Class Engine.InterpTrackAudioMaster
		TEST_METHOD(Class__Engine__InterpTrackAudioMaster)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAudioMaster, 0x0098);
		}

		// Class Engine.InterpTrackColorProp
		TEST_METHOD(Class__Engine__InterpTrackColorProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackColorProp, PropertyName, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorProp, 0x00A0);
		}

		// Class Engine.InterpTrackColorScale
		TEST_METHOD(Class__Engine__InterpTrackColorScale)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorScale, 0x0098);
		}

		// Class Engine.InterpTrackSound
		TEST_METHOD(Class__Engine__InterpTrackSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, Sounds, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, UnknownData_U4M1, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSound, 0x00B0);
		}

		// Class Engine.InterpTrackVectorMaterialParam
		TEST_METHOD(Class__Engine__InterpTrackVectorMaterialParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, TargetMaterials, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, ParamName, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorMaterialParam, 0x00B0);
		}

		// Class Engine.InterpTrackVectorProp
		TEST_METHOD(Class__Engine__InterpTrackVectorProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, PropertyName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, InterpMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, UnknownData_R98T, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorProp, 0x00A8);
		}

		// Class Engine.InterpTrackVisibility
		TEST_METHOD(Class__Engine__InterpTrackVisibility)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, VisibilityTrack, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, UnknownData_02R8, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVisibility, 0x0098);
		}

		// Class Engine.InterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInst)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInst, 0x0028);
		}

		// Class Engine.InterpTrackInstAnimControl
		TEST_METHOD(Class__Engine__InterpTrackInstAnimControl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, UnknownData_2YSU, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAnimControl, 0x0030);
		}

		// Class Engine.InterpTrackInstAudioMaster
		TEST_METHOD(Class__Engine__InterpTrackInstAudioMaster)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAudioMaster, 0x0028);
		}

		// Class Engine.InterpTrackInstColorScale
		TEST_METHOD(Class__Engine__InterpTrackInstColorScale)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorScale, 0x0028);
		}

		// Class Engine.InterpTrackInstDirector
		TEST_METHOD(Class__Engine__InterpTrackInstDirector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstDirector, OldViewTarget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstDirector, 0x0030);
		}

		// Class Engine.InterpTrackInstEvent
		TEST_METHOD(Class__Engine__InterpTrackInstEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, UnknownData_VPDK, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstEvent, 0x0030);
		}

		// Class Engine.InterpTrackInstFade
		TEST_METHOD(Class__Engine__InterpTrackInstFade)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFade, 0x0028);
		}

		// Class Engine.InterpTrackInstFloatMaterialParam
		TEST_METHOD(Class__Engine__InterpTrackInstFloatMaterialParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, ResetFloats, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatMaterialParam, 0x0060);
		}

		// Class Engine.InterpTrackInstFloatParticleParam
		TEST_METHOD(Class__Engine__InterpTrackInstFloatParticleParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, ResetFloat, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, UnknownData_V3U5, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatParticleParam, 0x0030);
		}

		// Class Engine.InterpTrackInstMove
		TEST_METHOD(Class__Engine__InterpTrackInstMove)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetLocation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetRotation, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstMove, 0x0040);
		}

		// Class Engine.InterpTrackInstParticleReplay
		TEST_METHOD(Class__Engine__InterpTrackInstParticleReplay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, UnknownData_ZTBS, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstParticleReplay, 0x0030);
		}

		// Class Engine.InterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, InterpProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, PropertyOuterObjectInst, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstProperty, 0x0038);
		}

		// Class Engine.InterpTrackInstBoolProp
		TEST_METHOD(Class__Engine__InterpTrackInstBoolProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_P4FJ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, BoolProperty, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, ResetBool, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_VEXD, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstBoolProp, 0x0050);
		}

		// Class Engine.InterpTrackInstColorProp
		TEST_METHOD(Class__Engine__InterpTrackInstColorProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_BVC9, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, ResetColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_SHM0, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorProp, 0x0048);
		}

		// Class Engine.InterpTrackInstFloatProp
		TEST_METHOD(Class__Engine__InterpTrackInstFloatProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_CWBL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, ResetFloat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_CZRN, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatProp, 0x0048);
		}

		// Class Engine.InterpTrackInstLinearColorProp
		TEST_METHOD(Class__Engine__InterpTrackInstLinearColorProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, UnknownData_M0T2, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, ResetColor, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstLinearColorProp, 0x0050);
		}

		// Class Engine.InterpTrackInstVectorProp
		TEST_METHOD(Class__Engine__InterpTrackInstVectorProp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_Z6Z8, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, ResetVector, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_NS9Q, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorProp, 0x0050);
		}

		// Class Engine.InterpTrackInstSlomo
		TEST_METHOD(Class__Engine__InterpTrackInstSlomo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, OldTimeDilation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, UnknownData_JSC1, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSlomo, 0x0030);
		}

		// Class Engine.InterpTrackInstSound
		TEST_METHOD(Class__Engine__InterpTrackInstSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, UnknownData_4GHL, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, PlayAudioComp, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSound, 0x0038);
		}

		// Class Engine.InterpTrackInstToggle
		TEST_METHOD(Class__Engine__InterpTrackInstToggle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_0TIT, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, LastUpdatePosition, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_S5X3, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstToggle, 0x0038);
		}

		// Class Engine.InterpTrackInstVectorMaterialParam
		TEST_METHOD(Class__Engine__InterpTrackInstVectorMaterialParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, ResetVectors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorMaterialParam, 0x0060);
		}

		// Class Engine.InterpTrackInstVisibility
		TEST_METHOD(Class__Engine__InterpTrackInstVisibility)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, UnknownData_Y2IW, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, LastUpdatePosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVisibility, 0x0030);
		}

		// Class Engine.IntSerialization
		TEST_METHOD(Class__Engine__IntSerialization)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt16Variable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_OPXW, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt32Variable, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt64Variable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt8Variable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_YK36, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt16Variable, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_I24S, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt64Variable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt8Variable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_OHT1, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt32Variable, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntSerialization, 0x0050);
		}

		// Class Engine.LandscapeInfo
		TEST_METHOD(Class__Engine__LandscapeInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeGuid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentSizeQuads, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, SubsectionSizeQuads, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentNumSubsections, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, DrawScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_P982, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfo, 0x0270);
		}

		// Class Engine.LandscapeLayerInfoObject
		TEST_METHOD(Class__Engine__LandscapeLayerInfoObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LandscapeInfoID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerName, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, UnknownData_KGEM, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, PhysMaterial, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, Hardness, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, UnknownData_7KGE, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerUsageDebugColor, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLayerInfoObject, 0x0058);
		}

		// Class Engine.LandscapeSplineSegment
		TEST_METHOD(Class__Engine__LandscapeSplineSegment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Connections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, SplineInfo, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Points, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Bounds, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, UnknownData_78CA, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, MeshComponents, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineSegment, 0x00A8);
		}

		// Class Engine.LandscapeSplineControlPoint
		TEST_METHOD(Class__Engine__LandscapeSplineControlPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Width, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, SideFalloff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, EndFalloff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_KDBI, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, ConnectedSegments, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, MeshComponent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Points, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Bounds, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_6U0G, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineControlPoint, 0x0098);
		}

		// Class Engine.Layer
		TEST_METHOD(Class__Engine__Layer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, UnknownData_BDXN, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, ActorStats, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayer, 0x0048);
		}

		// Class Engine.LevelStreaming
		TEST_METHOD(Class__Engine__LevelStreaming)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PackageName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, WorldAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_VTAR, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PackageNameToLoad, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LODPackageNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_XC07, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_VYXC, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, DrawColor, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelColor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, EditorStreamingVolumes, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, MinTimeBetweenVolumeUnloadRequests, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_O30X, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, Keywords, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_LZ2T, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelLoaded, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelUnloaded, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelShown, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelHidden, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, bEnableTileStreaming, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_FUUG, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LoadedLevel, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PendingUnloadLevel, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreaming, 0x0150);
		}

		// Class Engine.LevelStreamingAlwaysLoaded
		TEST_METHOD(Class__Engine__LevelStreamingAlwaysLoaded)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingAlwaysLoaded, 0x0150);
		}

		// Class Engine.LevelStreamingBounds
		TEST_METHOD(Class__Engine__LevelStreamingBounds)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingBounds, 0x0150);
		}

		// Class Engine.LevelStreamingKismet
		TEST_METHOD(Class__Engine__LevelStreamingKismet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingKismet, UnknownData_8598, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingKismet, 0x0160);
		}

		// Class Engine.LevelStreamingPersistent
		TEST_METHOD(Class__Engine__LevelStreamingPersistent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingPersistent, 0x0150);
		}

		// Class Engine.LightmappedSurfaceCollection
		TEST_METHOD(Class__Engine__LightmappedSurfaceCollection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, SourceModel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, Surfaces, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmappedSurfaceCollection, 0x0040);
		}

		// Class Engine.LightmassPrimitiveSettingsObject
		TEST_METHOD(Class__Engine__LightmassPrimitiveSettingsObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPrimitiveSettingsObject, LightmassSettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPrimitiveSettingsObject, 0x0040);
		}

		// Class Engine.LocalMessage
		TEST_METHOD(Class__Engine__LocalMessage)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalMessage, 0x0028);
		}

		// Class Engine.EngineMessage
		TEST_METHOD(Class__Engine__EngineMessage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, FailedPlaceMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, MaxedOutMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, EnteredMessage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, LeftMessage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, GlobalNameChange, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, SpecEnteredMessage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewPlayerMessage, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewSpecMessage, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineMessage, 0x00A8);
		}

		// Class Engine.MaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpression)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, UnknownData_J2CO, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Material, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Function, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Desc, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, BorderColor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, UnknownData_20C0, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, MenuCategories, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Outputs, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpression, 0x0078);
		}

		// Class Engine.MaterialExpressionAbs
		TEST_METHOD(Class__Engine__MaterialExpressionAbs)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, Input, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAbs, 0x00B0);
		}

		// Class Engine.MaterialExpressionActorPositionWS
		TEST_METHOD(Class__Engine__MaterialExpressionActorPositionWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionActorPositionWS, 0x0078);
		}

		// Class Engine.MaterialExpressionAdd
		TEST_METHOD(Class__Engine__MaterialExpressionAdd)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, A, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, B, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstA, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstB, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAdd, 0x00F0);
		}

		// Class Engine.MaterialExpressionAppendVector
		TEST_METHOD(Class__Engine__MaterialExpressionAppendVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, A, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, B, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAppendVector, 0x00E8);
		}

		// Class Engine.MaterialExpressionAtmosphericFogColor
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericFogColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, WorldPosition, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericFogColor, 0x00B0);
		}

		// Class Engine.MaterialExpressionBlackBody
		TEST_METHOD(Class__Engine__MaterialExpressionBlackBody)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, Temp, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlackBody, 0x00B0);
		}

		// Class Engine.MaterialExpressionBreakMaterialAttributes
		TEST_METHOD(Class__Engine__MaterialExpressionBreakMaterialAttributes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, Struct, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, MaterialAttributes, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, UnknownData_B00H, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBreakMaterialAttributes, 0x00F0);
		}

		// Class Engine.MaterialExpressionBumpOffset
		TEST_METHOD(Class__Engine__MaterialExpressionBumpOffset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Coordinate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Height, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatioInput, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatio, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ReferencePlane, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ConstCoordinate, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_1G7U, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBumpOffset, 0x0130);
		}

		// Class Engine.MaterialExpressionCameraPositionWS
		TEST_METHOD(Class__Engine__MaterialExpressionCameraPositionWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraPositionWS, 0x0078);
		}

		// Class Engine.MaterialExpressionCameraVectorWS
		TEST_METHOD(Class__Engine__MaterialExpressionCameraVectorWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraVectorWS, 0x0078);
		}

		// Class Engine.MaterialExpressionCeil
		TEST_METHOD(Class__Engine__MaterialExpressionCeil)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, Input, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCeil, 0x00B0);
		}

		// Class Engine.MaterialExpressionClamp
		TEST_METHOD(Class__Engine__MaterialExpressionClamp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Input, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Min, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Max, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, ClampMode, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_1SQQ, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MinDefault, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MaxDefault, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_AO3I, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClamp, 0x0130);
		}

		// Class Engine.MaterialExpressionCollectionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionCollectionParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, Collection, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCollectionParameter, 0x0098);
		}

		// Class Engine.MaterialExpressionComment
		TEST_METHOD(Class__Engine__MaterialExpressionComment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeX, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeY, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, Text, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, CommentColor, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComment, 0x00A0);
		}

		// Class Engine.MaterialExpressionComponentMask
		TEST_METHOD(Class__Engine__MaterialExpressionComponentMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, Input, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_DW56, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComponentMask, 0x00B8);
		}

		// Class Engine.MaterialExpressionConstant
		TEST_METHOD(Class__Engine__MaterialExpressionConstant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, R, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, UnknownData_LBJD, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant, 0x0080);
		}

		// Class Engine.MaterialExpressionConstant2Vector
		TEST_METHOD(Class__Engine__MaterialExpressionConstant2Vector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, R, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, G, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant2Vector, 0x0080);
		}

		// Class Engine.MaterialExpressionConstant3Vector
		TEST_METHOD(Class__Engine__MaterialExpressionConstant3Vector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, R, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, G, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, B, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, Constant, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, UnknownData_QA32, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant3Vector, 0x0098);
		}

		// Class Engine.MaterialExpressionConstant4Vector
		TEST_METHOD(Class__Engine__MaterialExpressionConstant4Vector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, R, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, G, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, B, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, A, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, Constant, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant4Vector, 0x0098);
		}

		// Class Engine.MaterialExpressionConstantBiasScale
		TEST_METHOD(Class__Engine__MaterialExpressionConstantBiasScale)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Input, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Bias, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Scale, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstantBiasScale, 0x00B8);
		}

		// Class Engine.MaterialExpressionCosine
		TEST_METHOD(Class__Engine__MaterialExpressionCosine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Input, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Period, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_FSU3, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCosine, 0x00B8);
		}

		// Class Engine.MaterialExpressionCrossProduct
		TEST_METHOD(Class__Engine__MaterialExpressionCrossProduct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, A, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, B, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCrossProduct, 0x00E8);
		}

		// Class Engine.MaterialExpressionCustom
		TEST_METHOD(Class__Engine__MaterialExpressionCustom)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Code, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, OutputType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, UnknownData_VH9Z, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Description, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Inputs, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustom, 0x00B0);
		}

		// Class Engine.MaterialExpressionCustomTexture
		TEST_METHOD(Class__Engine__MaterialExpressionCustomTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustomTexture, Texture, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustomTexture, 0x0080);
		}

		// Class Engine.MaterialExpressionDDX
		TEST_METHOD(Class__Engine__MaterialExpressionDDX)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, Value, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDX, 0x00B0);
		}

		// Class Engine.MaterialExpressionDDY
		TEST_METHOD(Class__Engine__MaterialExpressionDDY)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, Value, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDY, 0x00B0);
		}

		// Class Engine.MaterialExpressionDepthFade
		TEST_METHOD(Class__Engine__MaterialExpressionDepthFade)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, InOpacity, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistance, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, OpacityDefault, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistanceDefault, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthFade, 0x00F0);
		}

		// Class Engine.MaterialExpressionDepthOfFieldFunction
		TEST_METHOD(Class__Engine__MaterialExpressionDepthOfFieldFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, FunctionValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_LIO7, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, Depth, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthOfFieldFunction, 0x00B8);
		}

		// Class Engine.MaterialExpressionDeriveNormalZ
		TEST_METHOD(Class__Engine__MaterialExpressionDeriveNormalZ)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, InXY, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeriveNormalZ, 0x00B0);
		}

		// Class Engine.MaterialExpressionDesaturation
		TEST_METHOD(Class__Engine__MaterialExpressionDesaturation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Input, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Fraction, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, LuminanceFactors, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDesaturation, 0x00F8);
		}

		// Class Engine.MaterialExpressionDistance
		TEST_METHOD(Class__Engine__MaterialExpressionDistance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, A, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, B, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistance, 0x00E8);
		}

		// Class Engine.MaterialExpressionDistanceCullFade
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceCullFade)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceCullFade, 0x0078);
		}

		// Class Engine.MaterialExpressionDistanceFieldGradient
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceFieldGradient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, Position, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceFieldGradient, 0x00B0);
		}

		// Class Engine.MaterialExpressionDistanceToNearestSurface
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceToNearestSurface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, Position, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceToNearestSurface, 0x00B0);
		}

		// Class Engine.MaterialExpressionDivide
		TEST_METHOD(Class__Engine__MaterialExpressionDivide)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, A, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, B, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstA, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstB, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDivide, 0x00F0);
		}

		// Class Engine.MaterialExpressionDotProduct
		TEST_METHOD(Class__Engine__MaterialExpressionDotProduct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, A, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, B, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDotProduct, 0x00E8);
		}

		// Class Engine.MaterialExpressionDynamicParameter
		TEST_METHOD(Class__Engine__MaterialExpressionDynamicParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParamNames, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDynamicParameter, 0x0088);
		}

		// Class Engine.MaterialExpressionEyeAdaptation
		TEST_METHOD(Class__Engine__MaterialExpressionEyeAdaptation)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionEyeAdaptation, 0x0078);
		}

		// Class Engine.MaterialExpressionFeatureLevelSwitch
		TEST_METHOD(Class__Engine__MaterialExpressionFeatureLevelSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Default, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Inputs, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFeatureLevelSwitch, 0x0190);
		}

		// Class Engine.MaterialExpressionFloor
		TEST_METHOD(Class__Engine__MaterialExpressionFloor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, Input, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFloor, 0x00B0);
		}

		// Class Engine.MaterialExpressionFmod
		TEST_METHOD(Class__Engine__MaterialExpressionFmod)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, A, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, B, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFmod, 0x00E8);
		}

		// Class Engine.MaterialExpressionFontSample
		TEST_METHOD(Class__Engine__MaterialExpressionFontSample)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, Font, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, FontTexturePage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, UnknownData_WN9O, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSample, 0x0088);
		}

		// Class Engine.MaterialExpressionFontSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionFontSampleParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ParameterName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ExpressionGUID, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, Group, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSampleParameter, 0x00A8);
		}

		// Class Engine.MaterialExpressionFrac
		TEST_METHOD(Class__Engine__MaterialExpressionFrac)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, Input, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFrac, 0x00B0);
		}

		// Class Engine.MaterialExpressionFresnel
		TEST_METHOD(Class__Engine__MaterialExpressionFresnel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, ExponentIn, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Exponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_6ISA, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFractionIn, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFraction, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_HL43, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Normal, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFresnel, 0x0130);
		}

		// Class Engine.MaterialExpressionFunctionInput
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Preview, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Description, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, ID, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, inputType, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_YNOR, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, PreviewValue, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_6T1F, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, SortPriority, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_P3MS, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionInput, 0x0110);
		}

		// Class Engine.MaterialExpressionFunctionOutput
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, OutputName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, Description, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, SortPriority, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_COP4, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, A, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_QNR7, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, ID, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_N6W8, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionOutput, 0x00F0);
		}

		// Class Engine.MaterialExpressionGIReplace
		TEST_METHOD(Class__Engine__MaterialExpressionGIReplace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, Default, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, StaticIndirect, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, DynamicIndirect, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGIReplace, 0x0120);
		}

		// Class Engine.MaterialExpressionIf
		TEST_METHOD(Class__Engine__MaterialExpressionIf)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, A, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, B, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AGreaterThanB, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AEqualsB, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ALessThanB, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, EqualsThreshold, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstB, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstAEqualsB, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_9OGM, 0x019C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionIf, 0x01A0);
		}

		// Class Engine.MaterialExpressionLandscapeLayerBlend
		TEST_METHOD(Class__Engine__MaterialExpressionLandscapeLayerBlend)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, Layers, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, ExpressionGUID, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerBlend, 0x0098);
		}

		// Class Engine.MaterialExpressionLandscapeLayerCoords
		TEST_METHOD(Class__Engine__MaterialExpressionLandscapeLayerCoords)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, CustomUVType, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_7L4U, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingScale, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingRotation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanU, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanV, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_9TRK, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerCoords, 0x0090);
		}

		// Class Engine.MaterialExpressionLandscapeLayerSample
		TEST_METHOD(Class__Engine__MaterialExpressionLandscapeLayerSample)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ParameterName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, PreviewWeight, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ExpressionGUID, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, UnknownData_W04T, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSample, 0x0098);
		}

		// Class Engine.MaterialExpressionLandscapeLayerSwitch
		TEST_METHOD(Class__Engine__MaterialExpressionLandscapeLayerSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerUsed, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerNotUsed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ParameterName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_Z2VU, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ExpressionGUID, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_XVVT, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSwitch, 0x0108);
		}

		// Class Engine.MaterialExpressionLandscapeLayerWeight
		TEST_METHOD(Class__Engine__MaterialExpressionLandscapeLayerWeight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Base, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Layer, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ParameterName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, PreviewWeight, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ConstBase, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ExpressionGUID, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerWeight, 0x0110);
		}

		// Class Engine.MaterialExpressionLandscapeVisibilityMask
		TEST_METHOD(Class__Engine__MaterialExpressionLandscapeVisibilityMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeVisibilityMask, ExpressionGUID, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeVisibilityMask, 0x0088);
		}

		// Class Engine.MaterialExpressionLightmapUVs
		TEST_METHOD(Class__Engine__MaterialExpressionLightmapUVs)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmapUVs, 0x0078);
		}

		// Class Engine.MaterialExpressionLightmassReplace
		TEST_METHOD(Class__Engine__MaterialExpressionLightmassReplace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Realtime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Lightmass, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmassReplace, 0x00E8);
		}

		// Class Engine.MaterialExpressionLightVector
		TEST_METHOD(Class__Engine__MaterialExpressionLightVector)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightVector, 0x0078);
		}

		// Class Engine.MaterialExpressionLinearInterpolate
		TEST_METHOD(Class__Engine__MaterialExpressionLinearInterpolate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, A, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, B, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, Alpha, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstA, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstB, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstAlpha, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_1RF6, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLinearInterpolate, 0x0130);
		}

		// Class Engine.MaterialExpressionMakeMaterialAttributes
		TEST_METHOD(Class__Engine__MaterialExpressionMakeMaterialAttributes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, BaseColor, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Metallic, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Specular, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Roughness, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, EmissiveColor, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Opacity, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, OpacityMask, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Normal, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldPositionOffset, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldDisplacement, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, TessellationMultiplier, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SubsurfaceColor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoat, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoatRoughness, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, AmbientOcclusion, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Refraction, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SSAOIntensity, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SSAOInfluence, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SSAOLightInfluence, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, CustomizedUVs, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMakeMaterialAttributes, 0x0660);
		}

		// Class Engine.MaterialExpressionMaterialFunctionCall
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialFunctionCall)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, MaterialFunction, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, FunctionInputs, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, FunctionOutputs, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialFunctionCall, 0x00A0);
		}

		// Class Engine.MaterialExpressionMax
		TEST_METHOD(Class__Engine__MaterialExpressionMax)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, A, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, B, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstA, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstB, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMax, 0x00F0);
		}

		// Class Engine.MaterialExpressionMin
		TEST_METHOD(Class__Engine__MaterialExpressionMin)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, A, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, B, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstA, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstB, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMin, 0x00F0);
		}

		// Class Engine.MaterialExpressionMultiply
		TEST_METHOD(Class__Engine__MaterialExpressionMultiply)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, A, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, B, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstA, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstB, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMultiply, 0x00F0);
		}

		// Class Engine.MaterialExpressionNoise
		TEST_METHOD(Class__Engine__MaterialExpressionNoise)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Position, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, FilterWidth, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Scale, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Quality, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, NoiseFunction, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_VSU6, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_8GIU, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Levels, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMin, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMax, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, LevelScale, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNoise, 0x0108);
		}

		// Class Engine.MaterialExpressionNormalize
		TEST_METHOD(Class__Engine__MaterialExpressionNormalize)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, VectorInput, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNormalize, 0x00B0);
		}

		// Class Engine.MaterialExpressionObjectBounds
		TEST_METHOD(Class__Engine__MaterialExpressionObjectBounds)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectBounds, 0x0078);
		}

		// Class Engine.MaterialExpressionObjectId
		TEST_METHOD(Class__Engine__MaterialExpressionObjectId)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectId, 0x0078);
		}

		// Class Engine.MaterialExpressionObjectOrientation
		TEST_METHOD(Class__Engine__MaterialExpressionObjectOrientation)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectOrientation, 0x0078);
		}

		// Class Engine.MaterialExpressionObjectPositionWS
		TEST_METHOD(Class__Engine__MaterialExpressionObjectPositionWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectPositionWS, 0x0078);
		}

		// Class Engine.MaterialExpressionObjectRadius
		TEST_METHOD(Class__Engine__MaterialExpressionObjectRadius)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectRadius, 0x0078);
		}

		// Class Engine.MaterialExpressionOneMinus
		TEST_METHOD(Class__Engine__MaterialExpressionOneMinus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, Input, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionOneMinus, 0x00B0);
		}

		// Class Engine.MaterialExpressionPanner
		TEST_METHOD(Class__Engine__MaterialExpressionPanner)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Coordinate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Time, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedX, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedY, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, ConstCoordinate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, bFractionalPart, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_HYYV, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPanner, 0x00F8);
		}

		// Class Engine.MaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ParameterName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ExpressionGUID, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, Group, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParameter, 0x0098);
		}

		// Class Engine.MaterialExpressionScalarParameter
		TEST_METHOD(Class__Engine__MaterialExpressionScalarParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, DefaultValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, UnknownData_T4SW, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScalarParameter, 0x00A0);
		}

		// Class Engine.MaterialExpressionStaticBoolParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBoolParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBoolParameter, UnknownData_371G, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBoolParameter, 0x00A0);
		}

		// Class Engine.MaterialExpressionStaticSwitchParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitchParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, A, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, B, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitchParameter, 0x0110);
		}

		// Class Engine.MaterialExpressionStaticComponentMaskParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticComponentMaskParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, Input, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_4LNC, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticComponentMaskParameter, 0x00D8);
		}

		// Class Engine.MaterialExpressionVectorParameter
		TEST_METHOD(Class__Engine__MaterialExpressionVectorParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, DefaultValue, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorParameter, 0x00A8);
		}

		// Class Engine.MaterialExpressionParticleColor
		TEST_METHOD(Class__Engine__MaterialExpressionParticleColor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleColor, 0x0078);
		}

		// Class Engine.MaterialExpressionParticleDirection
		TEST_METHOD(Class__Engine__MaterialExpressionParticleDirection)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleDirection, 0x0078);
		}

		// Class Engine.MaterialExpressionParticleMacroUV
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMacroUV)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMacroUV, 0x0078);
		}

		// Class Engine.MaterialExpressionParticleMotionBlurFade
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMotionBlurFade)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMotionBlurFade, 0x0078);
		}

		// Class Engine.MaterialExpressionParticlePositionWS
		TEST_METHOD(Class__Engine__MaterialExpressionParticlePositionWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticlePositionWS, 0x0078);
		}

		// Class Engine.MaterialExpressionParticleRadius
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRadius)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRadius, 0x0078);
		}

		// Class Engine.MaterialExpressionParticleRelativeTime
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRelativeTime)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRelativeTime, 0x0078);
		}

		// Class Engine.MaterialExpressionParticleSize
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSize)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSize, 0x0078);
		}

		// Class Engine.MaterialExpressionParticleSpeed
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSpeed)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSpeed, 0x0078);
		}

		// Class Engine.MaterialExpressionPerInstanceFadeAmount
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceFadeAmount)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceFadeAmount, 0x0078);
		}

		// Class Engine.MaterialExpressionPerInstanceRandom
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceRandom)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceRandom, 0x0078);
		}

		// Class Engine.MaterialExpressionPixelDepth
		TEST_METHOD(Class__Engine__MaterialExpressionPixelDepth)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelDepth, 0x0078);
		}

		// Class Engine.MaterialExpressionPixelNormalWS
		TEST_METHOD(Class__Engine__MaterialExpressionPixelNormalWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelNormalWS, 0x0078);
		}

		// Class Engine.MaterialExpressionPlatformSwitch
		TEST_METHOD(Class__Engine__MaterialExpressionPlatformSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPlatformSwitch, Default, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPlatformSwitch, Inputs, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPlatformSwitch, 0x06D0);
		}

		// Class Engine.MaterialExpressionPower
		TEST_METHOD(Class__Engine__MaterialExpressionPower)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Base, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Exponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, ConstExponent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_S5ON, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPower, 0x00F0);
		}

		// Class Engine.MaterialExpressionPreSkinnedNormal
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedNormal)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedNormal, 0x0078);
		}

		// Class Engine.MaterialExpressionPreSkinnedPosition
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedPosition)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedPosition, 0x0078);
		}

		// Class Engine.MaterialExpressionQualitySwitch
		TEST_METHOD(Class__Engine__MaterialExpressionQualitySwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Default, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Inputs, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionQualitySwitch, 0x0120);
		}

		// Class Engine.MaterialExpressionReflectionVectorWS
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionVectorWS)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, CustomWorldNormal, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_E2NA, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionVectorWS, 0x00B8);
		}

		// Class Engine.MaterialExpressionRotateAboutAxis
		TEST_METHOD(Class__Engine__MaterialExpressionRotateAboutAxis)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, NormalizedRotationAxis, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, RotationAngle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, PivotPoint, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Position, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Period, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_G879, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotateAboutAxis, 0x0160);
		}

		// Class Engine.MaterialExpressionRotator
		TEST_METHOD(Class__Engine__MaterialExpressionRotator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Coordinate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Time, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterX, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterY, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Speed, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, ConstCoordinate, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotator, 0x00F8);
		}

		// Class Engine.MaterialExpressionSceneColor
		TEST_METHOD(Class__Engine__MaterialExpressionSceneColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, InputMode, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_7YQJ, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, Input, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, OffsetFraction, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, ConstInput, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneColor, 0x00F8);
		}

		// Class Engine.MaterialExpressionSceneDepth
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepth)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, InputMode, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_I4G0, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Input, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Coordinates, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, ConstInput, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, bUseHZB, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_PCM8, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepth, 0x0100);
		}

		// Class Engine.MaterialExpressionSceneTexelSize
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexelSize)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexelSize, 0x0078);
		}

		// Class Engine.MaterialExpressionSceneTexture
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, Coordinates, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, SceneTextureId, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, bClampUVs, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_9R5O, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexture, 0x00B8);
		}

		// Class Engine.MaterialExpressionScreenPosition
		TEST_METHOD(Class__Engine__MaterialExpressionScreenPosition)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScreenPosition, 0x0078);
		}

		// Class Engine.MaterialExpressionSine
		TEST_METHOD(Class__Engine__MaterialExpressionSine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Input, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Period, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_870Z, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSine, 0x00B8);
		}

		// Class Engine.MaterialExpressionSpeedTree
		TEST_METHOD(Class__Engine__MaterialExpressionSpeedTree)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindType, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODType, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_CM32, 0x007B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, BillboardThreshold, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpeedTree, 0x0080);
		}

		// Class Engine.MaterialExpressionSphereMask
		TEST_METHOD(Class__Engine__MaterialExpressionSphereMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, A, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, B, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Radius, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Hardness, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, AttenuationRadius, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, HardnessPercent, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphereMask, 0x0160);
		}

		// Class Engine.MaterialExpressionSphericalParticleOpacity
		TEST_METHOD(Class__Engine__MaterialExpressionSphericalParticleOpacity)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, Density, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, ConstantDensity, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_6D16, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphericalParticleOpacity, 0x00B8);
		}

		// Class Engine.MaterialExpressionSquareRoot
		TEST_METHOD(Class__Engine__MaterialExpressionSquareRoot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, Input, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSquareRoot, 0x00B0);
		}

		// Class Engine.MaterialExpressionStaticBool
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBool, UnknownData_MLNI, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBool, 0x0080);
		}

		// Class Engine.MaterialExpressionStaticSwitch
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_I00G, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, A, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, B, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, Value, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitch, 0x0128);
		}

		// Class Engine.MaterialExpressionSubtract
		TEST_METHOD(Class__Engine__MaterialExpressionSubtract)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, A, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, B, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstA, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstB, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSubtract, 0x00F0);
		}

		// Class Engine.MaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, Texture, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, SamplerType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, UnknownData_06H2, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, UnknownData_I5KN, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureBase, 0x0088);
		}

		// Class Engine.MaterialExpressionTextureObject
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObject)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObject, 0x0088);
		}

		// Class Engine.MaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSample)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, Coordinates, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, TextureObject, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValue, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDX, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDY, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValueMode, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, SamplerSource, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_T2ZL, 0x01A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstCoordinate, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstMipValue, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_G761, 0x01AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSample, 0x01B0);
		}

		// Class Engine.MaterialExpressionParticleSubUV
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUV)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParticleSubUV, UnknownData_JJZY, 0x01B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUV, 0x01B8);
		}

		// Class Engine.MaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ParameterName, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ExpressionGUID, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, Group, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter, 0x01D0);
		}

		// Class Engine.MaterialExpressionTextureObjectParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObjectParameter)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObjectParameter, 0x01D0);
		}

		// Class Engine.MaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2D)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2D, 0x01D0);
		}

		// Class Engine.MaterialExpressionAntialiasedTextureMask
		TEST_METHOD(Class__Engine__MaterialExpressionAntialiasedTextureMask)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Threshold, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Channel, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, UnknownData_NKIG, 0x01D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAntialiasedTextureMask, 0x01D8);
		}

		// Class Engine.MaterialExpressionTextureSampleParameterSubUV
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterSubUV)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameterSubUV, UnknownData_2TSA, 0x01D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterSubUV, 0x01D8);
		}

		// Class Engine.MaterialExpressionTextureSampleParameterCube
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterCube)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterCube, 0x01D0);
		}

		// Class Engine.MaterialExpressionTextureCoordinate
		TEST_METHOD(Class__Engine__MaterialExpressionTextureCoordinate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, CoordinateIndex, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UTiling, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, VTiling, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UnknownData_DZ32, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureCoordinate, 0x0088);
		}

		// Class Engine.MaterialExpressionTime
		TEST_METHOD(Class__Engine__MaterialExpressionTime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, UnknownData_CHAU, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTime, 0x0080);
		}

		// Class Engine.MaterialExpressionTransform
		TEST_METHOD(Class__Engine__MaterialExpressionTransform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, Input, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformSourceType, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformType, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_SZG5, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransform, 0x00B8);
		}

		// Class Engine.MaterialExpressionTransformPosition
		TEST_METHOD(Class__Engine__MaterialExpressionTransformPosition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, Input, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformSourceType, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformType, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_RWQG, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransformPosition, 0x00B8);
		}

		// Class Engine.MaterialExpressionTwoSidedSign
		TEST_METHOD(Class__Engine__MaterialExpressionTwoSidedSign)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTwoSidedSign, 0x0078);
		}

		// Class Engine.MaterialExpressionVertexColor
		TEST_METHOD(Class__Engine__MaterialExpressionVertexColor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexColor, 0x0078);
		}

		// Class Engine.MaterialExpressionVertexNormalWS
		TEST_METHOD(Class__Engine__MaterialExpressionVertexNormalWS)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexNormalWS, 0x0078);
		}

		// Class Engine.MaterialExpressionViewSize
		TEST_METHOD(Class__Engine__MaterialExpressionViewSize)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewSize, 0x0078);
		}

		// Class Engine.MaterialExpressionWorldPosition
		TEST_METHOD(Class__Engine__MaterialExpressionWorldPosition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, WorldPositionShaderOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, UnknownData_AYR9, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionWorldPosition, 0x0080);
		}

		// Class Engine.MaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, AdditionalIncludes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, Description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_FBSK, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, LibraryCategories, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, FunctionExpressions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_J1QL, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunction, 0x0088);
		}

		// Class Engine.Material
		TEST_METHOD(Class__Engine__Material)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, DiffuseColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, SpecularColor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BaseColor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Metallic, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Specular, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, SpecularPower, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Roughness, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Normal, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EmissiveColor, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Opacity, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, OpacityMask, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, FresnelBaseReflectFraction, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_E29D, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, AdditionalIncludes, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDomain, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendMode, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, DecalBlendMode, 0x034A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDecalResponse, 0x034B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModel, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_NP5W, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, OpacityMaskClipValue, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_QY0M, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, WorldPositionOffset, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, WorldDisplacement, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TessellationMultiplier, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, SubsurfaceColor, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ClearCoat, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ClearCoatRoughness, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, AmbientOcclusion, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Refraction, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, SSAOIntensity, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, SSAOInfluence, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, SSAOLightInfluence, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, CustomizedUVs, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialAttributes, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_SV3E, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PixelDepthOffset, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_RH9I, 0x08E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, NumCustomizedUVs, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyLightingMode, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_NJ4D, 0x08F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyDirectionalLightingIntensity, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowDensityScale, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowDensityScale, 0x08FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondDensityScale, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondOpacity, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentBackscatteringExponent, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentMultipleScatteringExtinction, 0x090C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowStartOffset, 0x091C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, D3D11TessellationMode, 0x0924);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_MABT, 0x0925);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_U9BP, 0x0929);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EditorX, 0x092C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EditorY, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EditorPitch, 0x0934);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EditorYaw, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_GSZJ, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Expressions, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialFunctionInfos, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialParameterCollectionInfos, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_JQGE, 0x0971);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UsageFlagWarnings, 0x0974);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableLocation, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_N8T4, 0x0979);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendablePriority, 0x097C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, DownsampleFactor, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionDepthBias, 0x0984);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StateId, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_DPKP, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ExpressionTextureReferences, 0x0AD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterial, 0x0AE8);
		}

		// Class Engine.MaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, Parent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_UTC9, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, ParentLightingGuid, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_65HL, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, FontParameterValues, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, ScalarParameterValues, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, TextureParameterValues, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, VectorParameterValues, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, bOverrideBaseProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_F9F4, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, BasePropertyOverrides, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, bOptOutOfMaterialUsedWithFlagOptimizations, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, bOverrideUsedWithFlags, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_S3WZ, 0x00DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UsedWithOverrides, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_KFED, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstance, 0x0208);
		}

		// Class Engine.MaterialInstanceConstant
		TEST_METHOD(Class__Engine__MaterialInstanceConstant)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceConstant, 0x0208);
		}

		// Class Engine.LandscapeMaterialInstanceConstant
		TEST_METHOD(Class__Engine__LandscapeMaterialInstanceConstant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, UnknownData_MXSK, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, DataWeightmapIndex, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, DataWeightmapSize, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, UnknownData_K2J8, 0x0214);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMaterialInstanceConstant, 0x0218);
		}

		// Class Engine.MaterialInstanceDynamic
		TEST_METHOD(Class__Engine__MaterialInstanceDynamic)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceDynamic, 0x0208);
		}

		// Class Engine.MaterialParameterCollection
		TEST_METHOD(Class__Engine__MaterialParameterCollection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, ScalarParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, VectorParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, UnknownData_9BL1, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollection, 0x0060);
		}

		// Class Engine.MaterialParameterCollectionInstance
		TEST_METHOD(Class__Engine__MaterialParameterCollectionInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_ZCS9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, Collection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, World, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_IIK5, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollectionInstance, 0x00E8);
		}

		// Class Engine.MatineeInterface
		TEST_METHOD(Class__Engine__MatineeInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeInterface, 0x0028);
		}

		// Class Engine.MountedDLCManager
		TEST_METHOD(Class__Engine__MountedDLCManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMountedDLCManager, MountedDLCs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMountedDLCManager, MountedDLCMaps, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMountedDLCManager, UnknownData_M8A2, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMountedDLCManager, 0x0068);
		}

		// Class Engine.StadiaMountedDLCManager
		TEST_METHOD(Class__Engine__StadiaMountedDLCManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStadiaMountedDLCManager, UnknownData_EAOX, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStadiaMountedDLCManager, 0x0070);
		}

		// Class Engine.NavArea
		TEST_METHOD(Class__Engine__NavArea)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DefaultCost, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, FixedAreaEnteringCost, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DrawColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, UnknownData_79GZ, 0x0036);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea, 0x0040);
		}

		// Class Engine.NavArea_Default
		TEST_METHOD(Class__Engine__NavArea_Default)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Default, 0x0040);
		}

		// Class Engine.NavArea_Null
		TEST_METHOD(Class__Engine__NavArea_Null)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Null, 0x0040);
		}

		// Class Engine.NavAreaMeta
		TEST_METHOD(Class__Engine__NavAreaMeta)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta, 0x0040);
		}

		// Class Engine.NavAreaMeta_SwitchByAgent
		TEST_METHOD(Class__Engine__NavAreaMeta_SwitchByAgent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent0Area, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent1Area, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent2Area, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent3Area, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent4Area, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent5Area, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent6Area, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent7Area, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent8Area, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent9Area, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent10Area, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent11Area, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent12Area, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent13Area, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent14Area, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent15Area, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta_SwitchByAgent, 0x00C0);
		}

		// Class Engine.NavCollision
		TEST_METHOD(Class__Engine__NavCollision)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_KJBQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, CylinderCollision, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, BoxCollision, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, AreaClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_SVEL, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollision, 0x0108);
		}

		// Class Engine.NavigationPath
		TEST_METHOD(Class__Engine__NavigationPath)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathUpdatedNotifier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathPoints, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, RecalculateOnInvalidation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, UnknownData_1EFU, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPath, 0x0070);
		}

		// Class Engine.NavigationPathGenerator
		TEST_METHOD(Class__Engine__NavigationPathGenerator)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPathGenerator, 0x0028);
		}

		// Class Engine.RecastFilter_UseDefaultArea
		TEST_METHOD(Class__Engine__RecastFilter_UseDefaultArea)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastFilter_UseDefaultArea, 0x0040);
		}

		// Class Engine.NavLinkTrivial
		TEST_METHOD(Class__Engine__NavLinkTrivial)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkTrivial, 0x0050);
		}

		// Class Engine.NavNodeInterface
		TEST_METHOD(Class__Engine__NavNodeInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavNodeInterface, 0x0028);
		}

		// Class Engine.NetworkSettings
		TEST_METHOD(Class__Engine__NetworkSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_BY9S, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkSettings, 0x0030);
		}

		// Class Engine.NiagaraEffect
		TEST_METHOD(Class__Engine__NiagaraEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffect, Emitters, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEffect, 0x0038);
		}

		// Class Engine.NiagaraScript
		TEST_METHOD(Class__Engine__NiagaraScript)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ByteCode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ConstantTable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_79GJ, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScript, 0x0058);
		}

		// Class Engine.NiagaraScriptSourceBase
		TEST_METHOD(Class__Engine__NiagaraScriptSourceBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScriptSourceBase, 0x0028);
		}

		// Class Engine.ObjectLibrary
		TEST_METHOD(Class__Engine__ObjectLibrary)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, ObjectBaseClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bHasBlueprintClasses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_GCXY, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, WeakObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bUseWeakReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bIsFullyLoaded, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_1GFF, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectLibrary, 0x0070);
		}

		// Class Engine.ObjectReferencer
		TEST_METHOD(Class__Engine__ObjectReferencer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectReferencer, ReferencedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectReferencer, 0x0038);
		}

		// Class Engine.PackageMapClient
		TEST_METHOD(Class__Engine__PackageMapClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMapClient, UnknownData_4KNY, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMapClient, 0x0188);
		}

		// Class Engine.ParticleEmitter
		TEST_METHOD(Class__Engine__ParticleEmitter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SubUVDataOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterRenderMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_IUW5, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, LODLevels, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_J154, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, PeakActiveParticles, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, InitialAllocationCount, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, MediumDetailSpawnRateScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, QualityLevelSpawnRateScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, DetailMode, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_CPD1, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_IHR1, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleEmitter, 0x0068);
		}

		// Class Engine.ParticleSpriteEmitter
		TEST_METHOD(Class__Engine__ParticleSpriteEmitter)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSpriteEmitter, 0x0068);
		}

		// Class Engine.ParticleLODLevel
		TEST_METHOD(Class__Engine__ParticleLODLevel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_NWO2, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, RequiredModule, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Modules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, TypeDataModule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModule, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventGenerator, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawningModules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModules, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UpdateModules, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, OrbitModules, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventReceiverModules, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_IF64, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, PeakActiveParticles, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleLODLevel, 0x00B8);
		}

		// Class Engine.ParticleModule
		TEST_METHOD(Class__Engine__ParticleModule)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_TQ7N, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, LODValidity, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_OIL9, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModule, 0x0030);
		}

		// Class Engine.ParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationBase, UnknownData_SY36, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationBase, 0x0038);
		}

		// Class Engine.ParticleModuleAcceleration
		TEST_METHOD(Class__Engine__ParticleModuleAcceleration)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, UnknownData_FBO0, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAcceleration, 0x0078);
		}

		// Class Engine.ParticleModuleAccelerationConstant
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationConstant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, UnknownData_PQHI, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationConstant, 0x0048);
		}

		// Class Engine.ParticleModuleAccelerationDrag
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDrag)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficient, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDrag, 0x0040);
		}

		// Class Engine.ParticleModuleAccelerationDragScaleOverLife
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDragScaleOverLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDragScaleOverLife, 0x0040);
		}

		// Class Engine.ParticleModuleAccelerationOverLifetime
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationOverLifetime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationOverLifetime, AccelOverLife, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationOverLifetime, 0x0070);
		}

		// Class Engine.ParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorBase, 0x0030);
		}

		// Class Engine.ParticleModuleAttractorLine
		TEST_METHOD(Class__Engine__ParticleModuleAttractorLine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Range, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Strength, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorLine, 0x00B8);
		}

		// Class Engine.ParticleModuleAttractorParticle
		TEST_METHOD(Class__Engine__ParticleModuleAttractorParticle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Range, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_NDKY, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Strength, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_XIHJ, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, SelectionMethod, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_YV64, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_JRNW, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, LastSelIndex, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorParticle, 0x00C0);
		}

		// Class Engine.ParticleModuleAttractorPoint
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Range, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Strength, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, UnknownData_U71W, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPoint, 0x00E0);
		}

		// Class Engine.ParticleModuleAttractorPointGravity
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPointGravity)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Radius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Strength, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPointGravity, 0x0048);
		}

		// Class Engine.ParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamBase, 0x0030);
		}

		// Class Engine.ParticleModuleBeamModifier
		TEST_METHOD(Class__Engine__ParticleModuleBeamModifier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, ModifierType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_RHCT, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, PositionOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, TangentOptions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_A365, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Tangent, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_UDDA, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, StrengthOptions, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Strength, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamModifier, 0x00F0);
		}

		// Class Engine.ParticleModuleBeamNoise
		TEST_METHOD(Class__Engine__ParticleModuleBeamNoise)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_KLQR, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency_LowRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_3YGK, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRangeScale, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_BBUD, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseSpeed, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_K43H, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockRadius, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_AQ05, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockTime, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTension, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_XNBP, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTangentStrength, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTessellation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_76BI, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, FrequencyDistance, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_BXCY, 0x014D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseScale, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamNoise, 0x0188);
		}

		// Class Engine.ParticleModuleBeamSource
		TEST_METHOD(Class__Engine__ParticleModuleBeamSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_MRRF, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_LW7X, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, Source, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_9BW4, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangentMethod, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_3J5C, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangent, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_9J8J, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceStrength, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_ONQA, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamSource, 0x0100);
		}

		// Class Engine.ParticleModuleBeamTarget
		TEST_METHOD(Class__Engine__ParticleModuleBeamTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_R8CD, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_OU6J, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_ZT2A, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangentMethod, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_925M, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangent, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_OF2W, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetStrength, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_QL4Y, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, LockRadius, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamTarget, 0x0100);
		}

		// Class Engine.ParticleModuleCameraBase
		TEST_METHOD(Class__Engine__ParticleModuleCameraBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraBase, 0x0030);
		}

		// Class Engine.ParticleModuleCameraOffset
		TEST_METHOD(Class__Engine__ParticleModuleCameraOffset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, CameraOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_UBTU, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UpdateMethod, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_HV25, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraOffset, 0x0070);
		}

		// Class Engine.ParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollisionBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionBase, 0x0030);
		}

		// Class Engine.ParticleModuleCollision
		TEST_METHOD(Class__Engine__ParticleModuleCollision)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactorRotation, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisions, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionCompletionOption, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_BI6C, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionTypes, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_NTKW, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_SWZ0, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, ParticleMass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DirScalar, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_SZ13, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, VerticalFudgeFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_PRN8, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DelayAmount, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_0P7E, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisionDistance, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollision, 0x0180);
		}

		// Class Engine.ParticleModuleCollisionGPU
		TEST_METHOD(Class__Engine__ParticleModuleCollisionGPU)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Resilience, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, ResilienceScaleOverLife, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Friction, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusScale, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusBias, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Response, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, UnknownData_YKDN, 0x00AD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionGPU, 0x00B0);
		}

		// Class Engine.ParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorBase, 0x0030);
		}

		// Class Engine.ParticleModuleColor
		TEST_METHOD(Class__Engine__ParticleModuleColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartAlpha, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, UnknownData_SGXP, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor, 0x00A8);
		}

		// Class Engine.ParticleModuleColor_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleColor_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor_Seeded, RandomSeedInfo, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor_Seeded, 0x00C8);
		}

		// Class Engine.ParticleModuleColorOverLife
		TEST_METHOD(Class__Engine__ParticleModuleColorOverLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, ColorOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, AlphaOverLife, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, UnknownData_51QP, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorOverLife, 0x00A8);
		}

		// Class Engine.ParticleModuleColorScaleOverLife
		TEST_METHOD(Class__Engine__ParticleModuleColorScaleOverLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, ColorScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, AlphaScaleOverLife, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, UnknownData_3ZCG, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorScaleOverLife, 0x00A8);
		}

		// Class Engine.ParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventBase, 0x0030);
		}

		// Class Engine.ParticleModuleEventGenerator
		TEST_METHOD(Class__Engine__ParticleModuleEventGenerator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventGenerator, Events, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventGenerator, 0x0040);
		}

		// Class Engine.ParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventGeneratorType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_DGDD, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_P96I, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverBase, 0x0040);
		}

		// Class Engine.ParticleModuleEventReceiverKillParticles
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverKillParticles)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverKillParticles, UnknownData_5XWN, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverKillParticles, 0x0048);
		}

		// Class Engine.ParticleModuleEventReceiverSpawn
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverSpawn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, SpawnCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_KO26, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, InheritVelocityScale, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverSpawn, 0x00B8);
		}

		// Class Engine.ParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBase, 0x0030);
		}

		// Class Engine.ParticleModuleKillBox
		TEST_METHOD(Class__Engine__ParticleModuleKillBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, LowerLeftCorner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UpperRightCorner, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UnknownData_FKAL, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBox, 0x00A8);
		}

		// Class Engine.ParticleModuleKillHeight
		TEST_METHOD(Class__Engine__ParticleModuleKillHeight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, UnknownData_0ICX, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillHeight, 0x0070);
		}

		// Class Engine.ParticleModuleLifetimeBase
		TEST_METHOD(Class__Engine__ParticleModuleLifetimeBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetimeBase, 0x0030);
		}

		// Class Engine.ParticleModuleLifetime
		TEST_METHOD(Class__Engine__ParticleModuleLifetime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime, LifeTime, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime, 0x0068);
		}

		// Class Engine.ParticleModuleLifetime_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleLifetime_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime_Seeded, 0x0088);
		}

		// Class Engine.ParticleModuleLightBase
		TEST_METHOD(Class__Engine__ParticleModuleLightBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLightBase, 0x0030);
		}

		// Class Engine.ParticleModuleLight
		TEST_METHOD(Class__Engine__ParticleModuleLight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bUseInverseSquaredFalloff, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bAffectsTranslucency, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bPreviewLightRadius, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_4UYD, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, SpawnFraction, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, ColorScaleOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, BrightnessOverLife, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, RadiusScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightExponent, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight, 0x0118);
		}

		// Class Engine.ParticleModuleLight_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleLight_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight_Seeded, RandomSeedInfo, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight_Seeded, 0x0138);
		}

		// Class Engine.ParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBase, 0x0030);
		}

		// Class Engine.ParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, StartLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeOverNPoints, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeThreshold, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation, 0x0070);
		}

		// Class Engine.ParticleModuleLocation_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleLocation_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation_Seeded, RandomSeedInfo, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation_Seeded, 0x0090);
		}

		// Class Engine.ParticleModuleLocationWorldOffset
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset, 0x0070);
		}

		// Class Engine.ParticleModuleLocationWorldOffset_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationWorldOffset_Seeded, RandomSeedInfo, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset_Seeded, 0x0090);
		}

		// Class Engine.ParticleModuleLocationBoneSocket
		TEST_METHOD(Class__Engine__ParticleModuleLocationBoneSocket)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_U6OQ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceLocations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SelectionMethod, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_IQNL, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_KIFL, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SkelMeshActorParamName, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBoneSocket, 0x0060);
		}

		// Class Engine.ParticleModuleLocationDirect
		TEST_METHOD(Class__Engine__ParticleModuleLocationDirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, LocationOffset, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, ScaleFactor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Direction, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationDirect, 0x0110);
		}

		// Class Engine.ParticleModuleLocationEmitter
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, SelectionMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_VJI2, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_CEQI, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceVelocityScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_DE2D, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceRotationScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_IKJG, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitter, 0x0050);
		}

		// Class Engine.ParticleModuleLocationEmitterDirect
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitterDirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitterDirect, EmitterName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitterDirect, 0x0038);
		}

		// Class Engine.ParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, UnknownData_0SOZ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, VelocityScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, StartLocation, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveBase, 0x00A8);
		}

		// Class Engine.ParticleModuleLocationPrimitiveCylinder
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_R6UF, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartRadius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartHeight, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, HeightAxis, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_BVUX, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder, 0x0128);
		}

		// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, RandomSeedInfo, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, 0x0148);
		}

		// Class Engine.ParticleModuleLocationPrimitiveSphere
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere, StartRadius, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere, 0x00E0);
		}

		// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere_Seeded, RandomSeedInfo, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere_Seeded, 0x0100);
		}

		// Class Engine.ParticleModuleLocationPrimitiveTriangle
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveTriangle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, StartOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Height, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Angle, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Thickness, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveTriangle, 0x0110);
		}

		// Class Engine.ParticleModuleLocationSkelVertSurface
		TEST_METHOD(Class__Engine__ParticleModuleLocationSkelVertSurface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_FADK, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_ZWIQ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SkelMeshActorParamName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_XX4C, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidAssociatedBones, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_HMMT, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalToCompare, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckToleranceDegrees, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckTolerance, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidMaterialIndices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_4M8I, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationSkelVertSurface, 0x0090);
		}

		// Class Engine.ParticleModulePivotOffset
		TEST_METHOD(Class__Engine__ParticleModulePivotOffset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModulePivotOffset, PivotOffset, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModulePivotOffset, 0x0038);
		}

		// Class Engine.ParticleModuleSourceMovement
		TEST_METHOD(Class__Engine__ParticleModuleSourceMovement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSourceMovement, SourceMovementScale, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSourceMovement, 0x0068);
		}

		// Class Engine.ParticleModuleMaterialBase
		TEST_METHOD(Class__Engine__ParticleModuleMaterialBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMaterialBase, 0x0030);
		}

		// Class Engine.ParticleModuleMeshMaterial
		TEST_METHOD(Class__Engine__ParticleModuleMeshMaterial)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshMaterial, MeshMaterials, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshMaterial, 0x0040);
		}

		// Class Engine.ParticleModuleOrbitBase
		TEST_METHOD(Class__Engine__ParticleModuleOrbitBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbitBase, UnknownData_F6P0, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbitBase, 0x0038);
		}

		// Class Engine.ParticleModuleOrbit
		TEST_METHOD(Class__Engine__ParticleModuleOrbit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, ChainMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_1VD3, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetAmount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetOptions, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_NDO0, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationAmount, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationOptions, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_CHBN, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateAmount, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateOptions, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_SPAX, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbit, 0x0100);
		}

		// Class Engine.ParticleModuleOrientationBase
		TEST_METHOD(Class__Engine__ParticleModuleOrientationBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationBase, 0x0030);
		}

		// Class Engine.ParticleModuleOrientationAxisLock
		TEST_METHOD(Class__Engine__ParticleModuleOrientationAxisLock)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, LockAxisFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, UnknownData_AQOI, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationAxisLock, 0x0038);
		}

		// Class Engine.ParticleModuleParameterBase
		TEST_METHOD(Class__Engine__ParticleModuleParameterBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterBase, 0x0030);
		}

		// Class Engine.ParticleModuleParameterDynamic
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, DynamicParams, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UpdateFlags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UnknownData_MKY0, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic, 0x0048);
		}

		// Class Engine.ParticleModuleParameterDynamic_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic_Seeded, RandomSeedInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic_Seeded, 0x0068);
		}

		// Class Engine.ParticleModuleRequired
		TEST_METHOD(Class__Engine__ParticleModuleRequired)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, Material, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterOrigin, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ScreenAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_CZXE, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_VP6V, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SortMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_QFD8, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_FGPQ, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDuration, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDurationLow, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_YXVR, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterLoops, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SpawnRate, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ParticleBurstMethod, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_V2JX, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BurstList, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelay, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelayLow, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_0ZZO, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, InterpolationMethod, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_RVKK, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Horizontal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Vertical, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_GB5Y, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageTime, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageChanges, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_8XL8, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVPosition, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVRadius, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_J8VH, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxDrawCount, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterNormalsMode, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_RKR5, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsSphereCenter, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsCylinderDirection, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_HXFR, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NamedMaterialOverrides, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRequired, 0x0130);
		}

		// Class Engine.ParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationBase, 0x0030);
		}

		// Class Engine.ParticleModuleMeshRotation
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, StartRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, UnknownData_TQ4I, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation, 0x0070);
		}

		// Class Engine.ParticleModuleMeshRotation_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation_Seeded, RandomSeedInfo, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation_Seeded, 0x0090);
		}

		// Class Engine.ParticleModuleRotation
		TEST_METHOD(Class__Engine__ParticleModuleRotation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation, StartRotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation, 0x0068);
		}

		// Class Engine.ParticleModuleRotation_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleRotation_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation_Seeded, 0x0088);
		}

		// Class Engine.ParticleModuleRotationOverLifetime
		TEST_METHOD(Class__Engine__ParticleModuleRotationOverLifetime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, RotationOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, UnknownData_TZKH, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationOverLifetime, 0x0070);
		}

		// Class Engine.ParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateBase, 0x0030);
		}

		// Class Engine.ParticleModuleMeshRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate, 0x0068);
		}

		// Class Engine.ParticleModuleRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate, 0x0068);
		}

		// Class Engine.ParticleModuleMeshRotationRate_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate_Seeded, 0x0088);
		}

		// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateMultiplyLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateMultiplyLife, 0x0068);
		}

		// Class Engine.ParticleModuleMeshRotationRateOverLife
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateOverLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, RotRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, UnknownData_JQ70, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateOverLife, 0x0070);
		}

		// Class Engine.ParticleModuleRotationRate_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate_Seeded, 0x0088);
		}

		// Class Engine.ParticleModuleRotationRateMultiplyLife
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateMultiplyLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateMultiplyLife, 0x0068);
		}

		// Class Engine.ParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeBase, 0x0030);
		}

		// Class Engine.ParticleModuleSize
		TEST_METHOD(Class__Engine__ParticleModuleSize)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize, StartSize, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize, 0x0068);
		}

		// Class Engine.ParticleModuleSize_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleSize_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize_Seeded, 0x0088);
		}

		// Class Engine.ParticleModuleSizeMultiplyLife
		TEST_METHOD(Class__Engine__ParticleModuleSizeMultiplyLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, LifeMultiplier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, UnknownData_SXSV, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeMultiplyLife, 0x0070);
		}

		// Class Engine.ParticleModuleSizeScale
		TEST_METHOD(Class__Engine__ParticleModuleSizeScale)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, SizeScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, UnknownData_GG8I, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScale, 0x0070);
		}

		// Class Engine.ParticleModuleSizeScaleBySpeed
		TEST_METHOD(Class__Engine__ParticleModuleSizeScaleBySpeed)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, SpeedScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, MaxScale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScaleBySpeed, 0x0040);
		}

		// Class Engine.ParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawnBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnBase, UnknownData_DSGU, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnBase, 0x0038);
		}

		// Class Engine.ParticleModuleSpawn
		TEST_METHOD(Class__Engine__ParticleModuleSpawn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, Rate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, RateScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, ParticleBurstMethod, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_3I71, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstList, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstScale, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawn, 0x00F8);
		}

		// Class Engine.ParticleModuleSpawnPerUnit
		TEST_METHOD(Class__Engine__ParticleModuleSpawnPerUnit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnitScalar, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_6HBY, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, SpawnPerUnit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_ELJV, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MovementTolerance, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MaxFrameDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_3R2K, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnPerUnit, 0x0088);
		}

		// Class Engine.ParticleModuleSubUVBase
		TEST_METHOD(Class__Engine__ParticleModuleSubUVBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVBase, 0x0030);
		}

		// Class Engine.ParticleModuleSubUV
		TEST_METHOD(Class__Engine__ParticleModuleSubUV)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, SubImageIndex, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, UnknownData_YTZS, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUV, 0x0070);
		}

		// Class Engine.ParticleModuleSubUVMovie
		TEST_METHOD(Class__Engine__ParticleModuleSubUVMovie)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_MSXN, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, FrameRate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, StartingFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_T7GE, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVMovie, 0x00B8);
		}

		// Class Engine.ParticleModuleTrailBase
		TEST_METHOD(Class__Engine__ParticleModuleTrailBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailBase, 0x0030);
		}

		// Class Engine.ParticleModuleTrailSource
		TEST_METHOD(Class__Engine__ParticleModuleTrailSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_48QI, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_1ZN6, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceStrength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_JQ50, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetCount, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetDefaults, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SelectionMethod, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_YJVA, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_B7DC, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailSource, 0x0098);
		}

		// Class Engine.ParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBase, 0x0030);
		}

		// Class Engine.ParticleModuleTypeDataAnimTrail
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataAnimTrail)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_X9ON, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TilingDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, DistanceTessellationStepSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TangentTessellationStepSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, WidthTessellationStepSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_8CMM, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataAnimTrail, 0x0048);
		}

		// Class Engine.ParticleModuleTypeDataBeam2
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBeam2)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BeamMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_KT42, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTile, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTileDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Sheets, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, MaxBeamCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Speed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, InterpolationPoints, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_L3D9, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UpVectorStepSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BranchParentName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_UAQV, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Distance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_LB5V, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperFactor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperScale, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_TTED, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBeam2, 0x0118);
		}

		// Class Engine.ParticleModuleTypeDataGpu
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataGpu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, EmitterInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, ResourceData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, CameraMotionBlurAmount, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, UnknownData_3EVX, 0x0404);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataGpu, 0x0410);
		}

		// Class Engine.ParticleModuleTypeDataMesh
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Mesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_OIX4, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, MeshAlignment, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_TTMA, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_B6OU, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Pitch, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Roll, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Yaw, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, RollPitchYawRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_1CSI, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, AxisLockOption, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_GUGO, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_ASPM, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingUpAxisOption, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingOption, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_896L, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_R0XZ, 0x009D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataMesh, 0x00A0);
		}

		// Class Engine.ParticleModuleTypeDataRibbon
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataRibbon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTessellationBetweenParticles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, SheetsPerTrail, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTrailCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxParticleInTrailCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_3YA3, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, RenderAxis, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_TD1E, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentSpawningScalar, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_463P, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TilingDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, DistanceTessellationStepSize, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_XDT2, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentTessellationScalar, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataRibbon, 0x0060);
		}

		// Class Engine.ParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldBase, 0x0030);
		}

		// Class Engine.ParticleModuleVectorFieldGlobal
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldGlobal)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_DJ4P, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldTightness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_4FL9, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldGlobal, 0x0040);
		}

		// Class Engine.ParticleModuleVectorFieldLocal
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldLocal)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, VectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeTranslation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeScale3D, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Intensity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Tightness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, UnknownData_QHL9, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldLocal, 0x0068);
		}

		// Class Engine.ParticleModuleVectorFieldRotation
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MinInitialRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MaxInitialRotation, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotation, 0x0048);
		}

		// Class Engine.ParticleModuleVectorFieldRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotationRate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, RotationRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, UnknownData_AQP2, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotationRate, 0x0040);
		}

		// Class Engine.ParticleModuleVectorFieldScale
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScale)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScale, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScale, 0x0038);
		}

		// Class Engine.ParticleModuleVectorFieldScaleOverLife
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScaleOverLife)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLife, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScaleOverLife, 0x0038);
		}

		// Class Engine.ParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityBase, UnknownData_ETZE, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityBase, 0x0038);
		}

		// Class Engine.ParticleModuleVelocity
		TEST_METHOD(Class__Engine__ParticleModuleVelocity)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocityRadial, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity, 0x00A8);
		}

		// Class Engine.ParticleModuleVelocity_Seeded
		TEST_METHOD(Class__Engine__ParticleModuleVelocity_Seeded)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity_Seeded, RandomSeedInfo, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity_Seeded, 0x00C8);
		}

		// Class Engine.ParticleModuleVelocityCone
		TEST_METHOD(Class__Engine__ParticleModuleVelocityCone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Angle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Velocity, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Direction, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, UnknownData_5KD0, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityCone, 0x00B8);
		}

		// Class Engine.ParticleModuleVelocityInheritParent
		TEST_METHOD(Class__Engine__ParticleModuleVelocityInheritParent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityInheritParent, Scale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityInheritParent, 0x0070);
		}

		// Class Engine.ParticleModuleVelocityOverLifetime
		TEST_METHOD(Class__Engine__ParticleModuleVelocityOverLifetime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, VelOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, UnknownData_WXYA, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityOverLifetime, 0x0078);
		}

		// Class Engine.ParticleModuleEventSendToGame
		TEST_METHOD(Class__Engine__ParticleModuleEventSendToGame)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventSendToGame, 0x0028);
		}

		// Class Engine.ParticleSystemReplay
		TEST_METHOD(Class__Engine__ParticleSystemReplay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, ClipIDNumber, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, UnknownData_DDVB, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemReplay, 0x0040);
		}

		// Class Engine.PhysicsSettings
		TEST_METHOD(Class__Engine__PhysicsSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultGravityZ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultTerminalVelocity, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultFluidFriction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableAsyncScene, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnable2DPhysics, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, LockedAxis, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, FrictionCombineMode, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxDepenetrationVelocity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxPhysicsDeltaTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubstepping, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_GAMQ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubstepDeltaTime, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubsteps, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, Server_MaxSubstepDeltaTime, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, Server_MaxSubsteps, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SyncSceneSmoothingFactor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, AsyncSceneSmoothingFactor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, InitialAverageFrameRate, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicalSurfaces, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettings, 0x0070);
		}

		// Class Engine.PhysicalMaterial
		TEST_METHOD(Class__Engine__PhysicalMaterial)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, FrictionCombineMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideFrictionCombineMode, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_DW26, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Restitution, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Density, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RaiseMassToPower, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, DestructibleDamageThresholdScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, PhysicalMaterialProperty, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SurfaceType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_D3R7, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, TireFrictionScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, TireFrictionScales, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_PR5H, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterial, 0x0078);
		}

		// Class Engine.PhysicalMaterialPropertyBase
		TEST_METHOD(Class__Engine__PhysicalMaterialPropertyBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialPropertyBase, 0x0028);
		}

		// Class Engine.PhysicsAsset
		TEST_METHOD(Class__Engine__PhysicsAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BodySetup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BoundsBodies, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ConstraintSetup, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_D1FY, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsAsset, 0x00F8);
		}

		// Class Engine.PhysicsCollisionHandler
		TEST_METHOD(Class__Engine__PhysicsCollisionHandler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactReFireDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, DefaultImpactSound, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, LastImpactSoundTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, UnknownData_E6TV, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsCollisionHandler, 0x0040);
		}

		// Class Engine.PhysicsConstraintTemplate
		TEST_METHOD(Class__Engine__PhysicsConstraintTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, JointName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ConstraintBone1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ConstraintBone2, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, Pos1, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, PriAxis1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, SecAxis1, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, Pos2, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, PriAxis2, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, SecAxis2, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_H6E8, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ProjectionLinearTolerance, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ProjectionAngularTolerance, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, LinearXMotion, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, LinearYMotion, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, LinearZMotion, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_5BGK, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, LinearLimitSize, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_BEQL, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, LinearLimitStiffness, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, LinearLimitDamping, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_HWO6, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, LinearBreakThreshold, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_QGP6, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, AngularSwing1Motion, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, AngularSwing2Motion, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, AngularTwistMotion, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_78XQ, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_35YB, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, Swing1LimitAngle, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, Swing2LimitAngle, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, TwistLimitAngle, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, SwingLimitStiffness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, SwingLimitDamping, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, TwistLimitStiffness, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, TwistLimitDamping, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_JNEA, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, AngularBreakThreshold, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultInstance, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintTemplate, 0x0240);
		}

		// Class Engine.PlatformInterfaceBase
		TEST_METHOD(Class__Engine__PlatformInterfaceBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceBase, AllDelegates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceBase, 0x0038);
		}

		// Class Engine.CloudStorageBase
		TEST_METHOD(Class__Engine__CloudStorageBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, LocalCloudFiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, UnknownData_VA4A, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCloudStorageBase, 0x0050);
		}

		// Class Engine.InGameAdManager
		TEST_METHOD(Class__Engine__InGameAdManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, UnknownData_IM58, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClickedBannerDelegates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClosedAdDelegates, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameAdManager, 0x0060);
		}

		// Class Engine.MicroTransactionBase
		TEST_METHOD(Class__Engine__MicroTransactionBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, AvailableProducts, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastError, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastErrorSolution, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMicroTransactionBase, 0x0068);
		}

		// Class Engine.TwitterIntegrationBase
		TEST_METHOD(Class__Engine__TwitterIntegrationBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwitterIntegrationBase, 0x0038);
		}

		// Class Engine.PlatformInterfaceWebResponse
		TEST_METHOD(Class__Engine__PlatformInterfaceWebResponse)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, OriginalURL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, ResponseCode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, Tag, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, StringResponse, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, BinaryResponse, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, UnknownData_YUTB, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceWebResponse, 0x00B0);
		}

		// Class Engine.ChildConnection
		TEST_METHOD(Class__Engine__ChildConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildConnection, Parent, 0x34318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildConnection, 0x34320);
		}

		// Class Engine.Polys
		TEST_METHOD(Class__Engine__Polys)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolys, UnknownData_N3OW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolys, 0x0040);
		}

		// Class Engine.ReflectionCaptureData
		TEST_METHOD(Class__Engine__ReflectionCaptureData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureData, ComponentName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureData, UnknownData_2NS1, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReflectionCaptureData, 0x0080);
		}

		// Class Engine.RendererSettings
		TEST_METHOD(Class__Engine__RendererSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_V6MF, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForLights, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForEarlyZPass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForCSMdepth, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_0ACB, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DistanceFieldPenumbraSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TessellationAdaptivePixelsPerTriangle, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_BIWM, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, CustomDepth, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_9H0W, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_7HVO, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAntiAliasing, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultBackBufferPixelFormat, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_QU9O, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_MW6Y, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ClearSceneMethod, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, EditorPrimitiveMSAA, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_AZZL, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, WireframeCullThreshold, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UIScaleRule, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_BWIB, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UIScaleCurve, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UIScaleCurveX, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererSettings, 0x0148);
		}

		// Class Engine.ReporterBase
		TEST_METHOD(Class__Engine__ReporterBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterBase, UnknownData_ENLM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterBase, 0x0030);
		}

		// Class Engine.ReporterGraph
		TEST_METHOD(Class__Engine__ReporterGraph)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterGraph, UnknownData_EC1Z, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterGraph, 0x00A0);
		}

		// Class Engine.ReverbEffect
		TEST_METHOD(Class__Engine__ReverbEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Density, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Diffusion, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, GainHF, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayHFRatio, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsGain, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsDelay, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateGain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateDelay, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, AirAbsorptionGainHF, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, RoomRolloffFactor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbEffect, 0x0058);
		}

		// Class Engine.Rig
		TEST_METHOD(Class__Engine__Rig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, TransformBases, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, Nodes, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URig, 0x0048);
		}

		// Class Engine.RuntimeMovieScenePlayerInterface
		TEST_METHOD(Class__Engine__RuntimeMovieScenePlayerInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeMovieScenePlayerInterface, 0x0028);
		}

		// Class Engine.SaveGameSummary
		TEST_METHOD(Class__Engine__SaveGameSummary)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSummary, BaseLevel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveGameSummary, Description, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGameSummary, 0x0040);
		}

		// Class Engine.SCS_Node
		TEST_METHOD(Class__Engine__SCS_Node)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentTemplate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, VariableName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, CategoryName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, AttachToName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOrVariableName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOwnerClassName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsParentComponentNative, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_1FYL, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ChildNodes, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, MetaDataArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsFalseRoot, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsNative, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_R25C, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, NativeComponentName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bVariableNameAutoGenerated, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_8NEL, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USCS_Node, 0x0098);
		}

		// Class Engine.Selection
		TEST_METHOD(Class__Engine__Selection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USelection, UnknownData_8T0Y, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelection, 0x0058);
		}

		// Class Engine.SimpleConstructionScript
		TEST_METHOD(Class__Engine__SimpleConstructionScript)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, RootNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, DefaultSceneRootNode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, RootNode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, ActorComponentNodes, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleConstructionScript, 0x0058);
		}

		// Class Engine.DestructibleMesh
		TEST_METHOD(Class__Engine__DestructibleMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, DefaultDestructibleParameters, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, DestructiblePhysicalMaterial, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, PhysicsSleepFamily, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, UnknownData_BCJ7, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, FractureEffects, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, BodySetup, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, UnknownData_HE3R, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleMesh, 0x0380);
		}

		// Class Engine.SkeletalMeshSocket
		TEST_METHOD(Class__Engine__SkeletalMeshSocket)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, BoneName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeLocation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, UnknownData_BCTT, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSocket, 0x0060);
		}

		// Class Engine.SkyLightData
		TEST_METHOD(Class__Engine__SkyLightData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightData, ComponentName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightData, UnknownData_YIC6, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyLightData, 0x00C8);
		}

		// Class Engine.SlateBrushAsset
		TEST_METHOD(Class__Engine__SlateBrushAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateBrushAsset, Brush, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBrushAsset, 0x00A0);
		}

		// Class Engine.SoundBase
		TEST_METHOD(Class__Engine__SoundBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundClassObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_CQD2, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, MaxConcurrentResolutionRule, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_0UHV, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, MaxConcurrentPlayCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Duration, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AttenuationSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_9G9R, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundBase, 0x0058);
		}

		// Class Engine.DialogueSoundWaveProxy
		TEST_METHOD(Class__Engine__DialogueSoundWaveProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueSoundWaveProxy, UnknownData_W1D0, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueSoundWaveProxy, 0x0070);
		}

		// Class Engine.SoundCue
		TEST_METHOD(Class__Engine__SoundCue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_6N10, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, FirstNode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, VolumeMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, PitchMultiplier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, AttenuationOverrides, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, SubtitleColorIndex, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_W2IE, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, Subtitles, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, LocalizedSpokenTexts, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, AnimTexture, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_RXQZ, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCue, 0x00E0);
		}

		// Class Engine.SoundGroups
		TEST_METHOD(Class__Engine__SoundGroups)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, SoundGroupProfiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, UnknownData_92G0, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundGroups, 0x0088);
		}

		// Class Engine.SoundWave
		TEST_METHOD(Class__Engine__SoundWave)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CompressionQuality, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_FMPO, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, StreamingPriority, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_EA4W, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SoundGroup, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_93EI, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SpokenText, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, LocalizedSpokenTexts, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SubtitleColorIndex, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_3J2H, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Volume, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Pitch, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, NumChannels, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRate, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, RawPCMDataSize, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Subtitles, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, LocalizedSubtitles, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_47OT, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWave, 0x0200);
		}

		// Class Engine.SoundWaveStreaming
		TEST_METHOD(Class__Engine__SoundWaveStreaming)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWaveStreaming, UnknownData_OF3C, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWaveStreaming, 0x0218);
		}

		// Class Engine.SoundClass
		TEST_METHOD(Class__Engine__SoundClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, UnknownData_EXB7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ChildClasses, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, PassiveSoundMixModifiers, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ChildClassNames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ParentClass, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundClass, 0x0088);
		}

		// Class Engine.SoundMix
		TEST_METHOD(Class__Engine__SoundMix)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, UnknownData_0B5N, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQPriority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, SoundClassEffects, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, InitialDelay, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeInTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, Duration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeOutTime, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundMix, 0x0078);
		}

		// Class Engine.SoundNodeAttenuation
		TEST_METHOD(Class__Engine__SoundNodeAttenuation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationOverrides, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_M6U6, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, dBAttenuationAtMax, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, DistanceAlgorithm, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, DistanceType, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_7YYR, 0x007E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, RadiusMin, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, RadiusMax, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_ULAG, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, LPFRadiusMin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, LPFRadiusMax, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_OVSI, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAttenuation, 0x0098);
		}

		// Class Engine.SoundNodeBranch
		TEST_METHOD(Class__Engine__SoundNodeBranch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeBranch, BoolParameterName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeBranch, 0x0040);
		}

		// Class Engine.SoundNodeConcatenator
		TEST_METHOD(Class__Engine__SoundNodeConcatenator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeConcatenator, InputVolume, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeConcatenator, 0x0048);
		}

		// Class Engine.SoundNodeDelay
		TEST_METHOD(Class__Engine__SoundNodeDelay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMin, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMax, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDelay, 0x0040);
		}

		// Class Engine.SoundNodeDeprecated
		TEST_METHOD(Class__Engine__SoundNodeDeprecated)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDeprecated, 0x0038);
		}

		// Class Engine.SoundNodeAmbient
		TEST_METHOD(Class__Engine__SoundNodeAmbient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAmbient, UnknownData_EKH4, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAmbient, dBAttenuationAtMax, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAmbient, DistanceModel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAmbient, UnknownData_CL27, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAmbient, RadiusMin, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAmbient, RadiusMax, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAmbient, UnknownData_6HR9, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAmbient, LPFRadiusMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAmbient, LPFRadiusMax, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAmbient, PitchMin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAmbient, PitchMax, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAmbient, VolumeMin, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAmbient, VolumeMax, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAmbient, SoundSlots, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAmbient, 0x0078);
		}

		// Class Engine.SoundNodeAmbientNonLoop
		TEST_METHOD(Class__Engine__SoundNodeAmbientNonLoop)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAmbientNonLoop, DelayMin, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAmbientNonLoop, DelayMax, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAmbientNonLoop, 0x0080);
		}

		// Class Engine.SoundNodeAmbientNonLoopToggle
		TEST_METHOD(Class__Engine__SoundNodeAmbientNonLoopToggle)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAmbientNonLoopToggle, 0x0080);
		}

		// Class Engine.SoundNodeConcatenatorRadio
		TEST_METHOD(Class__Engine__SoundNodeConcatenatorRadio)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeConcatenatorRadio, 0x0038);
		}

		// Class Engine.SoundNodeWave
		TEST_METHOD(Class__Engine__SoundNodeWave)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWave, CompressionQuality, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWave, UnknownData_N9BA, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWave, SpokenText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWave, Volume, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWave, Pitch, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWave, Duration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWave, NumChannels, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWave, SampleRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWave, RawPCMDataSize, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWave, Subtitles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWave, UnknownData_16IS, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWave, LocalizedSubtitles, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWave, UnknownData_0XEM, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWave, 0x00D8);
		}

		// Class Engine.SoundNodeDialoguePlayer
		TEST_METHOD(Class__Engine__SoundNodeDialoguePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, DialogueWaveParameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, UnknownData_8YAZ, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDialoguePlayer, 0x0060);
		}

		// Class Engine.SoundNodeDistanceCrossFade
		TEST_METHOD(Class__Engine__SoundNodeDistanceCrossFade)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDistanceCrossFade, CrossFadeInput, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDistanceCrossFade, 0x0048);
		}

		// Class Engine.SoundNodeParamCrossFade
		TEST_METHOD(Class__Engine__SoundNodeParamCrossFade)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeParamCrossFade, ParamName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeParamCrossFade, 0x0050);
		}

		// Class Engine.SoundNodeDoppler
		TEST_METHOD(Class__Engine__SoundNodeDoppler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, DopplerIntensity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_SG5R, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDoppler, 0x0040);
		}

		// Class Engine.SoundNodeEnveloper
		TEST_METHOD(Class__Engine__SoundNodeEnveloper)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopStart, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopEnd, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, DurationAfterLoop, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopCount, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, UnknownData_GE20, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeInterpCurve, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchInterpCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchCurve, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMin, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMax, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMin, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMax, 0x014C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeEnveloper, 0x0150);
		}

		// Class Engine.SoundNodeGroupControl
		TEST_METHOD(Class__Engine__SoundNodeGroupControl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeGroupControl, GroupSizes, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeGroupControl, 0x0048);
		}

		// Class Engine.SoundNodeLooping
		TEST_METHOD(Class__Engine__SoundNodeLooping)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeLooping, 0x0038);
		}

		// Class Engine.SoundNodeMature
		TEST_METHOD(Class__Engine__SoundNodeMature)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMature, 0x0038);
		}

		// Class Engine.SoundNodeMixer
		TEST_METHOD(Class__Engine__SoundNodeMixer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeMixer, InputVolume, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMixer, 0x0048);
		}

		// Class Engine.SoundNodeModulator
		TEST_METHOD(Class__Engine__SoundNodeModulator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMin, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMax, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMax, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulator, 0x0048);
		}

		// Class Engine.SoundNodeModulatorContinuous
		TEST_METHOD(Class__Engine__SoundNodeModulatorContinuous)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, PitchModulationParams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, VolumeModulationParams, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, PitchModulation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, VolumeModulation, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulatorContinuous, 0x00E8);
		}

		// Class Engine.SoundNodeOscillator
		TEST_METHOD(Class__Engine__SoundNodeOscillator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_X50Q, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMin, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMax, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMin, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMax, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMin, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMax, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMin, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMax, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_RV97, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeOscillator, 0x0060);
		}

		// Class Engine.SoundNodeRandom
		TEST_METHOD(Class__Engine__SoundNodeRandom)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, Weights, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, PreselectAtLevelLoad, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_AEXK, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, HasBeenUsed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, NumRandomUsed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_QT78, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeRandom, 0x0068);
		}

		// Class Engine.SoundNodeSoundClass
		TEST_METHOD(Class__Engine__SoundNodeSoundClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, SoundClassOverride, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSoundClass, 0x0040);
		}

		// Class Engine.SoundNodeSwitch
		TEST_METHOD(Class__Engine__SoundNodeSwitch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSwitch, IntParameterName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSwitch, 0x0040);
		}

		// Class Engine.SoundNodeWaveParam
		TEST_METHOD(Class__Engine__SoundNodeWaveParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWaveParam, WaveParameterName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWaveParam, 0x0040);
		}

		// Class Engine.SoundNodeWavePlayer
		TEST_METHOD(Class__Engine__SoundNodeWavePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWave, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_6ZPE, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWavePlayer, 0x0048);
		}

		// Class Engine.StaticMesh
		TEST_METHOD(Class__Engine__StaticMesh)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_DDKF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_UP8L, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, Materials, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_6OLO, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapResolution, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapCoordinateIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_M0F1, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, BodySetup, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_J6OS, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DistanceFieldTwoSidedOverride, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_KQRA, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_HD7X, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DistanceFieldRuntimeQuality, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_Q8A6, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, StreamingDistanceMultiplier, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LpvBiasMultiplier, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_85C5, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, Sockets, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_1HA7, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ElementToIgnoreForTexFactor, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_QB4X, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, AssetUserData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NavCollision, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, CustomTag, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMesh, 0x0148);
		}

		// Class Engine.StaticMeshSocket
		TEST_METHOD(Class__Engine__StaticMeshSocket)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, UnknownData_783A, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, Tag, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSocket, 0x0068);
		}

		// Class Engine.SubsurfaceProfile
		TEST_METHOD(Class__Engine__SubsurfaceProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, Settings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, UnknownData_TH95, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsurfaceProfile, 0x0050);
		}

		// Class Engine.TextPropertyTestObject
		TEST_METHOD(Class__Engine__TextPropertyTestObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, DefaultedText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UnknownData_10JI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UndefaultedText, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UnknownData_X57E, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, TransientText, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UnknownData_5MT6, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextPropertyTestObject, 0x00A0);
		}

		// Class Engine.Texture2D
		TEST_METHOD(Class__Engine__Texture2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, RequestedMips, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ResidentMips, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, StreamingIndex, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, FirstResourceMemMip, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_JOXP, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, SizeX, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, SizeY, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, OriginalSizeX, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, OriginalSizeY, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ImportedSize, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ForceMipLevelsToBeResidentTimestamp, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_UXU2, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, Format, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressX, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressY, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_78SD, 0x00E7);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2D, 0x0160);
		}

		// Class Engine.LightMapTexture2D
		TEST_METHOD(Class__Engine__LightMapTexture2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapTexture2D, UnknownData_VS5T, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapTexture2D, 0x0168);
		}

		// Class Engine.ShadowMapTexture2D
		TEST_METHOD(Class__Engine__ShadowMapTexture2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, ShadowmapFlags, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, UnknownData_LBC8, 0x0161);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShadowMapTexture2D, 0x0168);
		}

		// Class Engine.TextureLightProfile
		TEST_METHOD(Class__Engine__TextureLightProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, Brightness, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, TextureMultiplier, 0x0164);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLightProfile, 0x0168);
		}

		// Class Engine.Texture2DDynamic
		TEST_METHOD(Class__Engine__Texture2DDynamic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_YEM5, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, Format, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_E0U8, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DDynamic, 0x00C8);
		}

		// Class Engine.TextureCube
		TEST_METHOD(Class__Engine__TextureCube)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureCube, UnknownData_2NA0, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureCube, 0x0108);
		}

		// Class Engine.CanvasRenderTarget2D
		TEST_METHOD(Class__Engine__CanvasRenderTarget2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, OnCanvasRenderTargetUpdate, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasRenderTarget2D, 0x0108);
		}

		// Class Engine.TextureRenderTargetCube
		TEST_METHOD(Class__Engine__TextureRenderTargetCube)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, SizeX, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, ClearColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, OverrideFormat, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, UnknownData_3GTO, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, UnknownData_8W4D, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetCube, 0x00D8);
		}

		// Class Engine.ThumbnailInfo
		TEST_METHOD(Class__Engine__ThumbnailInfo)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThumbnailInfo, 0x0028);
		}

		// Class Engine.TimelineTemplate
		TEST_METHOD(Class__Engine__TimelineTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LengthMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_SSB4, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_EJS6, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, EventTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FloatTracks, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VectorTracks, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LinearColorTracks, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, MetaDataArray, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineTemplate, 0x0098);
		}

		// Class Engine.TouchInterface
		TEST_METHOD(Class__Engine__TouchInterface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, Controls, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActiveOpacity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, InactiveOpacity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilDeactive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilReset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActivationDelay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, bPreventRecenter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_WVNW, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, StartupDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_107H, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTouchInterface, 0x0058);
		}

		// Class Engine.UserDefinedEnum
		TEST_METHOD(Class__Engine__UserDefinedEnum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedEnum, DisplayNames, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedEnum, 0x0068);
		}

		// Class Engine.UserDefinedStruct
		TEST_METHOD(Class__Engine__UserDefinedStruct)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedStruct, 0x00A8);
		}

		// Class Engine.VectorField
		TEST_METHOD(Class__Engine__VectorField)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Bounds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Intensity, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorField, 0x0048);
		}

		// Class Engine.VectorFieldAnimated
		TEST_METHOD(Class__Engine__VectorFieldAnimated)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, Texture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, ConstructionOp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_94XO, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeZ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FrameCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FramesPerSecond, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_G7YG, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseField, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseMax, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldAnimated, 0x0088);
		}

		// Class Engine.VectorFieldStatic
		TEST_METHOD(Class__Engine__VectorFieldStatic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, UnknownData_F4YX, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldStatic, 0x00A8);
		}

		// Class Engine.VehicleWheel
		TEST_METHOD(Class__Engine__VehicleWheel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, CollisionMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bDontCreateShape, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAutoAdjustCollisionSize, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_092R, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Offset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeRadius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeWidth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Mass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DampingRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SteerAngle, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAffectedByHandbrake, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_MQ5I, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffMaxLoad, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffValue, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LongStiffValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionForceOffset, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxRaise, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxDrop, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionNaturalFrequency, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionDampingRatio, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxBrakeTorque, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxHandBrakeTorque, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, VehicleSim, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, WheelIndex, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongSlip, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatSlip, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugNormalizedTireLoad, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugWheelTorque, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongForce, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatForce, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Location, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, OldLocation, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Velocity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_1T02, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleWheel, 0x00E0);
		}

		// Class Engine.VertexAnimBase
		TEST_METHOD(Class__Engine__VertexAnimBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVertexAnimBase, BaseSkelMesh, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVertexAnimBase, 0x0030);
		}

		// Class Engine.MorphTarget
		TEST_METHOD(Class__Engine__MorphTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, UnknownData_P98B, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMorphTarget, 0x0040);
		}

		// Class Engine.VertexAnimation
		TEST_METHOD(Class__Engine__VertexAnimation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVertexAnimation, NumAnimatedVerts, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVertexAnimation, UnknownData_L3BV, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVertexAnimation, 0x0048);
		}

		// Class Engine.WorldComposition
		TEST_METHOD(Class__Engine__WorldComposition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_TX9Y, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreaming, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreamingTimeThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TileInitialState, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TileVolumes, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, LastTimeSwitchedContainedVolumes, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_R9UQ, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldComposition, 0x0090);
		}

		// Class CoreUObject.Object
		TEST_METHOD(Class__CoreUObject__Object)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, VfTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, InternalIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Class, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Outer, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObject, 0x0028);
		}

		// Class CoreUObject.Interface
		TEST_METHOD(Class__CoreUObject__Interface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface, 0x0028);
		}

		// Class CoreUObject.GCObjectReferencer
		TEST_METHOD(Class__CoreUObject__GCObjectReferencer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGCObjectReferencer, UnknownData_P22P, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCObjectReferencer, 0x0038);
		}

		// Class CoreUObject.TextBuffer
		TEST_METHOD(Class__CoreUObject__TextBuffer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBuffer, UnknownData_OA50, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBuffer, 0x0050);
		}

		// Class CoreUObject.Field
		TEST_METHOD(Class__CoreUObject__Field)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UField, Next, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UField, 0x0030);
		}

		// Class CoreUObject.Struct
		TEST_METHOD(Class__CoreUObject__Struct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, SuperField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Children, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertySize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, pad_72MWYW4G7J, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Script, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, MinAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, pad_LEEPXHYL2O, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertyLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, RefLink, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, DestructorLink, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PostConstructLink, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ScriptAndPropertyObjectReferences, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStruct, 0x0090);
		}

		// Class CoreUObject.ScriptStruct
		TEST_METHOD(Class__CoreUObject__ScriptStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptStruct, UnknownData_2Y1L, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptStruct, 0x00A8);
		}

		// Class CoreUObject.Package
		TEST_METHOD(Class__CoreUObject__Package)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackage, UnknownData_ZH4P, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackage, 0x0090);
		}

		// Class CoreUObject.Class
		TEST_METHOD(Class__CoreUObject__Class)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClass, UnknownData_9L3D, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClass, 0x0188);
		}

		// Class CoreUObject.Function
		TEST_METHOD(Class__CoreUObject__Function)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FunctionFlags, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RepOffset, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_Y15EDBVRVG, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_9TSJD3ZMVJ, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ParmsSize, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ReturnValueOffset, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCId, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCResponseId, 0x009E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FirstPropertyToInit, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, Func, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunction, 0x00B0);
		}

		// Class CoreUObject.PackageMap
		TEST_METHOD(Class__CoreUObject__PackageMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMap, UnknownData_LF6R, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMap, 0x0040);
		}

		// Class CoreUObject.Enum
		TEST_METHOD(Class__CoreUObject__Enum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnum, UnknownData_3I26, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnum, 0x0058);
		}

		// Class CoreUObject.Linker
		TEST_METHOD(Class__CoreUObject__Linker)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinker, UnknownData_HCHW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinker, 0x01C0);
		}

		// Class CoreUObject.LinkerLoad
		TEST_METHOD(Class__CoreUObject__LinkerLoad)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerLoad, UnknownData_YHOR, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerLoad, 0x0670);
		}

		// Class CoreUObject.LinkerSave
		TEST_METHOD(Class__CoreUObject__LinkerSave)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerSave, UnknownData_XE2E, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerSave, 0x02D8);
		}

		// Class CoreUObject.MetaData
		TEST_METHOD(Class__CoreUObject__MetaData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetaData, UnknownData_3BWX, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetaData, 0x0078);
		}

		// Class CoreUObject.ObjectRedirector
		TEST_METHOD(Class__CoreUObject__ObjectRedirector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRedirector, UnknownData_T43W, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectRedirector, 0x0030);
		}

		// Class CoreUObject.Property
		TEST_METHOD(Class__CoreUObject__Property)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProperty, UnknownData_DW2K, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProperty, 0x0070);
		}

		// Class CoreUObject.NumericProperty
		TEST_METHOD(Class__CoreUObject__NumericProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNumericProperty, 0x0070);
		}

		// Class CoreUObject.ArrayProperty
		TEST_METHOD(Class__CoreUObject__ArrayProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrayProperty, UnknownData_P80M, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrayProperty, 0x0078);
		}

		// Class CoreUObject.ObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__ObjectPropertyBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPropertyBase, UnknownData_B2FC, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPropertyBase, 0x0078);
		}

		// Class CoreUObject.AssetObjectProperty
		TEST_METHOD(Class__CoreUObject__AssetObjectProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetObjectProperty, 0x0078);
		}

		// Class CoreUObject.AssetClassProperty
		TEST_METHOD(Class__CoreUObject__AssetClassProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetClassProperty, UnknownData_6NC3, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetClassProperty, 0x0080);
		}

		// Class CoreUObject.BoolProperty
		TEST_METHOD(Class__CoreUObject__BoolProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoolProperty, UnknownData_XMC0, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolProperty, 0x0078);
		}

		// Class CoreUObject.ByteProperty
		TEST_METHOD(Class__CoreUObject__ByteProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UByteProperty, UnknownData_O28R, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UByteProperty, 0x0078);
		}

		// Class CoreUObject.ObjectProperty
		TEST_METHOD(Class__CoreUObject__ObjectProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectProperty, 0x0078);
		}

		// Class CoreUObject.ClassProperty
		TEST_METHOD(Class__CoreUObject__ClassProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassProperty, UnknownData_WY0J, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassProperty, 0x0080);
		}

		// Class CoreUObject.DelegateProperty
		TEST_METHOD(Class__CoreUObject__DelegateProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateProperty, 0x0070);
		}

		// Class CoreUObject.DoubleProperty
		TEST_METHOD(Class__CoreUObject__DoubleProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoubleProperty, 0x0070);
		}

		// Class CoreUObject.FloatProperty
		TEST_METHOD(Class__CoreUObject__FloatProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatProperty, 0x0070);
		}

		// Class CoreUObject.IntProperty
		TEST_METHOD(Class__CoreUObject__IntProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntProperty, 0x0070);
		}

		// Class CoreUObject.Int16Property
		TEST_METHOD(Class__CoreUObject__Int16Property)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt16Property, 0x0070);
		}

		// Class CoreUObject.Int64Property
		TEST_METHOD(Class__CoreUObject__Int64Property)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt64Property, 0x0070);
		}

		// Class CoreUObject.Int8Property
		TEST_METHOD(Class__CoreUObject__Int8Property)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt8Property, 0x0070);
		}

		// Class CoreUObject.InterfaceProperty
		TEST_METHOD(Class__CoreUObject__InterfaceProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterfaceProperty, UnknownData_KXYN, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterfaceProperty, 0x0078);
		}

		// Class CoreUObject.LazyObjectProperty
		TEST_METHOD(Class__CoreUObject__LazyObjectProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULazyObjectProperty, 0x0078);
		}

		// Class CoreUObject.MulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastDelegateProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMulticastDelegateProperty, UnknownData_6CGW, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegateProperty, 0x0078);
		}

		// Class CoreUObject.NameProperty
		TEST_METHOD(Class__CoreUObject__NameProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameProperty, 0x0070);
		}

		// Class CoreUObject.StrProperty
		TEST_METHOD(Class__CoreUObject__StrProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStrProperty, 0x0070);
		}

		// Class CoreUObject.StructProperty
		TEST_METHOD(Class__CoreUObject__StructProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructProperty, UnknownData_Z7UL, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructProperty, 0x0078);
		}

		// Class CoreUObject.UInt16Property
		TEST_METHOD(Class__CoreUObject__UInt16Property)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt16Property, 0x0070);
		}

		// Class CoreUObject.UInt32Property
		TEST_METHOD(Class__CoreUObject__UInt32Property)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt32Property, 0x0070);
		}

		// Class CoreUObject.UInt64Property
		TEST_METHOD(Class__CoreUObject__UInt64Property)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt64Property, 0x0070);
		}

		// Class CoreUObject.WeakObjectProperty
		TEST_METHOD(Class__CoreUObject__WeakObjectProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeakObjectProperty, 0x0078);
		}

		// Class CoreUObject.TextProperty
		TEST_METHOD(Class__CoreUObject__TextProperty)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextProperty, 0x0070);
		}

		// Class MovieSceneCoreTypes.MovieScene3DTransformSection
		TEST_METHOD(Class__MovieSceneCoreTypes__MovieScene3DTransformSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Translation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Rotation, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Scale, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformSection, 0x03E0);
		}

		// Class MovieSceneCoreTypes.MovieScene3DTransformTrack
		TEST_METHOD(Class__MovieSceneCoreTypes__MovieScene3DTransformTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformTrack, 0x0058);
		}

		// Class MovieSceneCoreTypes.MovieSceneAnimationSection
		TEST_METHOD(Class__MovieSceneCoreTypes__MovieSceneAnimationSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAnimationSection, AnimSequence, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAnimationSection, AnimationStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAnimationSection, AnimationDilationFactor, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAnimationSection, 0x0048);
		}

		// Class MovieSceneCoreTypes.MovieSceneAnimationTrack
		TEST_METHOD(Class__MovieSceneCoreTypes__MovieSceneAnimationTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAnimationTrack, AnimationSections, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAnimationTrack, 0x0038);
		}

		// Class MovieSceneCoreTypes.MovieSceneAudioSection
		TEST_METHOD(Class__MovieSceneCoreTypes__MovieSceneAudioSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, Sound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioDilationFactor, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioSection, 0x0048);
		}

		// Class MovieSceneCoreTypes.MovieSceneAudioTrack
		TEST_METHOD(Class__MovieSceneCoreTypes__MovieSceneAudioTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, AudioSections, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioTrack, 0x0038);
		}

		// Class MovieSceneCoreTypes.MovieSceneBoolSection
		TEST_METHOD(Class__MovieSceneCoreTypes__MovieSceneBoolSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, BoolCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolSection, 0x00A0);
		}

		// Class MovieSceneCoreTypes.MovieSceneBoolTrack
		TEST_METHOD(Class__MovieSceneCoreTypes__MovieSceneBoolTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolTrack, 0x0058);
		}

		// Class MovieSceneCoreTypes.MovieSceneColorSection
		TEST_METHOD(Class__MovieSceneCoreTypes__MovieSceneColorSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, RedCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, GreenCurve, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, BlueCurve, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, AlphaCurve, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorSection, 0x01D8);
		}

		// Class MovieSceneCoreTypes.MovieSceneColorTrack
		TEST_METHOD(Class__MovieSceneCoreTypes__MovieSceneColorTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorTrack, 0x0058);
		}

		// Class MovieSceneCoreTypes.MovieSceneDirectorTrack
		TEST_METHOD(Class__MovieSceneCoreTypes__MovieSceneDirectorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneDirectorTrack, ShotSections, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneDirectorTrack, 0x0038);
		}

		// Class MovieSceneCoreTypes.MovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneCoreTypes__MovieSceneFloatSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, FloatCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatSection, 0x00A0);
		}

		// Class MovieSceneCoreTypes.MovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneCoreTypes__MovieSceneFloatTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatTrack, 0x0058);
		}

		// Class MovieSceneCoreTypes.MovieSceneParticleSection
		TEST_METHOD(Class__MovieSceneCoreTypes__MovieSceneParticleSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleSection, KeyType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleSection, UnknownData_WFU8, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleSection, 0x0040);
		}

		// Class MovieSceneCoreTypes.MovieSceneParticleTrack
		TEST_METHOD(Class__MovieSceneCoreTypes__MovieSceneParticleTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, ParticleSections, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleTrack, 0x0038);
		}

		// Class MovieSceneCoreTypes.MovieSceneShotSection
		TEST_METHOD(Class__MovieSceneCoreTypes__MovieSceneShotSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneShotSection, CameraGuid, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneShotSection, Title, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneShotSection, UnknownData_6YGE, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneShotSection, 0x0070);
		}

		// Class MovieSceneCoreTypes.MovieSceneVectorSection
		TEST_METHOD(Class__MovieSceneCoreTypes__MovieSceneVectorSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, Curves, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, ChannelsUsed, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, UnknownData_3H39, 0x01DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorSection, 0x01E0);
		}

		// Class MovieSceneCoreTypes.MovieSceneVectorTrack
		TEST_METHOD(Class__MovieSceneCoreTypes__MovieSceneVectorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, NumChannelsUsed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_52RP, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorTrack, 0x0060);
		}

		// Class MovieSceneCoreTypes.SubMovieSceneSection
		TEST_METHOD(Class__MovieSceneCoreTypes__SubMovieSceneSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubMovieSceneSection, MovieScene, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubMovieSceneSection, MovieSceneStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubMovieSceneSection, MovieSceneTimeEndTime, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubMovieSceneSection, 0x0048);
		}

		// Class MovieSceneCoreTypes.SubMovieSceneTrack
		TEST_METHOD(Class__MovieSceneCoreTypes__SubMovieSceneTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USubMovieSceneTrack, SubMovieSceneSections, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubMovieSceneTrack, 0x0038);
		}

		// WidgetBlueprintGeneratedClass MainMenuUI.MainMenuUI_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MainMenuUI__MainMenuUI_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, FadeIn, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, FadeOut, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, Close, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, Open, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, CreditsButton, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, ExitButton, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, ExplorersPassButton, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, HelpButton, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, HostButton, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, Image_108, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, Image_152, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, Image_2403, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, Image_4094, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, Image_4113, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, Image_4121, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, Image_4129, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, LinuxBackgroundImage, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, ListSessionsButton, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, ListSessionsButtonBackground, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, OptionsButton, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, PatchNotesButton, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, ScorchedEarthStoreButton, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, TotalConversionImage, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, WebButton, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, SponsoredModsUIClass, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, MoviePlayer, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, AlternateCTAStyle, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, CallFunc_OwnsDLC_ReturnValue, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, UnknownData_KL5V, 0x09C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, CallFunc_GetGameMode_ReturnValue, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, K2Node_DynamicCast_AsShooterGame_Menu, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, K2Node_DynamicCast_CastSuccess, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, CallFunc_OwnsDLC_ReturnValue2, 0x09E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, UnknownData_UGFM, 0x09E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, CallFunc_GetMainMenuBackgroundTexture_ReturnValue, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, CallFunc_IsValid_ReturnValue, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, CallFunc_OwnsDLC_ReturnValue3, 0x09F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, UnknownData_ISY9, 0x09F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, CallFunc_Create_ReturnValue, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, CallFunc_OwnsDLC_ReturnValue4, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, CallFunc_OwnsDLC_ReturnValue5, 0x0A01);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, CallFunc_OwnsDLC_ReturnValue6, 0x0A02);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, CallFunc_BooleanAND_ReturnValue, 0x0A03);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, CallFunc_BooleanAND_ReturnValue2, 0x0A04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, CallFunc_OwnsDLC_ReturnValue7, 0x0A05);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuUI_C, CallFunc_OwnsDLC_ReturnValue8, 0x0A06);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuUI_C, 0x0A07);
		}

		// WidgetBlueprintGeneratedClass SponsoredModsUI.SponsoredModsUI_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__SponsoredModsUI__SponsoredModsUI_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Close, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Open, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Button_187, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Button_660, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Button_665, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Button_671, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Button_680, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Button_681, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Button_682, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Button_683, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Button_684, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Button_691, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Button_693, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Button_694, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Button_695, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, ButtonMod0, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, ButtonMod1, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, ButtonPanel, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, CloseButton, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Image_1, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Image_2, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Image_21, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Image_377, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, NewVar, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, bInit, 0x05D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, UnknownData_N2C0, 0x05D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, K2Node_CustomEvent_clickedWidget, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Temp_int_Variable, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, CallFunc_Add_IntInt_ReturnValue, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, CallFunc_Left_ReturnValue, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, CallFunc_NotEqual_StrStr_ReturnValue, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, UnknownData_RD2Z, 0x05F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, CallFunc_Concat_StrStr_ReturnValue, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, Temp_int_Variable2, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, CallFunc_Add_IntInt_ReturnValue2, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, K2Node_Event_MyGeometry, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, K2Node_Event_InDeltaTime, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, CallFunc_GetChildAt_ReturnValue, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, K2Node_CreateDelegate_OutputDelegate, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, K2Node_DynamicCast_AsButton, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, K2Node_DynamicCast_CastSuccess, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, UnknownData_57GW, 0x0671);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, CallFunc_GetChildAt_ReturnValue2, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, K2Node_DynamicCast_AsButton2, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, K2Node_DynamicCast2_CastSuccess, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, CallFunc_IsWorkshopIDSubscribed_ReturnValue, 0x0689);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, CallFunc_Not_PreBool_ReturnValue, 0x068A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, UnknownData_2BPU, 0x068B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, CallFunc_GetChildrenCount_ReturnValue, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, CallFunc_Subtract_IntInt_ReturnValue, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, CallFunc_LessEqual_IntInt_ReturnValue, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::USponsoredModsUI_C, CallFunc_LessEqual_IntInt_ReturnValue2, 0x0695);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USponsoredModsUI_C, 0x0696);
		}

		// Class UMG.Visual
		TEST_METHOD(Class__UMG__Visual)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisual, 0x0028);
		}

		// Class UMG.Widget
		TEST_METHOD(Class__UMG__Widget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bIsVariable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bCreatedByConstructionScript, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_P1NW, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Slot, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bIsEnabled, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_ZUQJ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, CustomData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bIsEnabledDelegate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipText, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_F34V, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipTextDelegate, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bUseCustomTooltip, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, CustomToolTipHorizontalAlignment, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, CustomToolTipVerticalAlignment, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, CustomToolTipOrientation, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, GamepadSelectClosestDistanceMultiplier, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bDisableAxisOrientedSweepTestOnMe, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_JWDS, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, CustomToolTipBlueprintOverride, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, CustomToolTipPadding, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, CustomToolTipString, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_YGBR, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Visiblity, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_BZ9V, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, VisiblityDelegate, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Cursor, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_JNJI, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, CursorDelegate, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransform, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransformPivot, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Highlightable, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bDontRenderHighlight, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bUseWindowClippingForHighlight, 0x011E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bPrimalSetupSpecialAdjacents, 0x011F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, AdjacentUpName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, AdjacentDownName, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, AdjacentRightName, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, AdjacentLeftName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_84OV, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bDesignTime, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_0OBI, 0x0181);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget, 0x0188);
		}

		// Class UMG.UserWidget
		TEST_METHOD(Class__UMG__UserWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, SceneStackPriority, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, bSupportsKeyboardFocus, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_HHMU, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, DPIScaler, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_6GAC, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Components, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, WidgetTree, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ActiveSequencePlayers, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, StoppedSequencePlayers, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_1MKP, 0x01D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserWidget, 0x0240);
		}

		// Class UMG.PanelWidget
		TEST_METHOD(Class__UMG__PanelWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, Slots, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, ClipChildren, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, UseScaledClipForChildren, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, bCanNavigateToDifferentPanel, 0x019A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, bHighlightInsteadOfChild, 0x019B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, UnknownData_GU3W, 0x019C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelWidget, 0x01A0);
		}

		// Class UMG.ContentWidget
		TEST_METHOD(Class__UMG__ContentWidget)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContentWidget, 0x01A0);
		}

		// Class UMG.Button
		TEST_METHOD(Class__UMG__Button)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, Style, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, WidgetStyle, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, bUseDisabledStyle, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_28UL, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ColorAndOpacity, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, BackgroundColor, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ClickMethod, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, TouchMethod, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_35T1, 0x0416);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_4HXQ, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnClicked, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnClickedObject, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnSecondaryClicked, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnSecondaryClickedObject, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnGamepadClicked, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnGamepadClickedObject, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_GR6Z, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton, 0x0490);
		}

		// Class UMG.ScrollBox
		TEST_METHOD(Class__UMG__ScrollBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetStyle, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetBarStyle, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Style, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, BarStyle, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Orientation, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_2CEY, 0x05F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NumPreviewWidgets, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NumWidgetsBeforeWrapping, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetSize, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetPadding, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetHorizontalAlignment, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetVerticalAlignment, 0x0615);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UseWidgetPaddingAsMargin, 0x0616);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_HPSQ, 0x0617);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetMargin, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bGamepadMovementMovesScrollBox, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bPrimalAllowRightSpecialStickScroll, 0x0629);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_36LG, 0x062A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBox, 0x0640);
		}

		// Class UMG.Border
		TEST_METHOD(Class__UMG__Border)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacityDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Padding, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, HorizontalAlignment, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, VerticalAlignment, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_1HG7, 0x01D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Background, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BackgroundDelegate, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColor, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColorDelegate, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, bShowEffectWhenDisabled, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_IEWJ, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonDownEvent, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonUpEvent, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseMoveEvent, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseDoubleClickEvent, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_57HH, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Brush, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorder, 0x02E0);
		}

		// Class UMG.EditableText
		TEST_METHOD(Class__UMG__EditableText)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Text, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_R6LY, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, TextDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintText, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_S1UT, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintTextDelegate, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, WidgetStyle, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Style, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageSelected, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageSelectionTarget, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageComposing, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, CaretImage, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Font, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ColorAndOpacity, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsReadOnly, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsPassword, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_B6D9, 0x049A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, MinimumDesiredWidth, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsCaretMovedWhenGainFocus, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextWhenFocused, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, RevertTextOnEscape, 0x04A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ClearKeyboardFocusOnCommit, 0x04A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextOnCommit, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_TO3J, 0x04A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextChanged, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextCommitted, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_5ZDK, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableText, 0x04D8);
		}

		// Class UMG.DragDropOperation
		TEST_METHOD(Class__UMG__DragDropOperation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Tag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Payload, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, DefaultDragVisual, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDrop, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragCancelled, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragged, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDragDropOperation, 0x0078);
		}

		// Class UMG.MovieScene2DTransformSection
		TEST_METHOD(Class__UMG__MovieScene2DTransformSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Translation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Rotation, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Scale, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Shear, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformSection, 0x0310);
		}

		// Class UMG.MovieScene2DTransformTrack
		TEST_METHOD(Class__UMG__MovieScene2DTransformTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformTrack, 0x0058);
		}

		// Class UMG.MovieSceneMarginSection
		TEST_METHOD(Class__UMG__MovieSceneMarginSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, TopCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, LeftCurve, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, RightCurve, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, BottomCurve, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginSection, 0x01D8);
		}

		// Class UMG.MovieSceneMarginTrack
		TEST_METHOD(Class__UMG__MovieSceneMarginTrack)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginTrack, 0x0058);
		}

		// Class UMG.NamedSlotInterface
		TEST_METHOD(Class__UMG__NamedSlotInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlotInterface, 0x0028);
		}

		// Class UMG.SlateBlueprintLibrary
		TEST_METHOD(Class__UMG__SlateBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBlueprintLibrary, 0x0028);
		}

		// Class UMG.UMGSequencePlayer
		TEST_METHOD(Class__UMG__UMGSequencePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_L1TN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, Animation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, RuntimeBindings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_X34L, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequencePlayer, 0x0090);
		}

		// Class UMG.PanelSlot
		TEST_METHOD(Class__UMG__PanelSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Parent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Content, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelSlot, 0x0038);
		}

		// Class UMG.BorderSlot
		TEST_METHOD(Class__UMG__BorderSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, UnknownData_PBWC, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorderSlot, 0x0060);
		}

		// Class UMG.ButtonSlot
		TEST_METHOD(Class__UMG__ButtonSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, UnknownData_GU70, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonSlot, 0x0060);
		}

		// Class UMG.CanvasPanelSlot
		TEST_METHOD(Class__UMG__CanvasPanelSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, LayoutData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, bAutoSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_49ZW, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, ZOrder, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_YYRJ, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanelSlot, 0x0070);
		}

		// Class UMG.GridSlot
		TEST_METHOD(Class__UMG__GridSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, HorizontalAlignment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, VerticalAlignment, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_YMMB, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Row, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, RowSpan, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Column, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, ColumnSpan, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Layer, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Nudge, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_J348, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridSlot, 0x0060);
		}

		// Class UMG.HorizontalBoxSlot
		TEST_METHOD(Class__UMG__HorizontalBoxSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_C6A6, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBoxSlot, 0x0060);
		}

		// Class UMG.OverlaySlot
		TEST_METHOD(Class__UMG__OverlaySlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_22ER, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlaySlot, 0x0058);
		}

		// Class UMG.ScaleBoxSlot
		TEST_METHOD(Class__UMG__ScaleBoxSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, UnknownData_LZDI, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBoxSlot, 0x0060);
		}

		// Class UMG.ScrollBoxSlot
		TEST_METHOD(Class__UMG__ScrollBoxSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, UnknownData_SDDD, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxSlot, 0x0058);
		}

		// Class UMG.SizeBoxSlot
		TEST_METHOD(Class__UMG__SizeBoxSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_AIWK, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBoxSlot, 0x0060);
		}

		// Class UMG.UniformGridSlot
		TEST_METHOD(Class__UMG__UniformGridSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, HorizontalAlignment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, VerticalAlignment, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_FTC7, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Row, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Column, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_SD70, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridSlot, 0x0050);
		}

		// Class UMG.VerticalBoxSlot
		TEST_METHOD(Class__UMG__VerticalBoxSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_EOJM, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBoxSlot, 0x0060);
		}

		// Class UMG.WidgetSwitcherSlot
		TEST_METHOD(Class__UMG__WidgetSwitcherSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_7AY2, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcherSlot, 0x0058);
		}

		// Class UMG.CircularThrobber
		TEST_METHOD(Class__UMG__CircularThrobber)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, NumberOfPieces, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Period, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Radius, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_I8J0, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, PieceImage, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Image, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_720E, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularThrobber, 0x0228);
		}

		// Class UMG.ComboBox
		TEST_METHOD(Class__UMG__ComboBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, Items, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, OnGenerateWidgetEvent, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, UnknownData_94VP, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBox, 0x01B8);
		}

		// Class UMG.ComboBoxString
		TEST_METHOD(Class__UMG__ComboBoxString)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, WidgetStyle, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, Font, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, TextColorAndOpacity, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ForegroundColor, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, DefaultOptions, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, SelectedOption, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ContentPadding, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, MaxListHeight, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, HasDownArrow, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_6R0M, 0x05C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnGenerateWidgetEvent, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnSelectionChanged, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnOpening, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_SXXK, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxString, 0x0638);
		}

		// Class UMG.EditableTextBox
		TEST_METHOD(Class__UMG__EditableTextBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, WidgetStyle, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Style, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Text, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_ULRH, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, TextDelegate, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintText, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_0ANE, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintTextDelegate, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Font, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ForegroundColor, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, BackgroundColor, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ReadOnlyForegroundColor, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsReadOnly, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsPassword, 0x0761);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_A8EQ, 0x0762);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, MinimumDesiredWidth, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Padding, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsCaretMovedWhenGainFocus, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextWhenFocused, 0x0779);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, RevertTextOnEscape, 0x077A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ClearKeyboardFocusOnCommit, 0x077B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextOnCommit, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ShouldHandleEscape, 0x077D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_12XS, 0x077E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextChanged, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextCommitted, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_B2PM, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBox, 0x07B0);
		}

		// Class UMG.Image
		TEST_METHOD(Class__UMG__Image)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, Image, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, Brush, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, BrushDelegate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacity, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacityDelegate, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, EnableDefaultDisabledEffect, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_MZVU, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, OnMouseButtonDownEvent, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_CVA6, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImage, 0x0260);
		}

		// Class UMG.MultiLineEditableText
		TEST_METHOD(Class__UMG__MultiLineEditableText)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, WidgetStyle, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Text, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_FGB4, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Justification, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, bAutoWrapText, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_I4R0, 0x02CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, WrapTextAt, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Font, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextChanged, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextCommitted, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_J415, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableText, 0x0320);
		}

		// Class UMG.MultiLineEditableTextBox
		TEST_METHOD(Class__UMG__MultiLineEditableTextBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, WidgetStyle, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, TextStyle, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Style, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Text, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_CE4U, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Justification, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, bAutoWrapText, 0x07E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_8LM1, 0x07E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, WrapTextAt, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_4QJZ, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Font, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ForegroundColor, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, BackgroundColor, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ReadOnlyForegroundColor, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextChanged, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextCommitted, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_CRCF, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableTextBox, 0x0878);
		}

		// Class UMG.NativeWidgetHost
		TEST_METHOD(Class__UMG__NativeWidgetHost)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeWidgetHost, UnknownData_03TT, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeWidgetHost, 0x0198);
		}

		// Class UMG.CanvasPanel
		TEST_METHOD(Class__UMG__CanvasPanel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanel, ColorAndOpacity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanel, ColorAndOpacityDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanel, UnknownData_SAXX, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanel, 0x01D8);
		}

		// Class UMG.CheckBox
		TEST_METHOD(Class__UMG__CheckBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, WidgetStyle, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Style, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedImage, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedHoveredImage, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedPressedImage, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedImage, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedHoveredImage, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedPressedImage, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedImage, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedHoveredImage, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedPressedImage, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedState, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_7JDF, 0x06F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedStateDelegate, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, HorizontalAlignment, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_KINC, 0x070D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Padding, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, BorderBackgroundColor, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, OnCheckStateChanged, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_P9U3, 0x0758);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBox, 0x0768);
		}

		// Class UMG.MenuAnchor
		TEST_METHOD(Class__UMG__MenuAnchor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, IgnoreClicksOutside, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_E05Y, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, MenuClass, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetMenuContentEvent, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnIsOpenChanged, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, Placement, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_7ZVA, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, Padding, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_PWEH, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, CurrentMenuContent, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuAnchor, 0x01F8);
		}

		// Class UMG.ScaleBox
		TEST_METHOD(Class__UMG__ScaleBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, StretchDirection, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, Stretch, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_DYGV, 0x01A2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBox, 0x01B8);
		}

		// Class UMG.SizeBox
		TEST_METHOD(Class__UMG__SizeBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_FNG3, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, WidthOverride, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, HeightOverride, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredWidth, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredHeight, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredWidth, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredHeight, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_9FF1, 0x01BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBox, 0x01D0);
		}

		// Class UMG.Viewport
		TEST_METHOD(Class__UMG__Viewport)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, BackgroundColor, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, UnknownData_RS8H, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewport, 0x01D0);
		}

		// Class UMG.GridPanel
		TEST_METHOD(Class__UMG__GridPanel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, ColumnFill, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, RowFill, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, UnknownData_CKVM, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPanel, 0x01D0);
		}

		// Class UMG.HorizontalBox
		TEST_METHOD(Class__UMG__HorizontalBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBox, UnknownData_I4ND, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBox, 0x01B0);
		}

		// Class UMG.Overlay
		TEST_METHOD(Class__UMG__Overlay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlay, UnknownData_TB60, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlay, 0x01B0);
		}

		// Class UMG.ScrollBar
		TEST_METHOD(Class__UMG__ScrollBar)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, WidgetStyle, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Style, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbar, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Orientation, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_GWLB, 0x040A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Thickness, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_9AMB, 0x0414);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBar, 0x0428);
		}

		// Class UMG.UniformGridPanel
		TEST_METHOD(Class__UMG__UniformGridPanel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, SlotPadding, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotWidth, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotHeight, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, UnknownData_YMHM, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridPanel, 0x01C8);
		}

		// Class UMG.VerticalBox
		TEST_METHOD(Class__UMG__VerticalBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBox, UnknownData_RTQJ, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBox, 0x01B0);
		}

		// Class UMG.WidgetSwitcher
		TEST_METHOD(Class__UMG__WidgetSwitcher)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, ActiveWidgetIndex, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, UnknownData_I51S, 0x01A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcher, 0x01B8);
		}

		// Class UMG.ProgressBar
		TEST_METHOD(Class__UMG__ProgressBar)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, WidgetStyle, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Style, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BackgroundImage, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillImage, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, MarqueeImage, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BarFillType, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, bIsMarquee, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, bInterpolatePercent, 0x031A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_KDEZ, 0x031B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, InterpolatePercentSpeed, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Percent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, PercentDelegate, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacity, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_OYD3, 0x0344);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressBar, 0x0358);
		}

		// Class UMG.Slider
		TEST_METHOD(Class__UMG__Slider)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, WidgetStyle, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Value, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, ValueDelegate, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Orientation, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_TBX0, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderBarColor, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderHandleColor, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IndentHandle, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Locked, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_72C7, 0x03AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureBegin, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureEnd, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnValueChanged, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_YTTR, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlider, 0x03F0);
		}

		// Class UMG.Spacer
		TEST_METHOD(Class__UMG__Spacer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, Size, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, UnknownData_K4DX, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpacer, 0x01A0);
		}

		// Class UMG.SpinBox
		TEST_METHOD(Class__UMG__SpinBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, WidgetStyle, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Style, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Value, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Delta, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SliderExponent, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_OD9L, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Font, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinDesiredWidth, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ClearKeyboardFocusOnCommit, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SelectAllTextOnCommit, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_31KN, 0x045E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ForegroundColor, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueChanged, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueCommitted, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnBeginSliderMovement, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnEndSliderMovement, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ValueDelegate, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_CRMC, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinValue, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxValue, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinSliderValue, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxSliderValue, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_JS9K, 0x04EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBox, 0x0500);
		}

		// Class UMG.TableViewBase
		TEST_METHOD(Class__UMG__TableViewBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTableViewBase, 0x0188);
		}

		// Class UMG.ListView
		TEST_METHOD(Class__UMG__ListView)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ItemHeight, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_3W63, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, Items, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, SelectionMode, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_5XSO, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, OnGenerateRowEvent, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_UNTI, 0x01B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListView, 0x01C8);
		}

		// Class UMG.TileView
		TEST_METHOD(Class__UMG__TileView)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, ItemWidth, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, ItemHeight, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, Items, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, SelectionMode, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, UnknownData_M12Q, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, OnGenerateTileEvent, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, UnknownData_YTYA, 0x01B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileView, 0x01C8);
		}

		// Class UMG.TextBlock
		TEST_METHOD(Class__UMG__TextBlock)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, WidgetStyle, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Style, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Text, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_IDLJ, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextDelegate, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacity, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacityDelegate, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Font, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowOffset, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacity, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacityDelegate, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Justification, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, CenterVertically, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bDisableInternalClipping, 0x0362);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, DontApplyDisabledEffect, 0x0363);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, AutoWrapText, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_SFKH, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, WrapTextAt, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, MinDesiredWidth, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Margin, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, LineHeightPercentage, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_C1JH, 0x0384);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlock, 0x0398);
		}

		// Class UMG.Throbber
		TEST_METHOD(Class__UMG__Throbber)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, NumberOfPieces, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateHorizontally, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateVertically, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateOpacity, 0x018E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_QTHT, 0x018F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, PieceImage, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, Image, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_KUQ7, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrobber, 0x0220);
		}

		// Class UMG.WidgetAnimation
		TEST_METHOD(Class__UMG__WidgetAnimation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, MovieScene, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, AnimationBindings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimation, 0x0040);
		}

		// Class UMG.WidgetBlueprintGeneratedClass
		TEST_METHOD(Class__UMG__WidgetBlueprintGeneratedClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, WidgetTree, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Bindings, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Animations, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, UnknownData_ECSU, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintGeneratedClass, 0x0210);
		}

		// Class UMG.WidgetBlueprintLibrary
		TEST_METHOD(Class__UMG__WidgetBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintLibrary, 0x0028);
		}

		// Class UMG.WidgetLayoutLibrary
		TEST_METHOD(Class__UMG__WidgetLayoutLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetLayoutLibrary, 0x0028);
		}

		// Class UMG.WidgetTree
		TEST_METHOD(Class__UMG__WidgetTree)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetTree, RootWidget, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetTree, AllWidgets, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetTree, 0x0040);
		}

		// Class OnlineSubsystemUtils.OnlineSessionClient
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineSessionClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_H7EW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bIsFromInvite, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bHandlingDisconnect, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_BO4S, 0x00FA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSessionClient, 0x0100);
		}

		// Class OnlineSubsystemUtils.AchievementBlueprintLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementBlueprintLibrary, 0x0028);
		}

		// Class OnlineSubsystemUtils.InAppPurchaseCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, UnknownData_C5AY, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy, 0x00B0);
		}

		// Class OnlineSubsystemUtils.InAppPurchaseQueryCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, UnknownData_BCIW, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy, 0x0080);
		}

		// Class OnlineSubsystemUtils.IpConnection
		TEST_METHOD(Class__OnlineSubsystemUtils__IpConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_7Z7Q, 0x34318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpConnection, 0x34338);
		}

		// Class OnlineSubsystemUtils.IpNetDriver
		TEST_METHOD(Class__OnlineSubsystemUtils__IpNetDriver)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_C0MP, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxPortCountToTry, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_KGDR, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpNetDriver, 0x03C0);
		}

		// Class OnlineSubsystemUtils.LeaderboardBlueprintLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardBlueprintLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardBlueprintLibrary, 0x0028);
		}

		// Class OnlineSubsystemUtils.LeaderboardFlushCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardFlushCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, UnknownData_8Q1S, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardFlushCallbackProxy, 0x0058);
		}

		// Class OnlineSubsystemUtils.LeaderboardQueryCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardQueryCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, UnknownData_6N7T, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardQueryCallbackProxy, 0x0080);
		}

		// Class OnlineSubsystemUtils.OnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeacon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_RMUD, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, NetDriver, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconNetDriverName, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnection, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_RJGY, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeacon, 0x0490);
		}

		// Class OnlineSubsystemUtils.OnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconOwner, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconClient, 0x0498);
		}

		// Class OnlineSubsystemUtils.OnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHostObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, BeaconTypeName, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHostObject, 0x0478);
		}

		// Class OnlineSubsystemUtils.OnlineBeaconHost
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHost)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ListenPort, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_YZVR, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ClientActors, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_IG74, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHost, 0x0548);
		}

		// Class OnlineSubsystemUtils.PartyBeaconState
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumTeams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumPlayersPerTeam, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ReservedHostTeamNum, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ForceTeamNum, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, Reservations, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_4L7C, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyBeaconState, 0x0068);
		}

		// Class OnlineSubsystemUtils.PartyBeaconHost
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconHost)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, State, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, ClientActors, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_YHJG, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, SessionTimeoutSecs, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, TravelSessionTimeoutSecs, 0x04BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconHost, 0x04C0);
		}

		// Class OnlineSubsystemUtils.PartyBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_BD71, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconClient, 0x04E8);
		}

		// Class OnlineSubsystemUtils.TestBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconClient)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconClient, 0x0498);
		}

		// Class OnlineSubsystemUtils.TestBeaconHost
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconHost)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconHost, 0x0478);
		}

		// Class OnlineSubsystemUtils.OnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBlueprintCallProxyBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBlueprintCallProxyBase, 0x0028);
		}

		// Class OnlineSubsystemUtils.AchievementQueryCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementQueryCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, UnknownData_TU8A, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementQueryCallbackProxy, 0x0058);
		}

		// Class OnlineSubsystemUtils.AchievementWriteCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementWriteCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, UnknownData_89HS, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementWriteCallbackProxy, 0x0070);
		}

		// Class OnlineSubsystemUtils.ConnectionCallbackProxy
		TEST_METHOD(Class__OnlineSubsystemUtils__ConnectionCallbackProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, UnknownData_EG6A, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConnectionCallbackProxy, 0x0058);
		}

		// WidgetBlueprintGeneratedClass HostSession.HostSession_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__HostSession__HostSession_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Close, 0x1228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Open, 0x1230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, AcceptPassword, 0x1238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ActiveEventTextBlock, 0x1240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, AdminLogging, 0x1248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, AdminTextField, 0x1250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, AdvancedSettingsButton, 0x1258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, AllowAnyoneBabyImprintCuddle, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, AllowCaveBuildingPvE, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, AllowCustomRecipes, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, AllowFlyerCarryPvE, 0x1278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, AllowFlyerSpeedLevelingCheckbox, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, AllowMultiplePlatformFloorsCheckBox, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, AllowRaidDinoFeeding, 0x1290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, AllowUnlimitedRespecsCheckBox, 0x1298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ARKModsButton, 0x12A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, AutoPvEStartTimeSecondsSlider, 0x12A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, AutoPvEStartTimeSecondsValue, 0x12B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, AutoPvEStopTimeSecondsSlider, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, AutoPvEStopTimeSecondsValue, 0x12C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, AutoPvETimer, 0x12C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, AutoPvEUseSystemTime, 0x12D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, BabyCuddleGracePeriodMultiplierSlider, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, BabyCuddleGracePeriodMultiplierValue, 0x12E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, BabyCuddleIntervalMultiplierSlider, 0x12E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, BabyCuddleIntervalMultiplierValue, 0x12F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, BabyCuddleLoseImprintQualitySpeedMultiplierSlider, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, BabyCuddleLoseImprintQualitySpeedMultiplierValue, 0x1300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, BabyFoodConsumptionSpeedSlider, 0x1308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, BabyFoodConsumptionSpeedValue, 0x1310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, BabyImprintingStatScaleMultiplierSlider, 0x1318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, BabyImprintingStatScaleMultiplierValue, 0x1320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, BabyMatureSpeedSlider, 0x1328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, BabyMatureSpeedValue, 0x1330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CancelButton, 0x1338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CancelPassword, 0x1340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CancelUploadSaveFileButton, 0x1348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ClearDediData, 0x1350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CorpseDecompositionTimeSlider, 0x1358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CorpseDecompositionTimeValue, 0x1360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CraftingSkillBonusSlider, 0x1368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CraftingSkillBonusValue, 0x1370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CraftXPMultiplierSlider, 0x1378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CraftXPMultiplierValue, 0x1380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CreatureBottomBorder, 0x1388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CreatureTopBorder, 0x1390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CropDecaySpeedSlider, 0x1398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CropDecaySpeedValue, 0x13A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CropGrowthSpeedSlider, 0x13A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CropGrowthSpeedValue, 0x13B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CustomRecipeEffectivenessSlider, 0x13B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CustomRecipeEffectivenessValue, 0x13C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CustomRecipeSkillSlider, 0x13C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CustomRecipeSkillValue, 0x13D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DarkBackground, 0x13D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DayCycleSpeedSlider, 0x13E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DayCycleSpeedValue, 0x13E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DayTimeSpeedSlider, 0x13F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DayTimeSpeedValue, 0x13F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DeleteDedicatedSaveBackupButton, 0x1400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DeleteSinglePlayerData, 0x1408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DestroyOldBiomeStructuresAndDinos, 0x1410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DifficultySlider, 0x1418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DifficultyValue, 0x1420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DinoCharacterFoodDrainSlider, 0x1428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DinoCharacterFoodDrainValue, 0x1430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DinoCharacterHealthRecoverySlider, 0x1438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DinoCharacterHealthRecoveryValue, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DinoCharacterStaminaDrainSlider, 0x1448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DinoCharacterStaminaDrainValue, 0x1450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DinoCountSlider, 0x1458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DinoCountValue, 0x1460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DinoDamageSlider, 0x1468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DinoDamageValue, 0x1470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DinoHarvestingDamageSlider, 0x1478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DinoHarvestingDamageValue, 0x1480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DinoResistanceSlider, 0x1488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DinoResistanceValue, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DinoTurretDamageSlider, 0x1498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DinoTurretDamageValue, 0x14A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DisableDinoDecayPvE, 0x14A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DisableDinoRidingCheckbox, 0x14B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DisableDinoTameCheckbox, 0x14B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DisableFriendlyFire, 0x14C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DisableImprintDinoBuff, 0x14C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DisableLootCrates, 0x14D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DisablePvEGamma, 0x14D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DisableStructureDecayPvE, 0x14E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, DisableStructurePlacementCollisionCheckbox, 0x14E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, EggHatchSpeedSlider, 0x14F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, EggHatchSpeedValue, 0x14F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, EnableExtraStructurePreventionVolumes, 0x1500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, EnablePvPGamma, 0x1508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, EngramsButton, 0x1510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, FishingLootQualitySlider, 0x1518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, FishingLootQualityValue, 0x1520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, FlyerPlatformAllowUnalignedDinoBasing, 0x1528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ForceAllowCaveFlyers, 0x1530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, FuelConsumptionIntervalMultiplierSlider, 0x1538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, FuelConsumptionIntervalMultiplierValue, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, GeneralSettingsButton, 0x1548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, GenericXPMultiplierSlider, 0x1550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, GenericXPMultiplierValue, 0x1558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, GetModsButton, 0x1560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, GlobalVoiceChatCheckbox, 0x1568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, HarvestAmountSlider, 0x1570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, HarvestAmountValue, 0x1578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, HarvestHealthSlider, 0x1580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, HarvestHealthValue, 0x1588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, HarvestXPMultiplierSlider, 0x1590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, HarvestXPMultiplierValue, 0x1598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, HostDedicatedButton, 0x15A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, HostListenServerButton, 0x15A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, HostSessionButton, 0x15B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_1190, 0x15B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_1191, 0x15C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_133, 0x15C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_1321, 0x15D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_1322, 0x15D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_152, 0x15E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_153, 0x15E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_160, 0x15F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_161, 0x15F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_162, 0x1600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_172, 0x1608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_1749, 0x1610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_178, 0x1618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_179, 0x1620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_180, 0x1628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_181, 0x1630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_182, 0x1638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_187, 0x1640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_1928, 0x1648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_1929, 0x1650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_2047, 0x1658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_2373, 0x1660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_2712, 0x1668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_2713, 0x1670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_3195, 0x1678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_321, 0x1680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_3213, 0x1688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_3214, 0x1690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_3312, 0x1698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_3313, 0x16A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_3455, 0x16A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_3513, 0x16B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_3514, 0x16B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_357, 0x16C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_4196, 0x16C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_43, 0x16D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_4201, 0x16D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_4202, 0x16E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_4203, 0x16E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_431, 0x16F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_444, 0x16F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_4615, 0x1700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_4616, 0x1708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_520, 0x1710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_5469, 0x1718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_5470, 0x1720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_8081, 0x1728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_8082, 0x1730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_815, 0x1738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Image_816, 0x1740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, IncreasePvPRespawnInterval, 0x1748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, IncreasePvPRespawnIntervalBaseAmountSlider, 0x1750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, IncreasePvPRespawnIntervalBaseAmountValue, 0x1758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, IncreasePvPRespawnIntervalCheckPeriodSlider, 0x1760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, IncreasePvPRespawnIntervalCheckPeriodValue, 0x1768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, IncreasePvPRespawnIntervalSlider, 0x1770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, IncreasePvPRespawnIntervalValue, 0x1778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ItemDecompositionTimeSlider, 0x1780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ItemDecompositionTimeValue, 0x1788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, KillXPMultiplierSlider, 0x1790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, KillXPMultiplierValue, 0x1798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, LayEggIntervalSlider, 0x17A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, LayEggIntervalValue, 0x17A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ListenServerTetherDistanceMultiplier, 0x17B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ListenServerTetherDistanceMultiplierSlider, 0x17B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, LockedImage, 0x17C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, MapImage, 0x17C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, MatingIntervalSlider, 0x17D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, MatingIntervalValue, 0x17D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, MaxDifficultyCheckbox, 0x17E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, MaxExperienceDinoEditBox, 0x17E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, MaxExperiencePlayerEditBox, 0x17F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, MaxNumberOfPlayersInTribeEditBox, 0x17F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, MaxStructuresInRange, 0x1800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, MaxStructuresInRangeValue, 0x1808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, NightTimeSpeedSlider, 0x1810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, NightTimeSpeedValue, 0x1818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, NonPermanentDiseases, 0x1820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, NotifyPlayerJoinedCheckbox, 0x1828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, NotifyPlayerLeftCheckbox, 0x1830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, NoTributesDownloadsCheckbox, 0x1838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, OnlyAllowSpecifiedEngrams, 0x1840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, OverideStructurePlatformPrevention, 0x1848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, OverwriteMapWithBackupChkBox, 0x1850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PanelSwitcher, 0x1858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PassiveDefensesDamageRiderlessDinos, 0x1860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PasswordField, 0x1868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Damage_Slider, 0x1870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Damage_Value, 0x1878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Food_Slider, 0x1880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Food_Value, 0x1888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Health_Slider, 0x1890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Health_Value, 0x1898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Oxygen_Slider, 0x18A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Oxygen_Value, 0x18A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Speed_Slider, 0x18B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Speed_Value, 0x18B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Stamina_Slider, 0x18C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Stamina_Value, 0x18C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Temperature_Slider, 0x18D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Temperature_Value, 0x18D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_TemperatureFortitude_Slider, 0x18E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_TemperatureFortitude_Value, 0x18E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Torpidity_Slider, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Torpidity_Value, 0x18F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Water_Slider, 0x1900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Water_Value, 0x1908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Weight_Slider, 0x1910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamed_Weight_Value, 0x1918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Damage_Slider, 0x1920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Damage_Value, 0x1928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Food_Slider, 0x1930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Food_Value, 0x1938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Health_Slider, 0x1940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Health_Value, 0x1948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Oxygen_Slider, 0x1950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Oxygen_Value, 0x1958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Speed_Slider, 0x1960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Speed_Value, 0x1968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Stamina_Slider, 0x1970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Stamina_Value, 0x1978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Temperature_Slider, 0x1980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Temperature_Value, 0x1988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_TemperatureFortitude_Slider, 0x1990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_TemperatureFortitude_Value, 0x1998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Torpidity_Slider, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Torpidity_Value, 0x19A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Water_Slider, 0x19B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Water_Value, 0x19B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Weight_Slider, 0x19C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAdd_Weight_Value, 0x19C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Damage_Slider, 0x19D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Damage_Value, 0x19D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Food_Slider, 0x19E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Food_Value, 0x19E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Health_Slider, 0x19F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Health_Value, 0x19F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Oxygen_Slider, 0x1A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Oxygen_Value, 0x1A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Speed_Slider, 0x1A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Speed_Value, 0x1A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Stamina_Slider, 0x1A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Stamina_Value, 0x1A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Temperature_Slider, 0x1A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Temperature_Value, 0x1A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_TemperatureFortitude_Slider, 0x1A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_TemperatureFortitude_Value, 0x1A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Torpidity_Slider, 0x1A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Torpidity_Value, 0x1A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Water_Slider, 0x1A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Water_Value, 0x1A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Weight_Slider, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoTamedAff_Weight_Value, 0x1A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Damage_Slider, 0x1A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Damage_Value, 0x1A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Food_Slider, 0x1A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Food_Value, 0x1A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Health_Slider, 0x1AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Health_Value, 0x1AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Oxygen_Slider, 0x1AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Oxygen_Value, 0x1AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Speed_Slider, 0x1AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Speed_Value, 0x1AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Stamina_Slider, 0x1AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Stamina_Value, 0x1AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Temperature_Slider, 0x1AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Temperature_Value, 0x1AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_TemperatureFortitude_Slider, 0x1AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_TemperatureFortitude_Value, 0x1AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Torpidity_Slider, 0x1B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Torpidity_Value, 0x1B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Water_Slider, 0x1B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Water_Value, 0x1B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Weight_Slider, 0x1B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsDinoWild_Weight_Value, 0x1B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Damage_Slider, 0x1B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Damage_Value, 0x1B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Food_Slider, 0x1B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Food_Value, 0x1B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Health_Slider, 0x1B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Health_Value, 0x1B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Oxygen_Slider, 0x1B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Oxygen_Value, 0x1B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Speed_Slider, 0x1B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Speed_Value, 0x1B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Stamina_Slider, 0x1B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Stamina_Value, 0x1B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Temperature_Slider, 0x1B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Temperature_Value, 0x1B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_TemperatureFortitude_Slider, 0x1BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_TemperatureFortitude_Value, 0x1BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Torpidity_Slider, 0x1BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Torpidity_Value, 0x1BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Water_Slider, 0x1BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Water_Value, 0x1BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Weight_Slider, 0x1BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerLevelStatsPlayer_Weight_Value, 0x1BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerPlatformMaxStructuresMultiplier_Slider, 0x1BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PerPlatformMaxStructuresMultiplier_Value, 0x1BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PlayerCharacterFoodDrainSlider, 0x1BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PlayerCharacterFoodDrainValue, 0x1BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PlayerCharacterHealthRecoverySlider, 0x1C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PlayerCharacterHealthRecoveryValue, 0x1C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PlayerCharacterStaminaDrainSlider, 0x1C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PlayerCharacterStaminaDrainValue, 0x1C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PlayerCharacterWaterDrainSlider, 0x1C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PlayerCharacterWaterDrainValue, 0x1C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PlayerDamageSlider, 0x1C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PlayerDamageValue, 0x1C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PlayerHarvestingDamageSlider, 0x1C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PlayerHarvestingDamageValue, 0x1C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PlayerResistanceSlider, 0x1C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PlayerResistanceValue, 0x1C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PoopIntervalSlider, 0x1C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PoopIntervalValue, 0x1C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PopModBtn, 0x1C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PreventDiseases, 0x1C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PreventDownloadDinos, 0x1C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PreventDownloadItems, 0x1C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PreventDownloadSurvivors, 0x1C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PreventOfflinePvP, 0x1C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PreventOfflinePvPIntervalEditBox, 0x1CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PreventOfflinePvPIntervalSlider, 0x1CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PreventTribeAlliances, 0x1CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PrivateMatchCB, 0x1CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ProceduralSettingButton, 0x1CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ProximityChatCheckbox, 0x1CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PushModBtn, 0x1CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PvEAllowTribeWar, 0x1CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PvEAllowTribeWarCancel, 0x1CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PvEDinoDecayPeriodSlider, 0x1CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PvEDinoDecayPeriodValue, 0x1CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PvEStructureDecayPeriodSlider, 0x1CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PvEStructureDecayPeriodValue, 0x1D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PvPDinoDecay, 0x1D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PvPZoneStructureDamageSlider, 0x1D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, PvPZoneStructureDamageValue, 0x1D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, RaidDinoCharacterFoodDrainMultiplierSlider, 0x1D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, RaidDinoCharacterFoodDrainMultiplierValue, 0x1D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ResetSettings, 0x1D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ResourceNoReplenishRadiusPlayersSlider, 0x1D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ResourceNoReplenishRadiusPlayersValue, 0x1D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ResourceNoReplenishRadiusStructuresSlider, 0x1D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ResourceNoReplenishRadiusStructuresValue, 0x1D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ResourcesRespawnPeriodSlider, 0x1D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ResourcesRespawnPeriodValue, 0x1D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, RightPanelSwitcher, 0x1D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ServerCrosshairCheckbox, 0x1D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ServerForceNoHUDCheckbox, 0x1D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ServerHardcoreCheckbox, 0x1D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ServerPvECheckbox, 0x1D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, SessionNameField, 0x1D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ShowCreativeModeCheckbox, 0x1D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ShowFloatingDamageText, 0x1DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ShowMapPlayerLocationCheckbox, 0x1DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, SpecialXPMultiplierSlider, 0x1DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, SpecialXPMultiplierValue, 0x1DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, SpoilingTimeSlider, 0x1DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, SpoilingTimeValue, 0x1DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, StructureDamageRepairCooldownSlider, 0x1DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, StructureDamageRepairCooldownValue, 0x1DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, StructureDamageSlider, 0x1DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, StructureDamageValue, 0x1DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, StructurePreventResourceRadiusMultiplierSlider, 0x1DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, StructurePreventResourceRadiusMultiplierValue, 0x1DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, StructureResistanceSlider, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, StructureResistanceValue, 0x1E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, SupplyCrateLootQualitySlider, 0x1E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, SupplyCrateLootQualityValue, 0x1E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Tab3_Crafting, 0x1E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Tab3_Creatures, 0x1E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, Tab3_Inventory, 0x1E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, TabBgSwitcher, 0x1E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, TamingSpeedSlider, 0x1E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, TamingSpeedValue, 0x1E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, ThirdPersonCheckbox, 0x1E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, UpdateModsButton, 0x1E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, UseCorpseLocatorCheckbox, 0x1E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, UseSingleplayerSettingsCheckbox, 0x1E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, XPSlider, 0x1E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, XPValue, 0x1E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CallFunc_GetGameMode_ReturnValue, 0x1E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, K2Node_Event_MyGeometry, 0x1E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, K2Node_Event_InDeltaTime, 0x1EBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, K2Node_DynamicCast_AsShooterGame_Menu, 0x1EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, K2Node_DynamicCast_CastSuccess, 0x1EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, UnknownData_E4IY, 0x1EC9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, K2Node_DynamicCast_AsShooterGame_Menu2, 0x1ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, K2Node_DynamicCast2_CastSuccess, 0x1ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, UnknownData_Y0G4, 0x1ED9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CallFunc_Create_ReturnValue, 0x1EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSession_C, CallFunc_NotEqual_ClassClass_ReturnValue, 0x1EE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHostSession_C, 0x1EE9);
		}

		// Class OnlineSubsystemSteam.SteamMessagingNetDriver
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamMessagingNetDriver)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamMessagingNetDriver, 0x03C0);
		}

		// Class OnlineSubsystemSteam.SteamNetConnection
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamNetConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, bIsPassthrough, 0x34338);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, bForceSteamSockets, 0x34339);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, UnknownData_Q847, 0x3433A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamNetConnection, 0x34340);
		}

		// Class OnlineSubsystemSteam.SteamNetDriver
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamNetDriver)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetDriver, UnknownData_F09H, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamNetDriver, 0x03D8);
		}

		// Class OnlineSubsystemEOS.EOSNetDriver
		TEST_METHOD(Class__OnlineSubsystemEOS__EOSNetDriver)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEOSNetDriver, 0x03C0);
		}

		// WidgetBlueprintGeneratedClass ToolTipWidgetPrimalItem_Inventory.ToolTipWidgetPrimalItem_Inventory_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__ToolTipWidgetPrimalItem_Inventory__ToolTipWidgetPrimalItem_Inventory_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_1, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_17, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_1604, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_1610, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_1616, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_1623, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_1631, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_1819, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_20, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_207, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_30, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_41, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_52, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_53, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_605, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_623, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_641, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_66, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_660, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_680, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_701, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_723, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_746, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_770, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_80, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_795, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_821, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_848, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_10, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, Image_95, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, MainInfoSwitcher, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_2, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_11, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_12, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_13, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_14, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_15, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_16, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_17, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_18, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_19, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_20, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_3, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_21, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_4, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_5, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_6, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_7, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_8, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_9, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, RequirementIcon_10, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, TheItemIcon, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, TheItemIconBG, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalItem_Inventory_C, TheItemIconQualityOverlay, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolTipWidgetPrimalItem_Inventory_C, 0x06F0);
		}

		// WidgetBlueprintGeneratedClass GamepadButtonLegend.GamepadButtonLegend_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__GamepadButtonLegend__GamepadButtonLegend_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadButtonLegend_C, ButtonImage, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGamepadButtonLegend_C, 0x0288);
		}

		// BlueprintGeneratedClass DmgTypeBP_Environmental.DmgTypeBP_Environmental_C
		TEST_METHOD(BlueprintGeneratedClass__DmgTypeBP_Environmental__DmgTypeBP_Environmental_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDmgTypeBP_Environmental_C, 0x0050);
		}

		// Class SlateCore.FontProviderInterface
		TEST_METHOD(Class__SlateCore__FontProviderInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontProviderInterface, 0x0028);
		}

		// Class SlateCore.SlateTypes
		TEST_METHOD(Class__SlateCore__SlateTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTypes, 0x0028);
		}

		// Class SlateCore.SlateWidgetStyleContainerInterface
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerInterface, 0x0028);
		}

		// Class SlateCore.SlateWidgetStyleContainerBase
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleContainerBase, UnknownData_OCC9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerBase, 0x0030);
		}

		// Class SlateCore.SlateWidgetStyleAsset
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleAsset, CustomStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleAsset, 0x0030);
		}

		// BlueprintGeneratedClass PrimalGlobalsBlueprint.PrimalGlobalsBlueprint_C
		TEST_METHOD(BlueprintGeneratedClass__PrimalGlobalsBlueprint__PrimalGlobalsBlueprint_C)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalGlobalsBlueprint_C, 0x01B8);
		}

		// Class MoviePlayer.MoviePlayerSettings
		TEST_METHOD(Class__MoviePlayer__MoviePlayerSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bWaitForMoviesToComplete, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bMoviesAreSkippable, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, UnknownData_6TMQ, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, StartupMovies, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoviePlayerSettings, 0x0040);
		}

		// WidgetBlueprintGeneratedClass ConfirmationDialogGeneric.ConfirmationDialogGeneric_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__ConfirmationDialogGeneric__ConfirmationDialogGeneric_C)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialogGeneric_C, AButton, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialogGeneric_C, AcceptButton, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialogGeneric_C, BButton, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialogGeneric_C, CloseButton, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialogGeneric_C, Image_1, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialogGeneric_C, Image_152, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmationDialogGeneric_C, Image_162, 0x05A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConfirmationDialogGeneric_C, 0x05A8);
		}

		// Class ShooterGame.PrimalDinoAIController
		TEST_METHOD(Class__ShooterGame__PrimalDinoAIController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, DieIfLeftWaterWanderMinimumWaterHeightMultiplier, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, DieIfLeftWaterReachedRadiusDistanceCheckMultiplier, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, DieIfLeftWaterTargetUnsubmergedTimeout, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, LandDinoMaxWaterTargetDepthCapsuleMultiplier, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, ExtraCorpseTargetingRange, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, FleeFromAttackCoolDownTime, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, FleeFromAttackTimeLimit, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, ForceFleeUnderHealthPercentage, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, bFleeOnCriticalHealth, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, UnknownData_RLM1, 0x05B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, DieIfLeftWaterTargetingRequiresFreeDepth, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, LastBlockadeCheckTime, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, LastMovingAroundBlockadeTime, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, MovingAroundBlockadeDirection, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, MovingAroundBlockadePoint, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, LastBlockadeWidth, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, LastBlockadeHitNormal, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, LastBlockadeHitLocation, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, StartMovingAroundBlockadeLocation, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, LastMovingAroundBlockadeActor, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, UnknownData_P2U5, 0x0611);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, ForceTargetActor, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, Target, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, AttackDestinationOffset, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, bUseOverlapTargetCheck, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, bNotifyNeighborsWithoutDamage, 0x062D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, bUseBPShouldNotifyNeighbor, 0x062E);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, bUseBPShouldNotifyAnyNeighbor, 0x062F);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, bRequireAbsoluteDamageForNeighborNotification, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, UnknownData_TRR8, 0x0631);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, AboveDeltaZAttackRange, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, BelowDeltaZAttackRange, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, WildAboveDeltaZTargetingRange, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, WildBelowDeltaZTargetingRange, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, bWildUseDeltaZTargetingForFlyerPawnOrBigDino, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, UnknownData_463X, 0x0645);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, bDontWander, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, bOnlyOverlapTargetCorpsesUnlessHasTarget, 0x0659);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, UnknownData_SS30, 0x065A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, NaturalTargetingRange, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, TamedTargetingRange, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, TamedCorpseFoodTargetingRange, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, WanderRandomDistanceAmount, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, FlyingWanderFixedDistanceAmount, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, FlyingWanderRandomDistanceAmount, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, MaxFlyingTargetDeltaZ, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, WanderFlyingZScaler, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, WanderFlyingClampZHeightAboveGround, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, WanderFlyingMinZHeightAboveGround, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, WanderFixedDistanceAmount, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, bUseAggro, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, UnknownData_4RIU, 0x0689);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, MinAggroValue, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, AggroToAddUponRemovingTarget, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, AggroToAddUponAcquiringTarget, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, AggroFactorDecreaseSpeed, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, AggroFactorDecreaseGracePeriod, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, AggroFactorDamagePercentageMultiplier, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, AggroNotifyNeighborsMultiplier, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, AggroNotifyNeighborsRange, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, AggroNotifyNeighborsRangeFalloff, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, TargetingDistanceReductionFactorLinear, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, TargetingDistanceReductionFactorExponent, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, BeyondTargetingRangeAggroAddition, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, AggroFactorDesirabilityMultiplier, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, AttackRange, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, AttackInterval, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, AttackRotationRangeDegrees, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, AttackRotationGroundSpeedMultiplier, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, RangeTargetWildDinosMultiplier, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, AttackRotationRate, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, bFocusOnTargetDuringAttack, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, UnknownData_5AHC, 0x06E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, FlyingMoveTowardsTargetOffset, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, CombatFlyingMoveTowardsTargetOffset, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, FlyingTargetFocalPositionOffset, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, FlyingReachedDestinationThresholdOffset, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, SeekingIntervalCheckToFly, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, SeekingPercentChanceToFly, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, SeekingIntervalCheckToLand, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, SeekingPercentChanceToLand, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, MinimumWanderGroundNormalZ, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, FollowStoppingDistance, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, bUseOverlapTargetCheckTraces, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, bUseAlternateMovePoint, 0x0725);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, bTotallyIgnoreWaterTargets, 0x0726);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, bWaterDinoAllowUnsubmergedTargets, 0x0727);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, LastCheckAttackRangePawnLocation, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, LastCheckAttackRangeClosestPoint, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, LastCheckAttackRangeTargetLocation, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, UnknownData_M49U, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, LastCheckAttackRangeTarget, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, HasAttackPriority, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, UnknownData_1FFE, 0x0759);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, TamedAITargetingRangeMultipliers, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, MateBoostAggroNotifyNeighborsMultiplier, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, UnknownData_JILR, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, BehaviourTree, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, HasEnemyTree, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, BabyHasEnemyTree, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, ForcedAggroHasEnemyTree, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, NoEnemyTree, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, FleeFromAttackTree, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, TamedNoEnemyTree, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, MissionTree, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, AggroNotifyNeighborsClasses, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, UnknownData_Q7RK, 0x07C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, MoveAroundBlockadeAdditionalWidth, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, MoveAroundObjectMaxVelocity, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, ForcedAggroTimeCounter, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, TamedMaxFollowDistance, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, UnknownData_0PUL, 0x07DF);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, BaseStructureTargetingDesire, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, LandDinoMaxFlyerTargetDeltaZ, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, NaturalMaxDepthZ, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, ForcedAttackTarget, 0x07EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, ForcedAttackEnemyTeam, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, LastForcedAttackEnemyTeamTime, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, UnknownData_KYZ5, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, ForcedFleeDuration, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, MinAttackIntervalForFleeing, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, MinLocChangeIntervalForFleeing, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, PercentageTorporForFleeing, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, DamagedForceAggroInterval, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, ForceAggroUntilTime, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, LastExecutedAttackTime, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, LastForcedFleeTime, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, LastFleeLocCheckTime, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, UnknownData_OZ9P, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, NumAlliesToAttack, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, FindLandingPositionZOffset, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, TamedFollowAcceptanceRadiusOffset, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, TamedFollowAcceptanceHeightOffset, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, AIFlightMaxLandingZDistance, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, ForcedMoveToUntilTime, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, UnknownData_SOTM, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, UnknownData_JXRV, 0x0869);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, WildTargetingDesireMultiplierClasses, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, WildTargetingDesireMultiplierValues, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, TamedTargetingDesireMultiplierClasses, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoAIController, TamedTargetingDesireMultiplierValues, 0x08A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalDinoAIController, 0x08B0);
		}

		// Class ShooterGame.AIAttackCoordinator
		TEST_METHOD(Class__ShooterGame__AIAttackCoordinator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIAttackCoordinator, MaxAttackersPerTarget, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIAttackCoordinator, UpdateInterval, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIAttackCoordinator, Attackers, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIAttackCoordinator, UnknownData_2H36, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIAttackCoordinator, 0x0488);
		}

		// Class ShooterGame.CorruptedAvatarAttackCoordinator
		TEST_METHOD(Class__ShooterGame__CorruptedAvatarAttackCoordinator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACorruptedAvatarAttackCoordinator, UnknownData_8BS9, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACorruptedAvatarAttackCoordinator, 0x0490);
		}

		// Class ShooterGame.PrimalGlobals
		TEST_METHOD(Class__ShooterGame__PrimalGlobals)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, PrimalGameData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, PrimalGameDataOverride, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, PrimalGameDataAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, PrimalGameDataAssetExtended, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, RagdollKinematicActorClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, GlobalGenericConfirmationDialog, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, bAllowSingleplayer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, bAllowNonDedicatedHost, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, UnknownData_C1GB, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, UIOnlyShowMapFileNames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, UIOnlyShowModIDs, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, bTotalConversionShowUnofficialServers, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, UnknownData_9O0A, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, CreditString, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, AlphaMissionColor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, BetaMissionColor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, GammaMissionColor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, MissionCompleteMultiUseWheelTextColor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, UIGamepadIconRefs, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, UIGamepadIcons, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobals, UnknownData_5E2S, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalGlobals, 0x01B8);
		}

		// Class ShooterGame.DataListProviderInterface
		TEST_METHOD(Class__ShooterGame__DataListProviderInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataListProviderInterface, 0x0028);
		}

		// Class ShooterGame.PrimalGameData
		TEST_METHOD(Class__ShooterGame__PrimalGameData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, UnknownData_CK1Q, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ModName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ModDescription, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, StatusValueDefinitions, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, StatusStateDefinitions, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ItemStatDefinitions, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ItemTypeDefinitions, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, EquipmentTypeDefinitions, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, MasterItemList, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ItemQualityDefinitions, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, EngramBlueprintClasses, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalEngramBlueprintClasses, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, RemoveEngramBlueprintClasses, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, StatusValueModifierDescriptions, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, PlayerSpawnRegions, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, TutorialDisplaySound, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_StartItemDrag, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_StopItemDrag, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, PreventGrindingIcon, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_CancelPlacingStructure, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_ChooseStructureRotation, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_FailPlacingStructure, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_ConfirmPlacingStructure, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_StartPlacingStructure, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_CorpseDecompose, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_ApplyLevelUp, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_ApplyLevelPoint, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_LearnedEngram, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_ReconnectToCharacter, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_DropAllItems, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_TransferAllItemsToRemote, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_TransferAllItemsFromRemote, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_TransferItemToRemote, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_TransferItemFromRemote, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_AddItemToSlot, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_RemoveItemFromSlot, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_ClearCraftQueue, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_AddToCraftQueue, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_SetRadioFrequency, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_AddPinToMap, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_RemovePinFromMap, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_ApplyDye, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_ApplyPaint, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_SetTextGeneric, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_SplitItemStack, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_MergeItemStack, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_InputPinDigit, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_PinValidated, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_PinRejected, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_TribeWarBegin, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_TribeWarEnd, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_DropInventoryItem, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_RefillWaterContainer, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, CoreAppIDItems, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AppIDItems, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, EngramBlueprintEntries, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, DinoEntriesObjects, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ExplorerNoteEntriesObjects, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, HeadHairStylesEntriesObjects, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, FacialHairStylesEntriesObjects, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, DefaultToolTipWidget, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, StarterNoteItem, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, PrimaryResources, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, GenericDroppedItemTemplate, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, PostProcess_KnockoutBlur, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalDeathPostProcessEffect, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, BuffPostProcessEffects, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalBuffPostProcessEffects, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, EngramPointPurchaseRanges, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, GenericDroppedItemTemplateLowQuality, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, UnknownData_OGZU, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, UnknownIcon, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, UnknownMaterial, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, WhiteTexture, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, BlueprintBackground, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, BabyCuddleIcon, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ImprintedRiderIcon, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, WeaponAccessoryActivatedIcon, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, EngramBackground, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, VoiceChatIcon, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, VoiceChatYellingIcon, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, VoiceChatWhisperingIcon, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ItemButtonRecentlySelectedBackground, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, DinoEntries, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalDinoEntries, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, GlobalGeneralArmorDegradationMultiplier, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, GlobalSpecificArmorDegradationMultiplier, 0x0C0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, GlobalSpecificArmorRatingMultiplier, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, GlobalGeneralArmorRatingMultiplier, 0x0C14);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, EnemyFoundationPreventionRadius, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, UnknownData_J623, 0x0C1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ColorDefinitions, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ExtraResources, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, BaseExtraResources, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, CombatMusicDay, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, CombatMusicNight, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, CombatMusicDay_Heavy, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, CombatMusicNight_Heavy, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, LevelUpStingerSound, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, TrackMissionSound, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, UntrackMissionSound, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, PlayerCharacterGenderDefinitions, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, DefaultGameMode, 0x1868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, LevelExperienceRamps, 0x1870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, SinglePlayerLevelExperienceRamps, 0x18B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, NamedTeamDefinitions, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, PlayerLevelEngramPoints, 0x1900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, PlayerLevelEngramPointsSP, 0x1910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, PreventBuildStructureReasonStrings, 0x1920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ExplorerNoteAchievements, 0x1930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Remap_NPC, 0x1940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Remap_SupplyCrates, 0x1950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Remap_ActiveEventSupplyCrates, 0x1960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Remap_ResourceComponents, 0x1970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Remap_NPCSpawnEntries, 0x1980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Remap_Engrams, 0x1990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Remap_Items, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalStructureEngrams, 0x19B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalDefaultBuffs, 0x19C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AvailableMissions, 0x19D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ActorToSpawnUponEnemyCoreStructureDeath, 0x19E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalStructuresToPlace, 0x19E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, MasterDyeList, 0x19F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, UnknownData_491F, 0x1A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, EnemyCoreStructureDeathActorRadiusBuildCheck, 0x1A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, UnknownData_VAKV, 0x1A1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, DeathDestructionDepositInventoryClass, 0x1A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, MateBoostIcon, 0x1A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, EggBoostIcon, 0x1A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, MatingIcon, 0x1A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, NearFeedIcon, 0x1A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, BuffedIcon, 0x1A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, TethererdIcon, 0x1A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, GamepadFaceButtonTop, 0x1A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, GamepadFaceButtonBottom, 0x1A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, GamepadFaceButtonLeft, 0x1A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, GamepadFaceButtonRight, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, FooterTemplate, 0x1A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, TribeXPSharePercent, 0x1A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, OverrideServerPhysXSubsteps, 0x1A84);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, OverrideServerPhysXSubstepsDeltaTime, 0x1A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, bInitialized, 0x1A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, UnknownData_EM6O, 0x1A8D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_TamedDinos, 0x1AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_ItemStartCrafting, 0x1AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_ItemFinishCrafting, 0x1B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_ItemStartRepairing, 0x1B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_ItemFinishRepairing, 0x1B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, NotifClass, 0x1B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, StructureDefaultOverlayToolTipWidget, 0x1B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, MeleeHitColorizeStructuresUI, 0x1B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, MinPaintDurationConsumption, 0x1B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, MaxPaintDurationConsumption, 0x1B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, MinDinoRadiusForPaintConsumption, 0x1B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, MaxDinoRadiusForPaintConsumption, 0x1B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, DinoBabySetups, 0x1B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, DinoGestationSetups, 0x1B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, SoapItemTemplate, 0x1B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, NameTagWildcardAdmin, 0x1B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, NameTagServerAdmin, 0x1B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, NameTagTribeAdmin, 0x1B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, BadgeGroupsNameTag, 0x1B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AchievementIDs, 0x1B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, UnknownData_MBZT, 0x1BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalEggWeightsToSpawn, 0x1BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalEggItemsToSpawn, 0x1C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, FertilizedAdditionalEggWeightsToSpawn, 0x1C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, FertilizedAdditionalEggItemsToSpawn, 0x1C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ItemAchievementsName, 0x1C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ItemAchievementsList, 0x1C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, GlobalCuddleFoodList, 0x1C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, MultiAchievements, 0x1C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, DinoIncrementedImprintingSound, 0x1C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, HitMarkerCharacterSound, 0x1C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, HitMarkerStructureSound, 0x1C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, FOVScaleMaterialParamCollection, 0x1C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, TheNPCSpawnEntriesContainerAdditions, 0x1C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, PostProcess_ColorLUT, 0x1CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, DefaultStructureSettings, 0x1CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_DossierUnlocked, 0x1CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_ItemUseOnItem, 0x1CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_RemoveItemSkin, 0x1CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_RemoveClipAmmo, 0x1CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ExplorerNoteEntries, 0x1CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ExplorerNoteXPGain, 0x1CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, UnknownData_B3AG, 0x1CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, BuffTypeBackgrounds, 0x1CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, BuffTypeForegrounds, 0x1D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ExplorerNoteXPBuff, 0x1D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, SpecialExplorerNoteXPBuff, 0x1D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, PerMapExplorerNoteLockedIcon, 0x1D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, TamedDinoUnlockedIcon, 0x1D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, TamedDinoLockedIcon, 0x1D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, OverrideAutoGenerateTerainActorTemplate, 0x1D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, UnlockableEmotes, 0x1D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, EmoteGroups, 0x1D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, GlobalNPCRandomSpawnClassWeights, 0x1D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, DinoOrderIcon, 0x1D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, DinoOrderEffect_MoveTo, 0x1D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, DinoOrderEffect_AttackTarget, 0x1D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalHumanMaleAnimSequenceOverrides, 0x1D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalHumanFemaleAnimSequenceOverrides, 0x1DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalHumanMaleAnimMontagesOverrides, 0x1DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalHumanFemaleAnimMontagesOverrides, 0x1DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalHumanMaleOverrideAnimBlueprints, 0x1DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalHumanFemaleOverrideAnimBlueprints, 0x1DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ServerExtraWorldSingletonActorClasses, 0x1DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, bForceServerUseDinoList, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, UnknownData_W1QO, 0x1E01);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ExtraStackedGameDataClasses, 0x1E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, HeadHairStyleDefinitions, 0x1E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, FacialHairStyleDefinitions, 0x1E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalHeadHairStyleDefinitions, 0x1E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalFacialHairStyleDefinitions, 0x1E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, GenericWaterPostprocessAmbientSound, 0x1E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, OverridePlayerDataClass, 0x1E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AllDinosAchievementNameTags, 0x1E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, GenericArrowPickedUpSound, 0x1E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, UnlockIcon, 0x1E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, WheelFolderColor, 0x1E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, WheelBackColor, 0x1E8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, CorpseLocatorEffect, 0x1E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, MaxInventoryIcon, 0x1E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ItemSkinIcon, 0x1EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, SkeletalPhysCustomBodyAdditionalIgnores, 0x1EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ActionWheelClickSound, 0x1EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_GenericBoardPassenger, 0x1EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_GenericUnboardPassenger, 0x1EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, Sound_CraftingTabToggle, 0x1ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, LockedToSeatingStructureParticle, 0x1ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, GenericBatteryItemClass, 0x1EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, UnknownData_MRV0, 0x1EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, GenesisSeasonPassItems, 0x1F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, SimpleDestroyedMeshActorClass, 0x1F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, DefaultTradableOptions, 0x1F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalTradableOptions, 0x1F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AlwaysAllowBuffClasses, 0x1F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, GrinderReplacements, 0x1F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, InvalidReferenceRedirects, 0x1F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalInvalidReferenceRedirects, 0x1FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, bWantsToRunMissions, 0x1FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, UnknownData_0BKG, 0x1FB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, CoreWorldBuffDefinitions, 0x1FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalWorldBuffDefinitions, 0x1FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, WorldBuffData, 0x1FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, PointOfInterest_IndicatorColor_Default, 0x1FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, PointOfInterest_IndicatorColor_ObjectiveComplete, 0x1FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, PointOfInterest_ProgressBarColor_TamingAffinity, 0x1FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, PointOfInterest_Icon_TamingInProgress, 0x2008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, PointOfInterest_Icon_TamingComplete, 0x2010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, ExtraEggItems, 0x2018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalExtraEggItems, 0x2028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, GlobalUIDataClass, 0x2038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, DefaultMapItemSets, 0x2040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, AdditionalDefaultMapItemSets, 0x2050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, CopySettingsVisualIndicatorMesh, 0x2060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, CopySettingsVisualIndicatorMaterial, 0x2068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, SubtitleColors, 0x2070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, HUDOverlayGestationTooltip, 0x2080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGameData, CryopodPersistantBuffsMap, 0x2088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalGameData, 0x2098);
		}

		// Class ShooterGame.DataListEntryInterface
		TEST_METHOD(Class__ShooterGame__DataListEntryInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataListEntryInterface, 0x0028);
		}

		// Class ShooterGame.PrimalItem
		TEST_METHOD(Class__ShooterGame__PrimalItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_50XI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CostumeDinoSaddleOverrideMesh, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CostumeDinoSaddleOverrideTorchMesh, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DinoAutoHealingThresholdPercent, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DinoAutoHealingUseTimeInterval, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ArkTributeVersion, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_9SX8, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EquipRequiresExplicitOwnerClasses, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EquipRequiresExplicitOwnerTags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, BuffToGiveOwnerWhenEquipped, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, BuffToGiveOwnerWhenEquipped_BlueprintPath, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_GFZ1, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ExpirationTimeUTC, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, BlueprintAllowMaxCraftings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_XIZI, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, AbstractItemCraftingDescription, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemSkinUseOnItemClasses, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemSkinPreventOnItemClasses, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemBrokenSound, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UseItemSound, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EquipSound, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnEquipSound, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UsedOnOtherItemSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, RemovedFromOtherItemSound, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, RandomChanceToBeBlueprint, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_5E3Z, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ActorClassAttachmentInfos, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_YYV9, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemSkinAddItemAttachments, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, MyItemType, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, MyConsumableType, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, MyEquipmentType, 0x0172);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_NL50, 0x0173);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ExtraItemCategoryFlags, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemIconScale, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, BlockingShieldFPVTranslation, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, BlockingShieldFPVRotation, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ShieldBlockDamagePercentage, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ShieldDamageToDurabilityRatio, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_CPNT, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, PlayAnimationOnUse, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, bHideDuringEquipAnimation, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_SWGT, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ShowAnimationMale, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ShowAnimationFemale, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, HideAnimationMale, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, HideAnimationFemale, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CraftingMinLevelRequirement, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CraftingCooldownInterval, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CraftingActorToSpawn, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, BlueprintBackgroundOverrideTexture, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CraftItemButtonStringOverride, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UseSpawnActorClass, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UseSpawnActorLocOffset, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, SlotIndex, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemId, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemCustomData, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_PVFB, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemCustomClass, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemSkinTemplateIndex, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_Z873, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemSkinTemplate, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemRating, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CraftQueue, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_CC3C, 0x023E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CraftingSkill, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_KIGR, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CustomItemName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CustomItemDescription, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CustomColors, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CustomResourceRequirements, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, NextCraftCompletionTime, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, OwnerInventory, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemQualityIndex, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_ERVU, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, SupportDragOntoItemClass, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, SupportDragOntoItemClasses, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, SkinWeaponTemplates, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, SupportAmmoItemForWeaponSkin, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, SkinWeaponTemplatesForAmmo, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, AmmoSupportDragOntoWeaponItemWeaponTemplate, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, AmmoSupportDragOntoWeaponItemWeaponTemplates, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UseItemAddCharacterStatusValues, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, Ingredient_WeightIncreasePerQuantity, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, Ingredient_FoodIncreasePerQuantity, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, Ingredient_HealthIncreasePerQuantity, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, Ingredient_WaterIncreasePerQuantity, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, Ingredient_StaminaIncreasePerQuantity, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_57Q6, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DescriptiveNameBase, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemDescription, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DurabilityStringShort, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DurabilityString, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CustomRepairText, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DroppedItemLifeSpanOverride, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_7AL0, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DroppedMeshOverride, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DroppedMeshMaterialOverride, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DroppedMeshOverrideScale3D, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_09YY, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, SpoilingItem, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UseRequiresOwnerActorClasses, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, PreservingItemClass, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, PreservingItemSpoilingTimeMultiplier, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, SpoilingTime, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CraftingConsumesDurability, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, RepairResourceRequirementMultiplier, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, BaseItemWeight, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DurabilityIncreaseMultiplier, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, NewItemDurabilityOverride, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DurabilityDecreaseMultiplier, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UseDecreaseDurability, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, AutoDurabilityDecreaseInterval, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, AutoDecreaseMinDurability, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, AutoDecreaseDurabilityAmountPerInterval, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UseDecreaseDurabilityMin, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UseMinDurabilityRequirement, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ResourceRarity, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, BlueprintTimeToCraft, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, MinBlueprintTimeToCraft, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, BlueprintWeight, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, MinimumUseInterval, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, TimeForFullRepair, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, BaseCraftingXP, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, BaseRepairingXP, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, BaseCraftingResourceRequirements, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, OverrideRepairingRequirements, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemStatInfos, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemStatValues, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, WeaponClipAmmo, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, WeaponFrequency, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, LastTimeToShowInfo, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemVersion, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_ESSL, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemDurability, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, MinItemDurability, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, SavedDurability, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, WeaponTemplate, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, BrokenIcon, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CustomBrokenOverlayIcon, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemIcon, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, AlternateItemIconBelowDurability, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, AlternateItemIconBelowDurabilityValue, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DurabilityNotifyThresholdValue, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemIconMaterialParent, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemColorID, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, PreSkinItemColorID, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, bUseItemColor, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_CT7Z, 0x05DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, RandomColorSet, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemIconMaterial, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, HUDIconMaterial, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemQuantity, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, MaxItemQuantity, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EquippedHideOtherEquipmentAttachTypes, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, SteamItemUserIDs, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, StructureToBuild, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, GiveItemWhenUsed, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CraftingRequiresInventoryComponent, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DroppedItemTemplateOverride, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DroppedItemTemplateForSecondryAction, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, BuffToGiveOwnerCharacter, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, PreviewCameraRotation, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, PreviewCameraPivotOffset, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, PreviewCameraDistanceScaleFactor, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, PreviewCameraDefaultZoomMultiplier, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, PreviewCameraMaxZoomMultiplier, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_4SV2, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CreationTime, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, LastAutoDurabilityDecreaseTime, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, LastUseTime, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_ZJDB, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, MaxCustomItemDescriptionLength, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, TempSlotIndex, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, LastSlotIndex, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, AssociatedWeapon, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_0U94, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, MyItemSkin, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, SkinnedOntoItem, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, LastOwnerPlayer, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CropPhasesData, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CropGrowingFertilizerConsumptionRate, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CropMaxFruitFertilizerConsumptionRate, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CropGrowingWaterConsumptionRate, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CropMaxFruitWaterConsumptionRate, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CropMaxFruits, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CropNoFertilizerOrWaterCacheReductionRate, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, FertilizerEffectivenessMultiplier, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EggAlertDinosAggroAmount, 0x073C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EggAlertDinosAggroRadius, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_E672, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EggAlertDinosAggroTags, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EggAlertDinosForcedAggroTime, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EggMaximumDistanceFromOriginalDropToAlertDinos, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, BrokenGiveItemClass, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ClearColorDurabilityThreshold, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_EI3V, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemClassToUseAsInitialCustomData, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, OriginalItemDropLocation, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DurabilityBarColorForeground, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DurabilityBarColorBackground, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_QBHE, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, OverrideCooldownTimeItemClass, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, MinDurabilityForCraftingResource, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ResourceRequirementIncreaseRatingPower, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ResourceRequirementRatingScale, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ResourceRequirementRatingIncreasePercentage, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, NextSpoilingTime, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, LastSpoilingTime, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DefaultFolderPaths, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemRatingString, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DefaultWeaponMeshName, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_D2P1, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EngramRequirementItemClassOverride, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_JNTB, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ExtraThrowItemSound, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, SpawnOnWaterEncroachmentBoxExtent, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_ZFNC, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, OnlyUsableOnSpecificClasses, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, SaddlePassengerSeats, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, SaddleOverrideRiderSocketName, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EggDinoClassToSpawn, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EggNumberOfLevelUpPointsApplied, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EggTamedIneffectivenessModifier, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EggColorSetIndices, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_61YJ, 0x0876);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EggGenderOverride, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EggLoseDurabilityPerSecond, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ExtraEggLoseDurabilityPerSecondMultiplier, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EggMinTemperature, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EggMaxTemperature, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EggDroppedInvalidTempLoseItemRatingSpeed, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ShieldHitSound, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, RecipeCraftingSkillScale, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CustomItemID, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, AddDinoTargetingRange, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DamageTorpidityArmorRating, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, IndirectTorpidityArmorRating, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_NZ0T, 0x08AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UseParticleEffect, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UseParticleEffectSocketName, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UseGiveDinoTameAffinityPercent, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_4AST, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CraftingAdditionalItemsToGive, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, LastValidItemVersion, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, GlobalTameAffinityMultiplier, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CraftingGiveItemCount, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CraftingGivesItemQuantityOverride, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UseItemOnItemSound, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UseUnlocksEmoteName, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_8V90, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EggDinoAncestors, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EggDinoAncestorsMale, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EggRandomMutationsFemale, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EggRandomMutationsMale, 0x0924);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EquippingRequiresEngrams, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CustomItemDatas, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, OverrideUseString, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, SendToClientClassOverride, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CrafterCharacterName, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CrafterTribeName, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CraftedSkillBonus, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CraftingSkillQualityMultiplierMin, 0x0984);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CraftingSkillQualityMultiplierMax, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, SinglePlayerCraftingSpeedMultiplier, 0x098C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, NoLevelEngramSortingPriority, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CustomFlags, 0x0994);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CustomTag, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EquippedReduceDurabilityInterval, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_NVBE, 0x09A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, LastEquippedReduceDurabilityTime, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EquippedReduceDurabilityPerInterval, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, ItemStatClampsMultiplier, 0x09B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, MaxDurabiltiyOverride, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_3QSF, 0x09BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, NextRepairPercentage, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_LMQ7, 0x09D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, NetDroppedMeshOverride, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, NetDroppedMeshMaterialOverride, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, NetDroppedMeshOverrideScale3D, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_AJ8W, 0x09F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, WidgetCustomBrokenOverlayStyleBrush, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CustomBrokenBorderColor, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_GU45, 0x0A74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DyePreviewMeshOverrideSK, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, DyePreviewMeshOverrideSM, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, AccessoryActivatedIconOverride, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CustomItemTooltipOverride, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, bUseBlueprintAnimNotifications, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, bUseBPPreventUpload, 0x0A99);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_6AMO, 0x0A9A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, EquippingCosmeticRequiresUnlockedEmoteName, 0x0A9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CustomInventoryWidgetTextVerticalOffset, 0x0AA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, bUseCustomContextMenuOptions, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_IDKP, 0x0AA9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, TopLevelCustomContextMenuOptions, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CustomContextSubMenus, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, CustomContextOptionData, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, bPreventModifyArmorValue, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, bUseBPOnLocalUse, 0x0AE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem, UnknownData_7CC1, 0x0AE2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalItem, 0x0AE8);
		}

		// Class ShooterGame.AllClustersInventory
		TEST_METHOD(Class__ShooterGame__AllClustersInventory)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllClustersInventory, UnknownData_ZHH8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAllClustersInventory, 0x00E8);
		}

		// Class ShooterGame.AnimInstance_DinoBlueprintBase
		TEST_METHOD(Class__ShooterGame__AnimInstance_DinoBlueprintBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bAllowNativeAnimations, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bDisableBlueprint, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, UnknownData_DRRJ, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, RootRotationOffset, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, RootLocationOffset, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bSkipAnimGraph, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, UnknownData_ITDD, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, MovementAnimRate, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, MovementAnimRatePower, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, MinMovementAnimRate, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, MaxMovementAnimRate, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, MovingAnimSpeedTreshold, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bIsMoving, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bUseAimOffset, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, UnknownData_IQLQ, 0x0376);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, AimPitch, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, AimYaw, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bUseBlinking, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, UnknownData_7FGK, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, BlinkBlend, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bUseTurning, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bUseTurnInPlaceAnimation, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, UnknownData_9452, 0x038A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, TurningEnabledBlendTime, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, TurningDisabledBlendTime, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, TurningDirectionBlendTime, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, MinTurnRateForTurnAnimation, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bIsTurning, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bTurningRight, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bUseSwimming, 0x039E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, UnknownData_DJ1K, 0x039F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, SwimmingMovingAnimSpeedThreshold, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bIsSwimming, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bUseRunning, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bUseRunningMovementAnimRate, 0x03A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, UnknownData_V875, 0x03A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, RunningMovementAnimRate, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bIsRunning, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bUseSleepingAnim, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, UnknownData_JSZD, 0x03AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, SleepingAnimTranslationOffset, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bIsSleeping, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bUseFalling, 0x03BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, UnknownData_VI3K, 0x03BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, FallingAnimPlayRate, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, FallingBlendInTime, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, FallingBlendOutTime, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, bIsFalling, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoBlueprintBase, UnknownData_77PO, 0x03CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstance_DinoBlueprintBase, 0x03D0);
		}

		// Class ShooterGame.AnimInstance_DinoRootBoneName
		TEST_METHOD(Class__ShooterGame__AnimInstance_DinoRootBoneName)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bAllowNativeAnimations, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bDisableBlueprint, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, UnknownData_ZN94, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, RootRotationOffset, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, RootLocationOffset, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, IKAlpha, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bDisableIK, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bDisableIKWhenFalling, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bSleepingEnableIK, 0x0362);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bSkipAnimGraph, 0x0363);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, MovementAnimRate, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, MovementAnimRatePower, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, MinMovementAnimRate, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, MaxMovementAnimRate, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, MovingAnimSpeedTreshold, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, MovingBlendInTime, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, MovingBlendOutTime, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bIsMoving, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bUseAimOffset, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, UnknownData_3AG1, 0x0382);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, AimPitch, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, AimYaw, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, AimOffsetPitchScale, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, AimOffsetYawScale, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bUseAlignGround, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, UnknownData_RXT3, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, AlignGroundAlpha, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bUseBlinking, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, UnknownData_A3UX, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, BlinkBlend, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bUseTurning, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bUseTurnInPlaceAnimation, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, UnknownData_RAIQ, 0x03A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, TurningEnabledBlendTime, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, TurningDisabledBlendTime, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, TurningDirectionBlendTime, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, MinTurnRateForTurnAnimation, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bIsTurning, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bTurningRight, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bUseSwimming, 0x03BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, UnknownData_DM5O, 0x03BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, SwimmingMovingAnimSpeedThreshold, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bIsSwimming, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bUseRunning, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bUseRunningMovementAnimRate, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, UnknownData_VWR9, 0x03C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, RunningMovementAnimRate, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, RunningBlendInTime, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, RunningBlendOutTime, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bIsRunning, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bUseSleepingAnim, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, UnknownData_P6NT, 0x03D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, SleepingAnimTranslationOffset, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bIsSleeping, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bUseFalling, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, UnknownData_AXP3, 0x03E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, FallingAnimPlayRate, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, FallingBlendInTime, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, FallingBlendOutTime, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, bIsFalling, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootBoneName, UnknownData_0T1K, 0x03F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstance_DinoRootBoneName, 0x0400);
		}

		// Class ShooterGame.AnimInstance_DinoRootTransform
		TEST_METHOD(Class__ShooterGame__AnimInstance_DinoRootTransform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bAllowNativeAnimations, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bDisableBlueprint, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, UnknownData_BY33, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, RootRotationOffset, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, RootLocationOffset, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, UnknownData_5731, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, RootOffsetTransform, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bSkipAnimGraph, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, UnknownData_7V49, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, MovementAnimRate, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, MovementAnimRatePower, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, MinimumMovementSpeed, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, MovingBlendInTime, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, MovingBlendOutTime, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bIsMoving, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, UnknownData_DM37, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, MinimumMovementSpeedFlying, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, FlyingMoveBlendIn, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, FlyingMoveBlendOut, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bIsFlying, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bUseFlyingOffset, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, UnknownData_8WAU, 0x03BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, FlyingOffset, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, CurrentFlyingOffset, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, LandedOffset, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bUseAimOffset, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, UnknownData_RKHE, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, AimPitch, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, AimYaw, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, AimOffsetPitchScale, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, AimOffsetYawScale, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bUseBlinking, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, UnknownData_8QPL, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, BlinkBlend, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bUseTurning, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, UnknownData_47D0, 0x03FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, TurningEnabledBlendTime, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, TurningDisabledBlendTime, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, TurningDirectionBlendTime, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, MinTurnRateForTurnAnimation, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bIsTurning, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bTurningRight, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bUseRunning, 0x0412);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bIsRunning, 0x0413);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bUseSleepingAnim, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bIsSleeping, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bUseFalling, 0x0416);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, UnknownData_WQ4A, 0x0417);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, FallingAnimPlayRate, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, FallingBlendInTime, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, FallingBlendOutTime, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bIsFalling, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bUseMounted, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, bIsMounted, 0x0426);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance_DinoRootTransform, UnknownData_MC7P, 0x0427);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstance_DinoRootTransform, 0x0430);
		}

		// Class ShooterGame.AnimNotify_CustomEvent
		TEST_METHOD(Class__ShooterGame__AnimNotify_CustomEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_CustomEvent, EventName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_CustomEvent, bSendNotifyToWeapon, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_CustomEvent, bSendNotifyToArmorSlot, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_CustomEvent, ArmorSlotToSendNotify, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_CustomEvent, bLockHeadPositionNormalized, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_CustomEvent, TimeToLockHeadPosition, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_CustomEvent, bUnlockHeadPositionNormalized, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_CustomEvent, UnknownData_QZY7, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_CustomEvent, 0x0050);
		}

		// Class ShooterGame.AnimNotify_StopSound
		TEST_METHOD(Class__ShooterGame__AnimNotify_StopSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_StopSound, SoundToStop, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_StopSound, FadeOutTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_StopSound, UnknownData_9F4J, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_StopSound, 0x0048);
		}

		// Class ShooterGame.AnimNotifyState_Custom
		TEST_METHOD(Class__ShooterGame__AnimNotifyState_Custom)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Custom, EventName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Custom, bSendNotifyToWeapon, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Custom, bSendNotifyToArmorSlot, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Custom, ArmorSlotToSendNotify, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Custom, UnknownData_SBVY, 0x003B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Custom, 0x0040);
		}

		// Class ShooterGame.FogOfWar
		TEST_METHOD(Class__ShooterGame__FogOfWar)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogOfWar, MapName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogOfWar, Texture, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogOfWar, UnknownData_KIUH, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogOfWar, InterpolationSpeed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogOfWar, SizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogOfWar, SizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogOfWar, LatitudeOrigin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogOfWar, LatitudeScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogOfWar, LongitudeOrigin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogOfWar, LongitudeScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogOfWar, UnknownData_MOSW, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogOfWar, BrushTexture, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogOfWar, VisibilityBuffer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogOfWar, BrushTextureData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogOfWar, UnknownData_Z4F3, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFogOfWar, 0x00C8);
		}

		// Class ShooterGame.PrimalLocalProfile
		TEST_METHOD(Class__ShooterGame__PrimalLocalProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, UnknownData_H1N7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CustomFolders, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, UnlockedDinoEntries, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, MapMarkers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, DisplayedTutorials, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, MyArkData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, SpectatorSavedIds, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, SpectatorPositions, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, SpectatorRotations, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, AchievementItemsCollectedList, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, UnlockedAchievementsList, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, GlobalExplorerNoteUnlocks, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, TamedDinoTags, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, PerMapFogOfWars, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, MapMarkersPerMaps, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, MapMarkersColorSliderPercent, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstThatchCraft, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstJumpPadCraft, 0x014D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstOceanPlatformCraft, 0x014E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstPressurePlateCraft, 0x014F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstFishingNetCraft, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstMiningDrillCraft, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstShoulderCannonCraft, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstTekGrenadeLauncherCraft, 0x0153);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstTekCruiseMissileCraft, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstLaserTripWireCraft, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstTekClawsCraft, 0x0156);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstHoverSkiffCraft, 0x0157);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstShapeshifterTransform, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstShapeshifterRevert, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstShapeshifterBloodlust, 0x015A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstExoSuit, 0x015B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstTekBow, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstTekPistol, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstTekCropPlot, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstHoversail, 0x015F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstPlantSpeciesR, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToGen2BossBattleAvailable, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstGen2ExplorerNoteFound, 0x0162);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, CompanionHasReactedToFirstGen2DispatcherEncountered, 0x0163);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, NumRespawns, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, UnknownData_JQFX, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalLocalProfile, UnlockedAchievements, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalLocalProfile, 0x0228);
		}

		// Class ShooterGame.ArkCloudInventoryData
		TEST_METHOD(Class__ShooterGame__ArkCloudInventoryData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UArkCloudInventoryData, MyArkData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArkCloudInventoryData, 0x0058);
		}

		// Class ShooterGame.BaseBoxTrigger
		TEST_METHOD(Class__ShooterGame__BaseBoxTrigger)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseBoxTrigger, SceneComp, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseBoxTrigger, TriggerBox, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseBoxTrigger, UnknownData_6Q0B, 0x0479);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseBoxTrigger, 0x0480);
		}

		// Class ShooterGame.HazardTrigger
		TEST_METHOD(Class__ShooterGame__HazardTrigger)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger, Bounds, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger, bIsActive, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger, UnknownData_M4VR, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger, LastActivationTime, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger, bConformToTerrain, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger, UnknownData_M1XM, 0x0499);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHazardTrigger, 0x04A0);
		}

		// Class ShooterGame.HazardTrigger_Slide
		TEST_METHOD(Class__ShooterGame__HazardTrigger_Slide)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, SoundToPlay, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, Splines, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, SlideFX, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, FinalEmitter, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, WarningEmitter, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, ImpactEmitter, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, SlideSound, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, StructureDamage, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, UnknownData_B2VS, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, StructureDamageType, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, SplineSeparation, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, MinTimeBetweenActivations, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, SlideSpeed, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, WaveWidth, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, Impulse, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, MinWarningInterval, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, MaxWarningInterval, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, ActivationChance, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, ActivationIncrement, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, MinProjectileInterval, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, MaxProjectileInterval, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, ImpulseVelocityLimit, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, ProjectileClass, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, WarningTimer, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, CurrentActivationChance, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, ProjectileTimer, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, UnknownData_R1ON, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, SlideComponents, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, SlidePositions, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazardTrigger_Slide, UnknownData_GGJN, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHazardTrigger_Slide, 0x0588);
		}

		// Class ShooterGame.PrimalStaticData
		TEST_METHOD(Class__ShooterGame__PrimalStaticData)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalStaticData, 0x0028);
		}

		// Class ShooterGame.PointOfInterestInterface
		TEST_METHOD(Class__ShooterGame__PointOfInterestInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointOfInterestInterface, 0x0028);
		}

		// Class ShooterGame.PointOfInterestCompanionInterface
		TEST_METHOD(Class__ShooterGame__PointOfInterestCompanionInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointOfInterestCompanionInterface, 0x0028);
		}

		// Class ShooterGame.MissionTrigger
		TEST_METHOD(Class__ShooterGame__MissionTrigger)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionTrigger, UnknownData_VB2C, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionTrigger, TriggerKey, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionTrigger, TriggerOrder, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionTrigger, CustomDataInt, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionTrigger, CustomDataFloat, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionTrigger, UnknownData_VRT3, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionTrigger, CustomDataFloatArray, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionTrigger, CustomDataVector, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionTrigger, UnknownData_7UGE, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionTrigger, CustomDataString, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionTrigger, UnknownData_FUTT, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionTrigger, MyPointOfInterestData, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionTrigger, MyPointOfInterestCompanionBehavior, 0x0620);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissionTrigger, 0x08D0);
		}

		// Class ShooterGame.BasePlayerController
		TEST_METHOD(Class__ShooterGame__BasePlayerController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePlayerController, UnknownData_0YNA, 0x0858);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABasePlayerController, 0x0880);
		}

		// Class ShooterGame.RadialSelectorHUD
		TEST_METHOD(Class__ShooterGame__RadialSelectorHUD)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, NumDivisions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, InnerDistance, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, OuterDistance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, OuterDistanceScaleCountOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, BaseUISizeY, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, SelectionDistanceOffset, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, CenterImageSizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, CenterImageSizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, MI, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, CenterImage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, SegmentTexture, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, SelectedTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, RadialMaterial, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, TextFont, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, CurrentSelection, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, TargetSelection, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, SelectionTime, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, UnknownData_1H1D, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, DivisionAlpha, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, ActionNames, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, Segment_SelectedDynamicMI, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, Segment_UnselectedDynamicMI, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD, UnknownData_RIVY, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialSelectorHUD, 0x00D8);
		}

		// Class ShooterGame.RadialSelectorHUD_Custom
		TEST_METHOD(Class__ShooterGame__RadialSelectorHUD_Custom)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD_Custom, UnknownData_UFN0, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD_Custom, TextScaleCountOffset, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD_Custom, UnknownData_UK2V, 0x013C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialSelectorHUD_Custom, 0x0140);
		}

		// Class ShooterGame.ShooterHUD
		TEST_METHOD(Class__ShooterGame__ShooterHUD)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, HurtCameraShake, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, UnknownData_RC1S, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, MaxDamageCameraShakeScale, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, MaxDamageCameraShakeSpeedInverse, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, bShowAllPlayersWhenSpectating, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, bShowAllPlayersWhenSpectatingLocal, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, UnknownData_WBR3, 0x056A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, PlayerInfoRequestTimeInterval, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, UnknownData_SFTL, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, MyPlayerHUD, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, MyPlayerCustomStatusHUD, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, MyPlayerActiveMissionHUD, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, MyPlayerPointsOfInterestHUD, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, MyPlayerPingHUD, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, MyPlayerLeaderboardHUD, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, MySubtitlesHUD, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, MyOverlayHUD, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, MyTopOverlayHUD, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, ChatBoxUI, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, HubUITemplate, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, SurvivorProfileUITemplate, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, ChangeFrequencyUITemplate, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, PlayerHUDUITemplate, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, PlayerHUDCustomStatusTemplate, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, PlayerHUDActiveMissionTemplate, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, PlayerHUDPointsOfInterestTemplate, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, LeaderboardsUITemplate, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, SubtitlesUITemplate, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, SavingOverlayUITemplate, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, OverlayHUDUITemplate, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, TopOverlayHUDUITemplate, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, InventoryUITemplate, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, MissionListUITemplate, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, AdminMangmentUITemplate, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, TribeManagerUITemplate, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, TribeWarUITemplate, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, PinEntryUITemplate, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, TextEntryUITemplate, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, MapMarkersUITemplate, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, SpawnUITemplate, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, AllPlayersListTemplate, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, ChatBoxUITemplate, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, TutorialUITemplate, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, bShowChatBoxByDefault, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, UnknownData_KDNY, 0x06A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, InventoryRadialSelectorTemplate, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, MultiUseRadialSelectorTemplate, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, PlayerActionRadialSelectorTemplate, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, WhistleRadialSelectorTemplate, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, EmoteRadialSelectorTemplate, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, CustomRadialSelectorTemplate, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, CurrentRadialSelector, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, InventoryRadialSelector, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, MultiUseRadialSelector, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, PlayerActionRadialSelector, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, WhistleRadialSelector, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, EmoteRadialSelector, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, CustomRadialSelector, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, UnknownData_46PD, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, BigFont, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, NormalFont, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, SmallFont, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, HitNotifyTexture, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, HUDMainTextureAtlas, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, HUDAssets02TextureAtlas, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, LowHealthOverlayTexture, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, HitMarkerTexture, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, MultiUseUITemplate, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, TimeToHideChat, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, UnknownData_03AO, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, DeathIcon, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, KilledIcon, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, ChatPopupInterval, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, UnknownData_QJT2, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, SpeechBubble, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, UnknownData_ZIM1, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, HitNotifyIcon, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, Crosshair, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, HitNotifyCrosshair, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, UnknownData_2O6G, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, bHudHidden, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, bShowChatPopup, 0x0A59);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, UnknownData_N96Y, 0x0A5A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, CurrentOpenedInventory, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, CurrentlyOpenedHubUI, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, bMultiUseIsDrawingUIHUD, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, UnknownData_S4TU, 0x0A99);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, LastTargetedActor, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, GenericGamepadReplacementsForKeyboardControls, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, UnknownData_XHBF, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, TutorialUI, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterHUD, UnknownData_BWHR, 0x0B40);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterHUD, 0x0B48);
		}

		// Class ShooterGame.PrimalInventoryComponent
		TEST_METHOD(Class__ShooterGame__PrimalInventoryComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_IHM2, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, RemoteViewingInventoryPlayerControllers, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, InventoryItems, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, EquippedItems, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, ItemSlots, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, ArkTributeItems, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, AllDyeColorItems, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, ItemCraftQueueEntries, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, OverrideInventoryDefaultTab, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, EquippableItemTypes, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_82IO, 0x0193);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, CraftingItemSpeed, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, ItemSpoilingTimeMultipliers, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_YA54, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, ExtraItemDisplay, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, MaxInventoryItems, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, MaxInventoryWeight, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, TribeGroupInventoryRank, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_ZQME, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, NumSlots, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, MaxItemCraftQueueEntries, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_92EJ, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, RemoteInventoryDescriptionString, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, EngramRequirementClassOverride, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, RemoteAddItemOnlyAllowItemClasses, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, RemoteAddItemPreventItemClasses, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, EventItems, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DefaultInventoryItems, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DefaultInventoryItems2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DefaultInventoryItems3, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DefaultInventoryItems4, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DefaultInventoryItemsClasses, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DefaultInventoryItemsRandomCustomStrings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DefaultInventoryItemsRandomCustomStringsWeights, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, CheatInventoryItems, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DefaultEquippedItems, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DefaultEquippedItemSkins, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DefaultSlotItems, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, ItemSpawnActorClassOverrides, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, OnlyAllowCraftingItemClasses, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DefaultEngrams, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DefaultEngrams2, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DefaultEngrams3, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DefaultEngrams4, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DefaultInventoryQualities, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, InventoryNameOverride, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, MaxRemoteInventoryViewingDistance, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, ActiveInventoryRefreshInterval, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, AbsoluteMaxInventoryItems, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_6PG7, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, LastInventoryRefreshTime, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DroppedItemTemplateOverride, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, ForceAllowItemStackings, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DropItemRotationOffset, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_PKQS, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, ItemCraftingConsumptionReplenishments, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, MaxItemCooldownTimeClear, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_XDW2, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, MaxItemTemplateQuantities, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, ItemCraftingSoundOverride, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, WeaponAsEquipmentAttachmentInfos, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, CraftingItems, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DisplayDefaultItemInventoryCount, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_7MHT, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, LastRefreshCheckItemTime, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_PFK2, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, MinItemSets, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, MaxItemSets, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, NumItemSetsPower, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_U9YJ, 0x0432);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, ItemSets, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, AdditionalItemSets, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, ItemSetsOverride, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, SetQuantityWeights, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, SetQuantityValues, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, ItemRemovedBySound, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, OpenInventorySound, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, CloseInventorySound, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, MaxInventoryAccessDistance, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_9305, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, CustomFolderItems, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_Y5PY, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, ForceAllowCraftingForInventoryComponents, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, ItemClassWeightMultipliers, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, GenerateItemSetsQualityMultiplierMin, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, GenerateItemSetsQualityMultiplierMax, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DefaultCraftingRequirementsMultiplier, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, DefaultCraftingQuantityMultiplier, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, ActionWheelAccessInventoryPriority, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, SavedForceDefaultInventoryRefreshVersion, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, ForceDefaultInventoryRefreshVersion, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_M08P, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, TamedDinoForceConsiderFoodTypes, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_VW5F, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, OverrideCraftingFinishedSound, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_E91Z, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, GroundDropTraceLocationOffset, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_DD17, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, OnInventoryItemAdded, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, OnInventoryItemRemoved, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_GQRD, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, MultiUseButtonStyleOverrides, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, bUseCustomSorting, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalInventoryComponent, UnknownData_Y0QW, 0x0589);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalInventoryComponent, 0x0590);
		}

		// Class ShooterGame.PrimalPlayerData
		TEST_METHOD(Class__ShooterGame__PrimalPlayerData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalPlayerData, MyData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalPlayerData, MyPersistentBuffDatas, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalPlayerData, UnknownData_53OK, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalPlayerData, BossEngramReferenceMap, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalPlayerData, RedeemedWorldItemSets, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalPlayerData, RedeemedWorldEquipSets, 0x04F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalPlayerData, 0x0508);
		}

		// Class ShooterGame.ShooterPlayerState
		TEST_METHOD(Class__ShooterGame__ShooterPlayerState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, UnknownData_XXUR, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, MyPlayerData, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, MyPlayerDataStruct, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, DefaultItemSlotClasses, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, DefaultItemSlotEngrams, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, UnknownData_8D1D, 0x09CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, MyTribeData, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, LastTribeInviteData, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, UnknownData_X226, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, TotalEngramPoints, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, FreeEngramPoints, 0x0C8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, EngramItemBlueprints, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, UnknownData_GAXV, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, NextAllowedRespawnTime, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, LastFlexPipeRefreshConnectionsNetworkTime, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, AllowedRespawnInterval, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, UnknownData_HSU6, 0x0D04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, LastTimeDiedToEnemyTeam, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, CurrentlySelectedDinoOrderGroup, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, UnknownData_OPL3, 0x0D14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, DinoOrderGroups, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, GenesisAbilityErrorLastTime, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, NextAllowTurretCopySettingsTime, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, UnknownData_LAG6, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerState, UnknownData_AOSR, 0x0F11);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterPlayerState, 0x0F18);
		}

		// Class ShooterGame.ShooterPlayerController
		TEST_METHOD(Class__ShooterGame__ShooterPlayerController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, PaintingStreamingComponent, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, HeldItemSlot, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UsedItemSlot, 0x0892);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_PGV5, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, LastRepeatUseConsumableTime, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, HeldItemSlotTime, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, LastUsedItemSlotTimes, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, PauseMenuUITemplate, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, DoFMenuUITemplate, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_ZKYS, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, CurrentPlayerCharacterLocation, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_8GOH, 0x09B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_KEH4, 0x09B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, StructurePlacer, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_RJLY, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, LastDeathPrimalCharacter, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_HTRW, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, bShowGameModeHUD, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_9814, 0x0A09);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, SelectSlotSound, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, FogOfWarClass, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, FogOfWar, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, PrimalLocalProfile, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, CurrentGameModeMaxNumOfRespawns, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, LastRawInputDir, 0x0A44);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_JSIU, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, StructurePlacerClass, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, MaxUseDistance, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, MaxUseCheckRadius, 0x0B1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, SavedSurvivorProfileSettings, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, bCachedOnlyShowOnlineTribeMembers, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_OA08, 0x0B31);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, SavedMissionBiomeFilterMask, 0x0B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, bInitializedMissionUI, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, bMissionSortByDistance, 0x0B39);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_KR1O, 0x0B3A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, MapDinos, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, RemoteViewingInventories, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_BLS5, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, FastTravelDroppedInventory, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_B1KP, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_TTOC, 0x0BA1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, SteamInventoryStatusUITemplate, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_TBUF, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, LastSteamItemIDToRemove, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, LastSteamItemIDToAdd, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_V29M, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, SpectatorCycleIndex, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_YXFU, 0x0EB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, bIsFastTravelling, 0x0EB5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, bLastSpawnWasFastTravel, 0x0EB6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_8BZV, 0x0EB7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, bPreventPaintingStreaming, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_7DHM, 0x0ED1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, bHasSurvivedOneDay, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, bHasReachedHighestPeak, 0x0F41);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, bHasReachedLowestDepth, 0x0F42);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_EG2F, 0x0F43);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, LastDownloadPlayerDataBytes, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_YI0R, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, ViewingWheelCategory, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_TX8S, 0x1084);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_OGYS, 0x10A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, bForceHideGameplayUI, 0x10B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_9N5P, 0x10B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, bIsGamepadActive, 0x10C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_BDDN, 0x10C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, bPreventDefaultCharacterItems, 0x10E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_HHOF, 0x10E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, SFXVolumeMultiplier, 0x10EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_JPJ3, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, CreativeModeBuff, 0x11D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, PrimalStatsCacheFlushInterval, 0x11D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_FDIP, 0x11DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, PingTraceDistance, 0x1214);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, PingNotifyRadius, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, PingLifetime, 0x121C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, PingLifetime_Dying, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, PingCoolDownTime, 0x1224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, PingIcon_Default, 0x1228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, PingIcon_Players, 0x1230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, PingIcon_Dinos, 0x1238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, PingIcon_Structures, 0x1240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, LastPingTime, 0x1248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, CurrentPings, 0x1250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_RTQT, 0x1261);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, bDebugPOIs, 0x1264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_SKAC, 0x1265);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, POI_SearchTickInterval_Current, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, POI_SearchTickInterval_RandRanges, 0x126C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, POI_SearchRadius, 0x1274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, POI_LastSearchTickTime, 0x1278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, SpawnedPointWidgets, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, SpawnedPointCosmeticActors, 0x1290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, NearbyPointsOfInterest, 0x12A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, MissionWaypoint, 0x12B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, TamingWaypoints, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_70Q7, 0x12E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_2I2I, 0x12FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, MaxTamingWaypoints, 0x1358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_C2R0, 0x135C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, OnClientReceiveStructuresPlacedOnFloor, 0x1360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_2EEC, 0x1370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, bIsInAdvancedCinematicMode, 0x1390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_4RBR, 0x1391);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, Gen1ENFixDesyncValue, 0x1394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, HighlightedStructures, 0x1398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, EnforcementRelevantStructures, 0x13A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, EnforcementColors, 0x13B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerController, UnknownData_8BFT, 0x13C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterPlayerController, 0x13D0);
		}

		// Class ShooterGame.BeamWeaponComponent
		TEST_METHOD(Class__ShooterGame__BeamWeaponComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, ParticleSystemTemplate, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, ChargeupParticleSystemTemplate, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, BurstWhenFiredSystemTemplate, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, ImpactSystemTemplate, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, Duration, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, DamageRadius, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, DamageType, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, DamageDelay, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, BaseDamage, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, Length, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, IsPenetrating, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, UnknownData_1QQN, 0x06A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, TargetTrackingSpeed, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, UseOwnerForward, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, UnknownData_FUGP, 0x06AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, Offset, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, ChargeupTime, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, WhenChargingWaitForCallToFire, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, DeactivateChargeupOnFiring, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, UnknownData_07M5, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, BeamStoppedFiringEvent, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, BeamTarget, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, ParticleComp, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, ChargeUpComp, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, ImpactComp, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponComponent, UnknownData_DMW2, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBeamWeaponComponent, 0x0730);
		}

		// Class ShooterGame.BeamWeaponController
		TEST_METHOD(Class__ShooterGame__BeamWeaponController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponController, BeamWeapons, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponController, BeamStoppedFiringEvent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeamWeaponController, BeamsStoppedFiringEvent, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBeamWeaponController, 0x0108);
		}

		// Class ShooterGame.BiomeZoneSettings
		TEST_METHOD(Class__ShooterGame__BiomeZoneSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, BiomeZoneName, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, FinalTemperatureMultiplier, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, FinalTemperatureExponent, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, FinalTemperatureAddition, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, PreOffsetTemperatureMultiplier, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, PreOffsetTemperatureExponent, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, PreOffsetTemperatureAddition, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, AboveTemperatureOffsetThreshold, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, AboveTemperatureOffsetMultiplier, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, AboveTemperatureOffsetExponent, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, BelowTemperatureOffsetThreshold, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, BelowTemperatureOffsetMultiplier, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, BelowTemperatureOffsetExponent, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, AbsoluteTemperatureOverride, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, UnknownData_LZOA, 0x04AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, EggRangeMaximumNumberOverride, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, EggMaximumNumberOverride, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, EggChanceToSpawnOverride, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, EggIntervalUnstasisChanceToSpawnOverride, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, OverrideEggLimitsDinoClasses, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, BiomeZonePriority, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, MaxMultiplier, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, OverrideCombatMusicDay, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, OverrideCombatMusicNight, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, OverrideCombatMusicDay_Heavy, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneSettings, OverrideCombatMusicNight_Heavy, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABiomeZoneSettings, 0x04F8);
		}

		// Class ShooterGame.BiomeZoneVolume
		TEST_METHOD(Class__ShooterGame__BiomeZoneVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, BiomeZoneName, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, BiomeZone, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, UnknownData_MMDJ, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, FinalTemperatureMultiplier, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, FinalTemperatureExponent, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, FinalTemperatureAddition, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, PreOffsetTemperatureMultiplier, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, PreOffsetTemperatureExponent, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, PreOffsetTemperatureAddition, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, AboveTemperatureOffsetThreshold, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, AboveTemperatureOffsetMultiplier, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, AboveTemperatureOffsetExponent, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, BelowTemperatureOffsetThreshold, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, BelowTemperatureOffsetMultiplier, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, BelowTemperatureOffsetExponent, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, AbsoluteTemperatureOverride, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, AbsoluteMaxTemperature, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, AbsoluteMinTemperature, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, UnknownData_UKY5, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, EggRangeMaximumNumberOverride, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, EggMaximumNumberOverride, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, EggChanceToSpawnOverride, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, EggIntervalUnstasisChanceToSpawnOverride, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, UnknownData_BGSD, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, OverrideEggLimitsDinoClasses, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, BiomeZonePriority, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, MaxMultiplier, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, AbsoluteWindOverride, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, PreOffsetWindMultiplier, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, PreOffsetWindExponent, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, PreOffsetWindAddition, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, AboveWindOffsetThreshold, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, AboveWindOffsetMultiplier, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, AboveWindOffsetExponent, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, BelowWindOffsetThreshold, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, BelowWindOffsetMultiplier, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, BelowWindOffsetExponent, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, FinalWindMultiplier, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, FinalWindExponent, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, FinalWindAddition, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, UnknownData_RCE3, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, BiomeCustomDatas, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, StatusAdjustmentRateMultipliersPositive, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, StatusAdjustmentRateMultipliersNegative, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, bOnlyApplyAdjustmentRateValuesOutdoors, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, bStatusAdjustRateValues, 0x05C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, bDisableDayTransitionSounds, 0x05CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, UnknownData_FUZB, 0x05CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, BuffToGive, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, BuffToPreventActiveUse, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, OverrideCombatMusicDay, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, OverrideCombatMusicDay_Heavy, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, OverrideCombatMusicNight, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, OverrideCombatMusicNight_Heavy, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABiomeZoneVolume, ForceMusicInBiome, 0x0600);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABiomeZoneVolume, 0x0608);
		}

		// Class ShooterGame.BiomeZoneVolumeEffectUtility
		TEST_METHOD(Class__ShooterGame__BiomeZoneVolumeEffectUtility)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBiomeZoneVolumeEffectUtility, 0x0028);
		}

		// Class ShooterGame.BTService_FindTarget
		TEST_METHOD(Class__ShooterGame__BTService_FindTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindTarget, bDontSet, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindTarget, UnknownData_UKJO, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_FindTarget, 0x0098);
		}

		// Class ShooterGame.BTService_UpdateAggro
		TEST_METHOD(Class__ShooterGame__BTService_UpdateAggro)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_UpdateAggro, 0x0068);
		}

		// Class ShooterGame.BTTask_AttackTarget
		TEST_METHOD(Class__ShooterGame__BTTask_AttackTarget)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_AttackTarget, 0x0058);
		}

		// Class ShooterGame.BTTask_GetRandomWanderDestination
		TEST_METHOD(Class__ShooterGame__BTTask_GetRandomWanderDestination)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GetRandomWanderDestination, locOverride, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GetRandomWanderDestination, randomOffsetMultiplier, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GetRandomWanderDestination, bUseRandomNegativeXDir, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GetRandomWanderDestination, bOrientRandOffsetByRotation, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GetRandomWanderDestination, UnknownData_5T1E, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GetRandomWanderDestination, orientRandOffsetByRotation, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_GetRandomWanderDestination, 0x00A0);
		}

		// Class ShooterGame.TerrainGenerator
		TEST_METHOD(Class__ShooterGame__TerrainGenerator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, UnknownData_7TVK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, TemporaryMaps, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, MapSizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, MapSizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, MapSeed, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, MapOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, LandscapeRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, SectionsPerComponent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, QuadsPerSection, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, ComponentsCountX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, ComponentsCountY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, NorthRegion1Start, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, NorthRegion1End, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, NorthRegion2Start, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, NorthRegion2End, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, NorthRegion3Start, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, NorthRegion3End, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, SouthRegion1Start, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, SouthRegion1End, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, SouthRegion2Start, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, SouthRegion2End, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, SouthRegion3Start, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, SouthRegion3End, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, EastRegion1Start, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, EastRegion1End, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, EastRegion2Start, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, EastRegion2End, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, EastRegion3Start, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, EastRegion3End, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, WestRegion1Start, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, WestRegion1End, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, WestRegion2Start, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, WestRegion2End, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, WestRegion3Start, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, WestRegion3End, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, Version, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, UnknownData_GYG3, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, GenerationWeigthMapNames, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, GenerationMaterial, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, CachedTerrainMaterialLayerNames, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, CachedTerrainMaterials, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, TerrainComponent, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, BiomeGridSize, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, NPCGridSize, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, SupplyZonesGridSize, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainGenerator, UnknownData_UN0Y, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTerrainGenerator, 0x01A0);
		}

		// Class ShooterGame.ByteMap
		TEST_METHOD(Class__ShooterGame__ByteMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UByteMap, UnknownData_75JM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UByteMap, 0x0038);
		}

		// Class ShooterGame.CameraModifier_Climbing
		TEST_METHOD(Class__ShooterGame__CameraModifier_Climbing)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_Climbing, OwningWeapon, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier_Climbing, 0x0060);
		}

		// Class ShooterGame.CharacterViewPanelWidget
		TEST_METHOD(Class__ShooterGame__CharacterViewPanelWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterViewPanelWidget, PreviewWidgetName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterViewPanelWidget, UnknownData_XBIL, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterViewPanelWidget, 0x0268);
		}

		// Class ShooterGame.ContextMenu
		TEST_METHOD(Class__ShooterGame__ContextMenu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenu, OnPopulateMenu, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenu, OnPopulateMenuCustom, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenu, OnActiveItemChanged, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenu, CustomName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenu, UnknownData_4UJZ, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContextMenu, 0x0298);
		}

		// Class ShooterGame.ContextMenuItem
		TEST_METHOD(Class__ShooterGame__ContextMenuItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem, OnGetMenuContentEvent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem, OnGetMenuContentEventCustom, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem, OnExecuteMainAction, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem, OnExecuteMainActionCustom, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem, SubmenuMenuAnchorName, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem, SubmenuIndicatorName, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem, ShortcutKeyWidgetName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem, SwitchName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem, SwitchContainerName, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem, SwitchType, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem, IsSwitchedOn, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem, UnknownData_1PCW, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem, CustomName, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem, UnknownData_91YM, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContextMenuItem, 0x0340);
		}

		// Class ShooterGame.ContextMenu_DinoGroupEntry
		TEST_METHOD(Class__ShooterGame__ContextMenu_DinoGroupEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenu_DinoGroupEntry, ItemClass_SimpleButton, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenu_DinoGroupEntry, ItemClass_SimpleCaption, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenu_DinoGroupEntry, ItemClass_Spinner, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenu_DinoGroupEntry, SubmenuClass, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContextMenu_DinoGroupEntry, 0x02B8);
		}

		// Class ShooterGame.ContextMenu_InventorySort
		TEST_METHOD(Class__ShooterGame__ContextMenu_InventorySort)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenu_InventorySort, ItemClass_SortButton, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContextMenu_InventorySort, 0x02A0);
		}

		// Class ShooterGame.ContextMenu_PrimalItem
		TEST_METHOD(Class__ShooterGame__ContextMenu_PrimalItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenu_PrimalItem, ItemClass_SimpleButton, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenu_PrimalItem, ItemClass_SimpleCaption, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenu_PrimalItem, ItemClass_Spinner, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenu_PrimalItem, SubmenuClass, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenu_PrimalItem, SplitAmountValue, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenu_PrimalItem, SplitAmountMax, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenu_PrimalItem, CraftAmountValue, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenu_PrimalItem, CraftAmountMax, 0x02C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContextMenu_PrimalItem, 0x02C8);
		}

		// Class ShooterGame.ContextMenuItem_Sort
		TEST_METHOD(Class__ShooterGame__ContextMenuItem_Sort)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem_Sort, SorDirSwitcherName, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem_Sort, UnknownData_2F7W, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContextMenuItem_Sort, 0x0358);
		}

		// Class ShooterGame.ContextMenuItem_Spinner
		TEST_METHOD(Class__ShooterGame__ContextMenuItem_Spinner)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem_Spinner, OnValueCommitted, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem_Spinner, UnknownData_663Y, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem_Spinner, MinValue, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem_Spinner, MaxValue, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextMenuItem_Spinner, UnknownData_UHWU, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContextMenuItem_Spinner, 0x0378);
		}

		// Class ShooterGame.CustomActorList
		TEST_METHOD(Class__ShooterGame__CustomActorList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomActorList, ActorList, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomActorList, UnknownData_298S, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACustomActorList, 0x0480);
		}

		// Class ShooterGame.PointOfInterestManagerList
		TEST_METHOD(Class__ShooterGame__PointOfInterestManagerList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APointOfInterestManagerList, UnknownData_J93T, 0x0481);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointOfInterestManagerList, 0x0488);
		}

		// Class ShooterGame.CustomButtonWidget
		TEST_METHOD(Class__ShooterGame__CustomButtonWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomButtonWidget, ExtendedWidgetStyle, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomButtonWidget, IsToggleButton, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomButtonWidget, IsToggledOn, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomButtonWidget, UnknownData_MGHV, 0x04DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomButtonWidget, 0x04E8);
		}

		// Class ShooterGame.DraggableObjectInterface
		TEST_METHOD(Class__ShooterGame__DraggableObjectInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDraggableObjectInterface, 0x0028);
		}

		// Class ShooterGame.CustomCanvasWidget
		TEST_METHOD(Class__ShooterGame__CustomCanvasWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomCanvasWidget, UnknownData_WRYL, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomCanvasWidget, bOverrideScreenCanvasProjection, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomCanvasWidget, bIgnoreParentAlpha, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomCanvasWidget, UnknownData_MG7H, 0x049A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomCanvasWidget, OnDraggedObject, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomCanvasWidget, UnknownData_AX57, 0x04B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomCanvasWidget, 0x04E0);
		}

		// Class ShooterGame.DataListEntryButton
		TEST_METHOD(Class__ShooterGame__DataListEntryButton)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, DisplayString, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, AdditionalDisplayString, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, ContextMenuAnchorName, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, ItemIcon, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, ForegroundColor, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, bUseSelectedBackgroundColor, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, UnknownData_MUYL, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, SelectedBackgroundColor, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, UnknownData_UE2H, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, AltHighlightBGTexture, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, NameOffset, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, bClickable, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, bEnabled, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, bUseDisplayString, 0x0546);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, UnknownData_KOTB, 0x0547);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, DisplayStringColor, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, DisplayStringOffset, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, TextDisplayStringSize, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, DisplayStringScale, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, bDisplayStringCenterX, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, bDisplayStringCenterY, 0x056D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, bSetIndexPlusOneToDisplayString, 0x056E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, bAllowClickingWhenNoEntry, 0x056F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, DisplayStringFont, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, SelectedIcon, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, DisabledColor, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, TintColorOverride, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, UnknownData_ZTYQ, 0x05A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, OverrideDisabledIcon, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, WrappedTextSpacingAdjust, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, UnknownData_65HW, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, MyIconMat, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton, ContextMenuAnchor, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataListEntryButton, 0x05F0);
		}

		// Class ShooterGame.AdminPlayerInfoEntryButton
		TEST_METHOD(Class__ShooterGame__AdminPlayerInfoEntryButton)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPlayerInfoEntryButton, UnknownData_4R1P, 0x05F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPlayerInfoEntryButton, PlayerName, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPlayerInfoEntryButton, SteamPlayerName, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPlayerInfoEntryButton, LinkedPlayerID, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPlayerInfoEntryButton, bCenterDisplayName, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPlayerInfoEntryButton, UnknownData_ZO1F, 0x0629);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPlayerInfoEntryButton, DisplayStringSelectedColor, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPlayerInfoEntryButton, UnknownData_5Y2E, 0x063C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminPlayerInfoEntryButton, 0x0640);
		}

		// Class ShooterGame.AllPaintingsEntryButton
		TEST_METHOD(Class__ShooterGame__AllPaintingsEntryButton)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllPaintingsEntryButton, filename, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllPaintingsEntryButton, FilePath, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllPaintingsEntryButton, DisplayStringSelectedColor, 0x0610);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAllPaintingsEntryButton, 0x0620);
		}

		// Class ShooterGame.AllPlayersEntryButton
		TEST_METHOD(Class__ShooterGame__AllPlayersEntryButton)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllPlayersEntryButton, PlayerName, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllPlayersEntryButton, TribeName, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllPlayersEntryButton, PlayerId, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllPlayersEntryButton, TargetingTeamID, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllPlayersEntryButton, CurrentCharachter, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllPlayersEntryButton, DisplayStringSelectedColor, 0x0628);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAllPlayersEntryButton, 0x0638);
		}

		// Class ShooterGame.CheatFunctionInfoEntryButton
		TEST_METHOD(Class__ShooterGame__CheatFunctionInfoEntryButton)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatFunctionInfoEntryButton, UnknownData_C878, 0x05F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatFunctionInfoEntryButton, FunctionName, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatFunctionInfoEntryButton, bCenterDisplayName, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatFunctionInfoEntryButton, UnknownData_9T9U, 0x0609);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatFunctionInfoEntryButton, DisplayStringSelectedColor, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatFunctionInfoEntryButton, FolderNameTextClipOffset, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatFunctionInfoEntryButton, FolderNameTextFontScale, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatFunctionInfoEntryButton, UnknownData_WEZ8, 0x0624);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatFunctionInfoEntryButton, 0x0628);
		}

		// Class ShooterGame.DataListEntryButton_CustomOverlay
		TEST_METHOD(Class__ShooterGame__DataListEntryButton_CustomOverlay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_CustomOverlay, CustomOverlayImage, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_CustomOverlay, Material, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_CustomOverlay, UnknownData_GJWY, 0x0671);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_CustomOverlay, CustomOverlayScale, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_CustomOverlay, UnknownData_KFSI, 0x067C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataListEntryButton_CustomOverlay, 0x0680);
		}

		// Class ShooterGame.DataListEntryButton_PrimalFolder
		TEST_METHOD(Class__ShooterGame__DataListEntryButton_PrimalFolder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, ItemNameSpacing, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, UnknownData_VPPM, 0x05F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, TextScaleMultiplier, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, bUseNewRenderingPath, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, UnknownData_HTZX, 0x0601);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, TextLabelName, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, UnknownData_0J6W, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, IconsNormal, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, IconsSelected, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, FolderName, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, FolderNameTextClipOffset, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, FolderNameTextFontScale, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, FolderIcon, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, FolderType, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, UnknownData_0ZBW, 0x0671);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, FontColor, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, FolderLevel, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, UnknownData_645S, 0x0679);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, ParentPanel, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalFolder, UnknownData_F2TT, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataListEntryButton_PrimalFolder, 0x0690);
		}

		// Class ShooterGame.DataListEntryButton_PrimalItem
		TEST_METHOD(Class__ShooterGame__DataListEntryButton_PrimalItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, DesiredSize, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, MiscInfoStringColor, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, ItemNameColor, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, ItemCategoryColor, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, UnknownData_5G5M, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, WidgetStyleWhenBroken, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, NormalBorderColors, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, BrokenBorderColors, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, DurabilityBarBorderThickness, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, DurabilityBarThickness, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, DurabilityBarFgColor, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, DurabilityBarBgColor, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, SpoilingBarFgColor, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, SpoilingBarBgColor, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, WidgetSelectedStyleBrush, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, WidgetActiveStyleBrush, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, WidgetBrokenOverlayStyleBrush, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, UnselectedTintColor, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, TintEngramRequirementsMet, 0x09F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, TintEngramRequirementsUnmet, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, TintBlueprintRequirementsMet, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, TintBlueprintRequirementsUnmet, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, TintTekBlueprintRequirementsMet, 0x0A04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, TintTekBlueprintRequirementsUnmet, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, TintCompatibleWithDraggedItem, 0x0A0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, CraftRepairIconTint, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, BorderSizePx, 0x0A14);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, UnknownData_YM0P, 0x0A24);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, EngramBg, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, BlueprintBg, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, TekgramBg, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, ItemQualityOverlay, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, SlottedIcon, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, ActiveSlotIcon, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, CraftingIcon, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, RepairingIcon, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, BrokenIcon, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, QuantityTxtPosition, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, AmmoTxtPosition, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, WeightTxtPosition, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, NameTxtPositionPercent, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, NameTxtBoxSizePercent, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, CategoryTxtPosition, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, ItemNameSpacing, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, UseItemCraftQueueIndex, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, UnknownData_HIHQ, 0x0AAD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, TextScaleMultiplier, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, TextArmorDamageSize, 0x0AB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, TextQuantitySize, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, TextAmmoSize, 0x0ABC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, TextWeightSize, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, TextNameSize, 0x0AC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, TextCategorySize, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, EnableTextShadow, 0x0ACC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, EnableTextGlow, 0x0ACD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, UnknownData_T4MC, 0x0ACE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, TextGlowColor, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, TextGlowInnerRadius, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, TextGlowOuterRadius, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, DetailTextFont, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, ItemIconScale, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_PrimalItem, UnknownData_GUTJ, 0x0AFC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataListEntryButton_PrimalItem, 0x0B58);
		}

		// Class ShooterGame.HostSessionEntryButton
		TEST_METHOD(Class__ShooterGame__HostSessionEntryButton)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSessionEntryButton, UnknownData_BVDZ, 0x05F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSessionEntryButton, DisplayName, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSessionEntryButton, bCenterDisplayName, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSessionEntryButton, UnknownData_18NF, 0x0609);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSessionEntryButton, MapName, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSessionEntryButton, ModName, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSessionEntryButton, ModPath, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHostSessionEntryButton, ModItemId, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHostSessionEntryButton, 0x0648);
		}

		// Class ShooterGame.OnlineSessionEntryButton
		TEST_METHOD(Class__ShooterGame__OnlineSessionEntryButton)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, GameName, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, BuildId, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, OwnerName, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, MapName, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, DayTimeStr, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, NumPlayers, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, MaxNumPlayers, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, ModId, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, TotalConversionId, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, Ping, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, bHasPassword, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, bIsFavourite, 0x0661);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, UnknownData_2ULY, 0x0662);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, PasswordTexture, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, bIsOfficialServer, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, bUsingBattleEye, 0x0671);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, bAllowDownloadCharacters, 0x0672);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, bAllowDownloadItems, 0x0673);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, UnknownData_A24K, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, BattleEyeTexture, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, OfficialServerTexture, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, DisplayStringSelectedColor, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionEntryButton, UnknownData_U1HZ, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSessionEntryButton, 0x0768);
		}

		// Class ShooterGame.ServerInfoInfoEntryButton
		TEST_METHOD(Class__ShooterGame__ServerInfoInfoEntryButton)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerInfoInfoEntryButton, UnknownData_YGNS, 0x05F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerInfoInfoEntryButton, InfoName, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerInfoInfoEntryButton, InfoValue, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerInfoInfoEntryButton, bCenterDisplayName, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerInfoInfoEntryButton, UnknownData_DXP7, 0x0619);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerInfoInfoEntryButton, DisplayStringSelectedColor, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerInfoInfoEntryButton, TextClipOffset, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerInfoInfoEntryButton, FolderNameTextFontScale, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerInfoInfoEntryButton, UnknownData_SVB5, 0x0634);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UServerInfoInfoEntryButton, 0x0638);
		}

		// Class ShooterGame.DraggedDecoratorWidget
		TEST_METHOD(Class__ShooterGame__DraggedDecoratorWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDraggedDecoratorWidget, UnknownData_B5FD, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDraggedDecoratorWidget, 0x04F8);
		}

		// Class ShooterGame.HUDOVerlayWidget
		TEST_METHOD(Class__ShooterGame__HUDOVerlayWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDOVerlayWidget, NotificationsYOffset, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDOVerlayWidget, bIsUnderlay, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDOVerlayWidget, UnknownData_XI2B, 0x04E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDOVerlayWidget, 0x0530);
		}

		// Class ShooterGame.ProgressBarWidget
		TEST_METHOD(Class__ShooterGame__ProgressBarWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, ProgressBarBackground, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, ProgressBarForeground, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, CurrentPercent, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, BarForegroundColor, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, PercentInterpolationSpeed, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, BarFlashColor, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, BarFlashColorBackground, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, BarFlashSpeed, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, BarFlashThreshold, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, BarFlashDuration, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, UnknownData_DPL6, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, DisplayString, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, DisplayStringColor, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, DisplayStringFont, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, DisplayStringOffset, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, DisplayStringScale, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, LinkedCharacterStatusValueType, 0x0572);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, UnknownData_25T7, 0x0573);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, BarBackgroundColor, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBarWidget, UnknownData_44B2, 0x0584);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressBarWidget, 0x05D8);
		}

		// Class ShooterGame.SpawnMapWidget
		TEST_METHOD(Class__ShooterGame__SpawnMapWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnMapWidget, MI, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnMapWidget, bDisableMapDrawing, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnMapWidget, bDisableMarkersAndSpawnPoints, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnMapWidget, UnknownData_OBOZ, 0x04EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnMapWidget, FogOfWarTextureParameterName, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnMapWidget, TimeToUpdateTooltipForEachSpawnPoint, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnMapWidget, SpawnPointAreaToMapAreaPercentage, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnMapWidget, UnknownData_NCFS, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnMapWidget, SpawnPointUITemplate, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnMapWidget, Map_DynamicMI, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnMapWidget, RegionMarkerMI, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnMapWidget, RegionMarkerSize, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnMapWidget, UnknownData_358V, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnMapWidget, SpawnUI, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnMapWidget, 0x0548);
		}

		// Class ShooterGame.StoreItemWidget
		TEST_METHOD(Class__ShooterGame__StoreItemWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemWidget, ItemPrice, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemWidget, UnknownData_FTFD, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemWidget, ItemName, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemWidget, ItemIcon, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemWidget, ForegroundColor, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemWidget, PriceOffset, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreItemWidget, NameOffset, 0x059C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreItemWidget, 0x05A0);
		}

		// Class ShooterGame.UI_PreviewWidget
		TEST_METHOD(Class__ShooterGame__UI_PreviewWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, UnknownData_KPIN, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, FOV, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, UnknownData_0GDZ, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, RenderTargets, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, MeshScale, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, MeshRotation, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, CameraPivotOffset, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, PanExtents, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, PanSpeed, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, PanBrakeSpeed, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, CameraDistance, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, MaximumZoomMultiplier, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, MinimumZoomMultiplier, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, DefaultZoomMultiplier, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, bLimitPivotOffset, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, UnknownData_86IE, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, MaxLimitPivotOffset, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, BrakeSpeed, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, ZoomInterpSpeed, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, WheelDeltaMultiplier, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, RotationSpeed, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, MinPitch, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, MaxPitch, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, bAutoRotateWidget, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, UnknownData_E7EX, 0x0565);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, AutoRotator, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, AmbientSourceType, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, UnknownData_8SDT, 0x0575);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, AmbientCubemap, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, AmbientLightColor, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, AmbientBrightness, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, UnknownData_MJ6F, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, DirectionalLightRelativeRotation, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, DirectionalLightRelativeLocation, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, DirectionalLightColor, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, DirectionalLightBrightness, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, RTQualityMultiplier, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, OverrideShadowBias, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, UnknownData_VO4K, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, RenderTarget, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, ZoomMultiplier, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, UnknownData_EONK, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, GameWorld, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, TargetZoomMultiplier, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, UnknownData_AR2Y, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, PreviewComponents, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, RotationVelocity, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, PanVelocity, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, Pan, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, PreviewMesh, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, PreviewWorld, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, CaptureComponent, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, DirctionalLight, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, SkyLight, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, LineBatcher, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, PreviewWidgetColorFactor, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, UnknownData_GHM2, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PreviewWidget, OrbitRotation, 0x066C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_PreviewWidget, 0x0678);
		}

		// Class ShooterGame.DamageVolumeBase
		TEST_METHOD(Class__ShooterGame__DamageVolumeBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADamageVolumeBase, DamageAmount, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADamageVolumeBase, DamageInterval, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADamageVolumeBase, DamageType, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADamageVolumeBase, DamageNegatingItems, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADamageVolumeBase, UnknownData_RFLR, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADamageVolumeBase, 0x04D0);
		}

		// Class ShooterGame.DamageVolumeSwamp
		TEST_METHOD(Class__ShooterGame__DamageVolumeSwamp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADamageVolumeSwamp, UnknownData_4W9X, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADamageVolumeSwamp, 0x04D8);
		}

		// Class ShooterGame.DatabaseShared
		TEST_METHOD(Class__ShooterGame__DatabaseShared)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatabaseShared, UnknownData_L4XS, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatabaseShared, 0x0068);
		}

		// Class ShooterGame.Database_LoginData
		TEST_METHOD(Class__ShooterGame__Database_LoginData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatabase_LoginData, UnknownData_6KY7, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatabase_LoginData, 0x0078);
		}

		// Class ShooterGame.Database_LoginData_Redis
		TEST_METHOD(Class__ShooterGame__Database_LoginData_Redis)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatabase_LoginData_Redis, 0x0078);
		}

		// Class ShooterGame.Database_PubSub_GeneralNotifications
		TEST_METHOD(Class__ShooterGame__Database_PubSub_GeneralNotifications)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatabase_PubSub_GeneralNotifications, UnknownData_F54B, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatabase_PubSub_GeneralNotifications, 0x0078);
		}

		// Class ShooterGame.Database_PubSub_GeneralNotifications_Redis
		TEST_METHOD(Class__ShooterGame__Database_PubSub_GeneralNotifications_Redis)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatabase_PubSub_GeneralNotifications_Redis, 0x0078);
		}

		// Class ShooterGame.DataListEntryWidget
		TEST_METHOD(Class__ShooterGame__DataListEntryWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryWidget, DataListButtonName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryWidget, ExistingButtonExplicitIndexType, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryWidget, TraditionalButtonName, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryWidget, TraditionalLabelName, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryWidget, UnknownData_8AA6, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryWidget, ButtonBackgroundOverride, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryWidget, DisplayStringOverride, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryWidget, PrimalItemButton_UseItemCraftQueueIndex, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryWidget, UnknownData_W34B, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryWidget, OverrideButtonDisplayStringOffsetValue, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryWidget, UnknownData_06H3, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryWidget, OverrideButtonDisplayStringFontSizeValue, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryWidget, OverrideButtonDisplayStringScaleValue, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryWidget, OverrideButtonSelectedIcon, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryWidget, bBoundToDragging, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryWidget, CanBeHighlightedWhenEmpty, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryWidget, UnknownData_0ZQ9, 0x02A2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataListEntryWidget, 0x02F0);
		}

		// Class ShooterGame.DataListInterface
		TEST_METHOD(Class__ShooterGame__DataListInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataListInterface, 0x0028);
		}

		// Class ShooterGame.DataListPanel
		TEST_METHOD(Class__ShooterGame__DataListPanel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, EntryWidgetTemplate, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, EntryListTemplate, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, NullEntryWidgetTemplate, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, PaddingEntryWidgetTemplate, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, FolderWidgetTemplate, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, GenericWidgetTemplate, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, CustomFolders, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, FolderIcon, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, FolderColor, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, UnknownData_ZDVM, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, BackFolderIcon, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, BackFolderColor, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, UnknownData_3HE2, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, CustomFolderIcon, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, CustomFolderColor, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, UnknownData_2M8V, 0x06AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, bBringHoveredItemsToTop, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, bEnableSupportCustomFolders, 0x06B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, bForceDragging, 0x06B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, bForceEntryDisplayString, 0x06B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, bForceEntryClickWhenNoData, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, bUseExistingButtons, 0x06B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, bUseExistingButtonExplicitEntryIndexTypeMapping, 0x06B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, bSelectEntriesOnHighlight, 0x06B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, MinimalItemCount, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, bSupplyAdjacentsToChildren, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, bCanBeSelectedWhenEmpty, 0x06BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, UnknownData_D5D9, 0x06BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, FilledRowsBeforeEnablingScrolling, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, UnknownData_2492, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, EntryWidgets, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, UnknownData_8XL9, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, CustomFolderBlueprint, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, bCreateFolders, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, FolderLevel, 0x0751);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, UnknownData_OAMZ, 0x0752);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, CustomFolderFilter, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, SortType, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, UnknownData_JCMH, 0x0769);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, NameFilter, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, UnknownData_14S4, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, MyDataListType, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, UnknownData_QBS7, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, CurrentCustomFolders, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, BackWidget, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListPanel, UnknownData_VS56, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataListPanel, 0x07E8);
		}

		// Class ShooterGame.DayCycleAmbientSound
		TEST_METHOD(Class__ShooterGame__DayCycleAmbientSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleAmbientSound, AudioComponentDay, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleAmbientSound, AudioComponentNight, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleAmbientSound, DayTimeSoundMorningFadeInStart, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleAmbientSound, DayTimeSoundMorningFadeInEnd, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleAmbientSound, DayTimeSoundEveningFadeOutStart, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleAmbientSound, DayTimeSoundEveningFadeOutEnd, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleAmbientSound, UnknownData_G9OV, 0x0489);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADayCycleAmbientSound, 0x0498);
		}

		// Class ShooterGame.HUDInterface
		TEST_METHOD(Class__ShooterGame__HUDInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDInterface, 0x0028);
		}

		// Class ShooterGame.DayCycleManager
		TEST_METHOD(Class__ShooterGame__DayCycleManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, UnknownData_Y4O8, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, CurrentTime, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, TrueSkyTime, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, GlobalTrueSkyBrightness, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, GlobalTrueSkyColorMultiplier, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, GlobalIBLCaptureBrightness, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, GlobalBakeAndStreamIBLMultiplier, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, GlobalGroundColorMultiplier, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, GlobalSkyColorMultiplier, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, SM4SkyLightMult, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, SM4DirLightMult, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, AtmosphericFogMultiplier, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, SkyIBLIntensityMultiplier, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, BaseTemperature, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, BaseWind, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, SkyWeatherSequenceBlend_Normal, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, SkyWeatherSequenceBlend_Hot, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, SkyWeatherSequenceBlend_Cold, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, SkyWeatherSequenceBlend_Rainy, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, SkyWeatherSequenceBlend_Fog, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, bIsRaining, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, UnknownData_SS5U, 0x04CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, Sound_TransitionToMorning, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, Sound_TransitionToMidDay, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, Sound_TransitionToNight, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, Sound_TransitionToMorningTime, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, Sound_TransitionToNightTime, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, Sound_TransitionToMidDayTime, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, DayTimeStart, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, DayTimeEnd, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, DayTimeLengthMultiplier, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, UnknownData_MFDD, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, bCheckForStructureActivation, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, bUsesWind, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, bCheckForWeaponFiring, 0x050A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, bUseBPOverrideItemAutoDecreaseDurability, 0x050B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, bHideSupplyCrates, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, UnknownData_OQ67, 0x050D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, PreventBuffClassesInDayCycleLevel, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, OnStartDaytime, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, OnStartNighttime, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, OnDayChange, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, OnHazardChange, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, GenesisTradableOptions, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, HexagonVFXActorClass, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, UnknownData_LBHJ, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, GivePlayersBuffsOnSpawn, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADayCycleManager, GivePlayersBuffAssetsOnSpawn, 0x0590);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADayCycleManager, 0x05A0);
		}

		// Class ShooterGame.DestroyedMeshActor
		TEST_METHOD(Class__ShooterGame__DestroyedMeshActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestroyedMeshActor, TimeToSetNoCollision, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestroyedMeshActor, NoCollisionProfileName, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestroyedMeshActor, DefaultCollisionProfileName, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestroyedMeshActor, UnknownData_FZWD, 0x049C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADestroyedMeshActor, 0x04A0);
		}

		// Class ShooterGame.DinoSetupDataAsset
		TEST_METHOD(Class__ShooterGame__DinoSetupDataAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDinoSetupDataAsset, DinoSetup, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDinoSetupDataAsset, 0x0118);
		}

		// Class ShooterGame.DirectionalAmbientLight
		TEST_METHOD(Class__ShooterGame__DirectionalAmbientLight)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADirectionalAmbientLight, 0x0478);
		}

		// Class ShooterGame.DirectionalInjectedLight
		TEST_METHOD(Class__ShooterGame__DirectionalInjectedLight)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADirectionalInjectedLight, 0x0478);
		}

		// Class ShooterGame.DroppedItem
		TEST_METHOD(Class__ShooterGame__DroppedItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, UnknownData_UP7E, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, MyItemInfo, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, MyItem, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, UnknownData_B6SL, 0x062A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, AssignedToTribeID, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, UnknownData_DA1Z, 0x0631);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, ImpulseMagnitude, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, ForceSleepTimer, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, DroppedItemScale, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, OverlayTooltipPadding, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, OverlayTooltipScale, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, HUDOverlayToolTipWidget, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, DroppedByName, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, DroppedByPlayerID, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, DroppedItemDestructionTime, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, DroppedItemInterpTarget, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, bClientDisablePhysics, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, UnknownData_1O5Z, 0x068D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, NetDroppedMeshOverride, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, NetDroppedMeshMaterialOverride, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, NetDroppedMeshOverrideScale3D, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, UnknownData_TCQF, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, SpawnDropSoundTime, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, UnknownData_3HCT, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, DroppedByActor, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, UnknownData_EM70, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, FreezePhysicsAfterTime, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, PickupAllRange, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, UnknownData_HFYG, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItem, UnknownData_G7ZP, 0x06FD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADroppedItem, 0x0700);
		}

		// Class ShooterGame.DroppedItemEgg
		TEST_METHOD(Class__ShooterGame__DroppedItemEgg)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItemEgg, SpawnDinoEmitter, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItemEgg, IndoorsHypoThermalInsulation, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItemEgg, IndoorsHyperThermalInsulation, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItemEgg, EggThermalInsulationTemperatureMultiplier, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItemEgg, UnknownData_1YV6, 0x0715);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItemEgg, MyBiomeZone, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItemEgg, UnknownData_8DM5, 0x0720);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADroppedItemEgg, 0x0730);
		}

		// Class ShooterGame.DroppedItemLowQuality
		TEST_METHOD(Class__ShooterGame__DroppedItemLowQuality)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADroppedItemLowQuality, 0x0700);
		}

		// Class ShooterGame.DroppedItemTorch
		TEST_METHOD(Class__ShooterGame__DroppedItemTorch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItemTorch, LifeTimeMeter, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItemTorch, PassiveDurabilityCostPerInterval, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItemTorch, PassiveDurabilityCostInterval, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItemTorch, LastDurabilityConsumptionTime, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItemTorch, FireIsOn, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItemTorch, UnknownData_7OXN, 0x0711);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADroppedItemTorch, 0x0718);
		}

		// Class ShooterGame.DroppedItemMission
		TEST_METHOD(Class__ShooterGame__DroppedItemMission)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItemMission, UnknownData_PMLX, 0x0701);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADroppedItemMission, OwnerMission, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADroppedItemMission, 0x0710);
		}

		// Class ShooterGame.FadingDestructibleActor
		TEST_METHOD(Class__ShooterGame__FadingDestructibleActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AFadingDestructibleActor, UnknownData_2IA0, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFadingDestructibleActor, Fall_RotAccel, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFadingDestructibleActor, Fall_RotAccelRate, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFadingDestructibleActor, Fall_Direction_Right, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFadingDestructibleActor, Fall_Spin_Rand, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFadingDestructibleActor, Fall_SpinVelocity, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFadingDestructibleActor, Fall_SpinAccel, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFadingDestructibleActor, Fall_SpinAccelRate, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFadingDestructibleActor, Fall_RotVelocity, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFadingDestructibleActor, FadeOutDelayTime, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFadingDestructibleActor, FadeOutTime, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFadingDestructibleActor, UnknownData_I9XH, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFadingDestructibleActor, StaticMeshComponent, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFadingDestructibleActor, 0x04D8);
		}

		// Class ShooterGame.FallDamageType
		TEST_METHOD(Class__ShooterGame__FallDamageType)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFallDamageType, 0x0050);
		}

		// Class ShooterGame.FloatMap
		TEST_METHOD(Class__ShooterGame__FloatMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatMap, UnknownData_MCAL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatMap, 0x0038);
		}

		// Class ShooterGame.FlockingBehavior
		TEST_METHOD(Class__ShooterGame__FlockingBehavior)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlockingBehavior, 0x0028);
		}

		// Class ShooterGame.GamepadButtonLegendWidget
		TEST_METHOD(Class__ShooterGame__GamepadButtonLegendWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadButtonLegendWidget, ButtonDescription, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadButtonLegendWidget, UnknownData_OPCM, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadButtonLegendWidget, ButtonIcon, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadButtonLegendWidget, UnknownData_9XX9, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGamepadButtonLegendWidget, 0x0280);
		}

		// Class ShooterGame.GeneratorModule
		TEST_METHOD(Class__ShooterGame__GeneratorModule)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorModule, UnknownData_53WF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorModule, LinkedModules, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneratorModule, 0x0048);
		}

		// Class ShooterGame.GenericDataListEntry
		TEST_METHOD(Class__ShooterGame__GenericDataListEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericDataListEntry, UnknownData_UJW1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericDataListEntry, Description, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericDataListEntry, CustomData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericDataListEntry, UnknownData_824F, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericDataListEntry, CustomString, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericDataListEntry, EntryIcon, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericDataListEntry, EntryMaterial, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericDataListEntry, bIsEnabled, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericDataListEntry, UnknownData_MHD3, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericDataListEntry, ExplicitEntryIndexType, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericDataListEntry, 0x0090);
		}

		// Class ShooterGame.HexagonTradableOption
		TEST_METHOD(Class__ShooterGame__HexagonTradableOption)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexagonTradableOption, ItemClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexagonTradableOption, OverrideName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexagonTradableOption, Quantity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexagonTradableOption, ItemCost, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexagonTradableOption, UnknownData_2GA9, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexagonTradableOption, OverrideDescription, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexagonTradableOption, OverwrittenRecievedItemCount, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexagonTradableOption, MaxItemPurchaseTimes, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexagonTradableOption, UnknownData_UQK3, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHexagonTradableOption, 0x0070);
		}

		// Class ShooterGame.HexagonVFXActor
		TEST_METHOD(Class__ShooterGame__HexagonVFXActor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHexagonVFXActor, 0x0468);
		}

		// Class ShooterGame.HibernationManager
		TEST_METHOD(Class__ShooterGame__HibernationManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AHibernationManager, UnknownData_UUOV, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHibernationManager, 0x0510);
		}

		// Class ShooterGame.HordeCrateManager
		TEST_METHOD(Class__ShooterGame__HordeCrateManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AHordeCrateManager, bIsEnabled, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHordeCrateManager, bUseBPForceStartHorde, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHordeCrateManager, UnknownData_ALNE, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHordeCrateManager, MinDelayBeforeInitialEvent, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHordeCrateManager, MaxDelayBeforeInitialEvent, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHordeCrateManager, MinEventCheckInterval, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHordeCrateManager, MaxEventCheckInterval, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHordeCrateManager, MinDistanceFromOtherEvent, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHordeCrateManager, CrateDifficultyLevels, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHordeCrateManager, ElementNodeDifficultyLevels, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHordeCrateManager, ActiveSpawnZones, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHordeCrateManager, ActiveEvents, 0x04B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHordeCrateManager, 0x04C0);
		}

		// Class ShooterGame.HUDElementBarWidget
		TEST_METHOD(Class__ShooterGame__HUDElementBarWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, UnknownData_JD87, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, hatClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, shirtClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, glovesClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, pantsClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, bootsClass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, shoulderCannonClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, HelmetBarName, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, ShirtBarName, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, GlovesBarName, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, PantsBarName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, BootsBarName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, BoostIconName, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, ShoulderCannonBarName, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, iconsBottomOffset, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, iconSeparation, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, bBoostIconHidden, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, UnknownData_0AXG, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, helmetMaxAmmo, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, shirtMaxAmmo, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, glovesMaxAmmo, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, pantsMaxAmmo, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, bootsMaxAmmo, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDElementBarWidget, shoulderMaxAmmo, 0x0314);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDElementBarWidget, 0x0318);
		}

		// Class ShooterGame.HUDStatusBarsWidget
		TEST_METHOD(Class__ShooterGame__HUDStatusBarsWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, UnknownData_X9I1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, HealthBarName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, StaminaBarName, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, OxygenBarName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, FoodBarName, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, WaterBarName, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, WeightBarName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, TorpidityBarName, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, XPBarName, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, IndoorsImageName, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, HarvestableImageName, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, CharacterLabelName, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, UsableHarvestableAllowed, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, HarvestableAllowed, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, HarvestablePrevented, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, UsableHarvestablePrevented, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, poopFoodColor, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, regularFoodColor, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDStatusBarsWidget, UnknownData_SVZI, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDStatusBarsWidget, 0x03A0);
		}

		// Class ShooterGame.InputKeyDisplayWidget
		TEST_METHOD(Class__ShooterGame__InputKeyDisplayWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDisplayWidget, KeyTextStyle, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDisplayWidget, SeparatorTextStyle, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDisplayWidget, ButtonImageSize, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDisplayWidget, TextPrefix, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDisplayWidget, TextSuffix, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDisplayWidget, UnknownData_R3PZ, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeyDisplayWidget, 0x0440);
		}

		// Class ShooterGame.InventoryPanelContainerWidget
		TEST_METHOD(Class__ShooterGame__InventoryPanelContainerWidget)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryPanelContainerWidget, 0x02E0);
		}

		// Class ShooterGame.JsonObject
		TEST_METHOD(Class__ShooterGame__JsonObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UJsonObject, UnknownData_ROG2, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonObject, 0x0038);
		}

		// Class ShooterGame.KeyInputWidget
		TEST_METHOD(Class__ShooterGame__KeyInputWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyInputWidget, UnknownData_EJHW, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyInputWidget, 0x0500);
		}

		// Class ShooterGame.LandscapeUtils
		TEST_METHOD(Class__ShooterGame__LandscapeUtils)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeUtils, 0x0028);
		}

		// Class ShooterGame.Leaderboard
		TEST_METHOD(Class__ShooterGame__Leaderboard)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboard, LeaderboardRowType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboard, HeaderRow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboard, DefaultOrderByColumn, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboard, DefaultOrdering, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboard, DefaultGroupByMode, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboard, DefaultGroupByColumn, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboard, DefaultNumRowsToDisplay, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboard, 0x0058);
		}

		// Class ShooterGame.MatineeCapture
		TEST_METHOD(Class__ShooterGame__MatineeCapture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeCapture, MatineeActor, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeCapture, CaptureFPS, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeCapture, ResX, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeCapture, ResY, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeCapture, PreviewMatineeTime, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeCapture, bBeginCapture, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeCapture, bCancelCapture, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeCapture, UnknownData_HAS2, 0x0482);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeCapture, 0x0498);
		}

		// Class ShooterGame.MissionDispatcherPoint
		TEST_METHOD(Class__ShooterGame__MissionDispatcherPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionDispatcherPoint, MissionTags, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissionDispatcherPoint, 0x0478);
		}

		// Class ShooterGame.MissionMetaTagInfo
		TEST_METHOD(Class__ShooterGame__MissionMetaTagInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionMetaTagInfo, MetaTagInfo, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionMetaTagInfo, UnknownData_9J6W, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionMetaTagInfo, 0x00B0);
		}

		// Class ShooterGame.MissionModuleBase
		TEST_METHOD(Class__ShooterGame__MissionModuleBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionModuleBase, 0x0028);
		}

		// Class ShooterGame.MissionModuleInterface
		TEST_METHOD(Class__ShooterGame__MissionModuleInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionModuleInterface, 0x0028);
		}

		// Class ShooterGame.MissionObjectiveEntryWidget
		TEST_METHOD(Class__ShooterGame__MissionObjectiveEntryWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionObjectiveEntryWidget, ItemLabelName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionObjectiveEntryWidget, UnknownData_67NJ, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionObjectiveEntryWidget, 0x0268);
		}

		// Class ShooterGame.MissionPrerequisite
		TEST_METHOD(Class__ShooterGame__MissionPrerequisite)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionPrerequisite, 0x0028);
		}

		// Class ShooterGame.MissionRequirementEntryWidget
		TEST_METHOD(Class__ShooterGame__MissionRequirementEntryWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionRequirementEntryWidget, DisplayText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionRequirementEntryWidget, CustomTag, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionRequirementEntryWidget, UnknownData_9ERI, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionRequirementEntryWidget, 0x0260);
		}

		// Class ShooterGame.MissionServerSidePoint
		TEST_METHOD(Class__ShooterGame__MissionServerSidePoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionServerSidePoint, TriggerKey, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionServerSidePoint, TriggerOrder, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionServerSidePoint, CustomDataInt, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionServerSidePoint, CustomDataFloat, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionServerSidePoint, UnknownData_Q7V3, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionServerSidePoint, CustomDataFloatArray, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionServerSidePoint, CustomDataVector, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionServerSidePoint, UnknownData_ENO4, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionServerSidePoint, CustomDataString, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissionServerSidePoint, 0x04B0);
		}

		// Class ShooterGame.MissionSpline
		TEST_METHOD(Class__ShooterGame__MissionSpline)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionSpline, bValidateSpline, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionSpline, UnknownData_1JYQ, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionSpline, SplineValidationMinTotalLength, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionSpline, SplineValidationChannel, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionSpline, UnknownData_FQM5, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionSpline, SplineValidationNumTracesPerSplineSegment, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionSpline, SplineValidationDebugDrawDuration, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionSpline, TriggerKey, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionSpline, TriggerOrder, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionSpline, CustomDataInt, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionSpline, CustomDataFloat, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionSpline, CustomDataFloatArray, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionSpline, CustomDataVector, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionSpline, UnknownData_COP1, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionSpline, CustomDataString, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissionSpline, 0x04C8);
		}

		// Class ShooterGame.MissionTimerWidget
		TEST_METHOD(Class__ShooterGame__MissionTimerWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionTimerWidget, UnknownData_ZBIW, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionTimerWidget, 0x0250);
		}

		// Class ShooterGame.TargetableInterface
		TEST_METHOD(Class__ShooterGame__TargetableInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTargetableInterface, 0x0028);
		}

		// Class ShooterGame.PrimalTargetableActor
		TEST_METHOD(Class__ShooterGame__PrimalTargetableActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, UnknownData_QT7W, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, HurtFX, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, DamageTypeAdjusters, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, UnknownData_AMLG, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, DestructionActorTemplate, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, LifeSpanAfterDeath, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, UnknownData_BYWN, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, DeathSound, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, PassiveDamageHealthReplicationPercentInterval, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, DamageNotifyTeamAggroMultiplier, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, DamageNotifyTeamAggroRange, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, DamageNotifyTeamAggroRangeFalloff, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, DestructibleMeshLocationOffset, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, DestructibleMeshScaleOverride, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, DestructibleMeshRotationOffset, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, UnknownData_IEFF, 0x04E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, DescriptiveName, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, DestroyedMeshActorClass, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, DestroyedMesh, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, ReplicatedHealth, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, Health, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, MaxHealth, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, DestructibleMeshDeathImpulseScale, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, BoneDamageAdjusters, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, UnknownData_KPTE, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, MyHarvestingComponent, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, UnknownData_HHA1, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, TargetableDamageFXDefaultPhysMaterial, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, UnknownData_QBN1, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, UnknownData_AAHP, 0x054D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, StructureSettingsClass, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalTargetableActor, UnknownData_L9GN, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalTargetableActor, 0x0578);
		}

		// Class ShooterGame.PrimalStructure
		TEST_METHOD(Class__ShooterGame__PrimalStructure)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_ZUBJ, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, OverlayTooltipPadding, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, OverlayTooltipScale, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, StructureTag, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, ConsumesPrimalItem, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, ScaleFactor, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, StructureSnapTypeFlags, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, Variants, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, CurrentVariant, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlacementOffsetForVerticalGround, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_3UJC, 0x05E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlacementInitialTracePointOffsetForVerticalGround, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_7Y1G, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, StructuresAllowedToBeVerticalGround, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, TraceDistanceFromActorToWallVerticalGround, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlacementHitLocOffset, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlacementEncroachmentCheckOffset, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlacementEncroachmentBoxExtent, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlacementTraceScale, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, SnapAlternatePlacementTraceScale, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlacementRotOffset, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlacementTraceRotOffset, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, SnappingRotationOffset, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_SJ3O, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, RepairCheckInterval, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlacementFloorCheckZExtentUp, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, RepairPercentPerInterval, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, DecayDestructionPeriod, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_RUJ6, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PreventPlacingOnFloorClasses, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, AllowPlacingOnFloorClasses, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, MyStaticMesh, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, CosmeticVariantStaticMesh, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, MyRootTransform, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, TraceIgnoreStructuresWithTypeFlags, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_IUHZ, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, SnapPoints, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, bTraceCheckOnlyUseStructuresWithTypeFlags, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, AllowStructureColorSets, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_K2F2, 0x06E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, WaterVolumeCheckPointOffset, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, WaterPlacementMinimumWaterHeight, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlacementMaxZDelta, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlacementChooseRotationMaxRangeOverride, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlacementMaxRange, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, MaxSnapLocRange, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, SnapOverlapCheckRadius, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, MaximumFoundationSupport2DBuildDistance, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlacementFloorCheckZExtent, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, LastHealthPercentage, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, TakeGroundNormalRotationOffset, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, DemolishGiveItemCraftingResourcePercentage, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_FHCU, 0x0725);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, AllowReplacementByStructureClassType, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PreventReplacementOfStructureClassType, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, MaximumHeightAboveWorldGround, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, MaximumHeightUnderWorldMaxKillZ, 0x073C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PreviewCameraRotation, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PreviewCameraPivotOffset, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PreviewCameraDistanceScaleFactor, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PreviewCameraDefaultZoomMultiplier, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PreviewCameraMaxZoomMultiplier, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, ReturnDamageAmount, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, StructureRangeTypeFlag, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, LimitMaxStructuresInRangeTypeFlag, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, ReturnDamageImpulse, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_ZNPA, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, ReturnDamageType, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, ReturnDamageExcludeIncomingTypes, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, ReturnDamageOnlyForIncomingTypes, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, OwningPlayerID, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_9ML4, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, OwningPlayerName, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, LastInAllyRangeTime, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PickupAllowedBeforeNetworkTime, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, DecayDestructionPeriodMultiplier, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, SaddleDino, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_9HOJ, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, LatchedDinos, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PreviewMaterial, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PreviewMaterialInstances, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PreviewMaterialColorParamName, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlacementTraceDirections, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, LinkedStructures, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, LinkedStructuresID, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, StructuresPlacedOnFloor, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, SnapToStructureTypesToExclude, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, SnapFromStructureTypesToExclude, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, SnapToStructureTagsToExclude, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, SnapFromStructureTagsToExclude, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlacedOnFloorStructure, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PrimarySnappedStructureChild, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PrimarySnappedStructureParent, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, OwnerName, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, StructureColors, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_T3PV, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, AttachedTo, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, AttachedTransponder, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, StructureID, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, AttachedToDinoID1, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, OnlyAllowStructureClassesToAttach, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, OnlyAllowStructureClassesFromAttach, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_HI5M, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, StructureIconMaterial, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, AdvancedRotationPlacementOffset, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_1AVV, 0x0934);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, SpawnEmitter, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, SpawnEmitterLocationOffset, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, SpawnEmitterRotationOffset, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PickupGivesItem, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, ExcludeInStructuresRadius, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_QIIX, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, ExcludeInStructuresRadiusClasses, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_7QHB, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PaintingComponent, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PreventBuildStructureReasonStringOverrides, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, FloatingHudLocTextOffset, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_4HMN, 0x09B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, ForceLimitStructuresInRange, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_ZFDA, 0x09C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlacementMaterialForwardDirIndex, 0x09C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_K3E7, 0x09C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, ForcePreventPlacingInOfflineRaidStructuresRadius, 0x09CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, AttachToStaticMeshSocketNameBase, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, StructureHarvestingComponent, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, MyStructureHarvestingComponent, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_NYJW, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, ItemsUseAlternateActorClassAttachment, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnstasisAutoDestroyAfterTime, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, TribeGroupStructureRank, 0x0A04);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_ZFA2, 0x0A05);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PreventSaddleDinoClasses, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, AllowSaddleDinoClasses, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlaceOnWallUseStaticMeshTag, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, SnapStructureClass, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, DemolishActivationTime, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, GroundEncroachmentCheckLocationOffset, 0x0A3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, StructureMinAllowedVersion, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, SavedStructureMinAllowedVersion, 0x0A4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, OverrideEnemyFoundationPreventionRadius, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, OverridePVPEnemyFoundationPreventionRadius, 0x0A54);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, ExpandEnemyFoundationPreventionRadius, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, BedID, 0x0A5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, ForceAllowWallAttachmentClasses, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, LimitMaxStructuresInRangeRadius, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_Q7CE, 0x0A74);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, FastDecayLinkedStructureClasses, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlacementMaxZAbovePlayerHeight, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_SCUD, 0x0A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, OverrideTargetComponents, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, OverrideApproachRadius, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_MMQI, 0x0AAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, OwnerMission, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_71OQ, 0x0AB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, PlaceUsingItemID, 0x0ABC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_X9UM, 0x0AC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, CustomDataModifiedOnStructurePickup, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructure, UnknownData_T5UI, 0x0AD9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructure, 0x0AE0);
		}

		// Class ShooterGame.PrimalStructureItemContainer
		TEST_METHOD(Class__ShooterGame__PrimalStructureItemContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, MyInventoryComponent, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, SolarRefreshIntervalMin, 0x0AEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, SolarRefreshIntervalMax, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, SolarRefreshInterval, 0x0AF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, LastSolarRefreshTime, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, BatteryClassOverride, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, PoweredOverrideCounter, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, NotifyNearbyPowerGeneratorDistance, 0x0B0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, NotifyNearbyPowerGeneratorOctreeGroup, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, UnknownData_ENQE, 0x0B15);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, ActivateMaterials, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, InActivateMaterials, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, ItemsToDisplayInStructureTooltip, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, MyChildEmitterSpawnable, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, UnknownData_457U, 0x0B51);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, BoxName, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, MaxBoxNameLength, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, InsulationRange, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, HyperThermiaInsulation, 0x0B74);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, HypoThermiaInsulation, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, ContainerActiveDecreaseHealthSpeed, 0x0B7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, FuelConsumptionIntervalsMultiplier, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, DropInventoryOnDestructionLifespan, 0x0B84);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, ActivateContainerString, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, DeactivateContainerString, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, ContainerActiveHealthDecreaseDamageTypePassive, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, ActiveRequiresFuelItems, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, FuelItemsConsumeInterval, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, FuelItemsConsumedGiveItems, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, NetDestructionTime, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, CurrentPinCode, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, UnknownData_062E, 0x0BEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, CurrentFuelTimeCache, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, LastCheckedFuelTime, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, LinkedPowerJunctionStructureID, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, CurrentItemCount, 0x0C04);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, MaxItemCount, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, LinkedPowerJunctionStructure, 0x0C0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, UnknownData_M0AS, 0x0C14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, NextConsumeFuelGiveItemType, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, UnknownData_765Q, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, LastActiveStateChangeTime, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, UnknownData_RFEP, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, MapMarkerLocationInfo, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, BasedCharacterDamageInterval, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, BasedCharacterDamageAmount, 0x0C64);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, BasedCharacterDamageType, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, EngramRequirementClassOverride, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, LinkedBlueprintSpawnActorPoint, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, PoweredNearbyStructureTemplate, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, PoweredNearbyStructureRange, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, UnknownData_ZD9V, 0x0C8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, JunctionLinkParticleTemplate, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, UISceneTemplate, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, OpenSceneActionName, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, DisabledOpenSceneActionName, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, RequiresItemForOpenSceneAction, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, UnknownData_1SR3, 0x0CCA);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, DeathCacheCreationTime, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, UnknownData_MTYX, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, JunctionLinkCableParticle, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, JunctionCableBeamOffsetStart, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, JunctionCableBeamOffsetEnd, 0x0D04);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, ContainerActivatedSound, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, ContainerDeactivatedSound, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, DemolishInventoryDepositClass, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, FuelItemTrueClass, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, ReplicatedFuelItemClass, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, ReplicatedFuelItemColorIndex, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, UnknownData_CCQP, 0x0D3A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, DefaultParticleTemplate, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, DefaultAudioTemplate, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, OverrideParticleTemplateItemClasses, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, OverrideParticleTemplates, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, OverrideAudioTemplates, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, MaxActivationDistance, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, UnknownData_A7IO, 0x0D84);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, BoxNamePrefaceString, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, TribeGroupInventoryRank, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, UnknownData_WSOO, 0x0D9A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, FuelConsumeDecreaseDurabilityAmounts, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, RandomFuelUpdateTimeMin, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, RandomFuelUpdateTimeMax, 0x0DB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, LastDeactivatedTime, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, LastActivatedTime, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, ValidCraftingResourceMaxDurability, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, ActivationCooldownTime, 0x0DCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, UsablePriority, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, UnknownData_3CC8, 0x0DD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, DeathCacheCharacterID, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, LocalCorpseEmitter, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, SinglePlayerFuelConsumptionIntervalsMultiplier, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, PoweredBatteryDurabilityToDecreasePerSecond, 0x0DEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, DropInventoryDepositTraceDistance, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, UnknownData_3SF1, 0x0DF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer, ValidatedByPinCodePlayerControllers, 0x0DF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureItemContainer, 0x0E08);
		}

		// Class ShooterGame.MissionDispatcher
		TEST_METHOD(Class__ShooterGame__MissionDispatcher)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionDispatcher, StaticMeshComponent, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionDispatcher, ParticleSystemComponent, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionDispatcher, TheInventoryComponent, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionDispatcher, MissionActors, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionDispatcher, MissionTypes, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionDispatcher, AutoStartMissionTypesIndex, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionDispatcher, MissionDispatcherTriggerMode, 0x0E44);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionDispatcher, UnknownData_I0ZA, 0x0E45);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionDispatcher, AdditionalMissionTriggerKeys, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionDispatcher, UnknownData_ISK5, 0x0E5A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionDispatcher, RunningMission, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionDispatcher, MaxDistanceAllowToStartMission, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionDispatcher, UnknownData_HEQU, 0x0E6C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissionDispatcher, 0x0EC8);
		}

		// Class ShooterGame.MissionType
		TEST_METHOD(Class__ShooterGame__MissionType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionRoot, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionInventory, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionVersion, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_I7HE, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, PrereqMissionTags, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, PreventsStargingMissionsOfTags, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, BuffTagsThatPreventMission, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnlockPrequisites, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, PrereqMissionTypes, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionTimeOfDayUnlockTime, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionTimeOfDayLockTime, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, DispatchMode, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_U56E, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionDispatcherMaxDistance, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionWildDinoOutgoingDamageScale, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionWildDinoIncomingDamageScale, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MaxPlayerCount, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MaxDinosPerPlayerAllowedOnMission, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, GlobalMissionCooldown, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, PerPlayerMissionCooldown, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, TargetPlayerLevel, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MinPlayerLevel, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MaxPlayerLevel, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_XZMW, 0x0507);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionDisplayName, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionDescription, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionSuccessMessage, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionSuccessMessageColor, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionFailedMessage, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionFailedMessageColor, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionAlertTitle, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionInitiatedString, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionCompleteAlertDisplayTime, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_RQ5Y, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionIcon, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, CombatMusicOverride, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, RewardLootTable, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, RewardItemCount, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, RewardXPRatio, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, FirstTimeCompletionHexagonRewardBonus, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, FirstTimeCompletionHexagonRewardOverride, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, HexagonsOnCompletion, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, bDivideHexogonsOnCompletion, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, bAutoRewardFromCustomItemSets, 0x05C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, bRollExtraLootSetsPerPlayer, 0x05C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_FRHD, 0x05C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MinimumItemSetGenerationRolls, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, bEqualRewardsToAllParticipants, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_PEIS, 0x05CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, GenerateItemSetsQualityMultiplierMin, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, GenerateItemSetsQualityMultiplierMax, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MinItemSets, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MaxItemSets, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, NumItemSetsPower, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_IH00, 0x05E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, CustomItemSets, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_9OXW, 0x05F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, CustomMissionsUIRewardsLabelText, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, InitialMissionPhase, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, Phases, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, PhaseData, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionInventoryTemplate, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, LeaderboardType, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, DefaultLeaderboardRows, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, SuccessWorldBuffs, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, FailureWorldBuffs, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, DisableTekArmorBuffs, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_Q6VG, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, CustomMissionRequirements, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_TL2L, 0x06A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MinDistanceToWaypointMultiplier, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionDebugFlags, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_MNR5, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, TriggerKeys, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionMaxDurationSeconds, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionDurationConsoleOffsetSeconds, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionTimerUIMode, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionDurationUIMode, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_XTQU, 0x06CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionObjectiveTimeLabelString, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, LifetimeAfterDeactivated, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_KJ7A, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionStrings, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionBuffType, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, bListEntryOnly, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, bUseThrottledTick, 0x0701);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_Z93K, 0x0702);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, ThrottledTickTimeRange, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, bUseThrottledServerTick, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_J8CC, 0x070D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, ThrottledServerTickTimeRange, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, bUseThrottledClientTick, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_4X0C, 0x0719);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, ThrottledClientTickTimeRange, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_7TNI, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, StartedByCharacter, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, PlayersOnMission, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionStartNetworkTime, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, PostSetupMissionStartNetworkTime, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionState, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_9PRI, 0x0751);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, CurrentMissionMusic, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, DinoPathingSplines, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UseDynamicMissionStrings, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_RJYL, 0x0771);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, PrepAreaRadius, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, PrepDuration, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, bPrepUseTargetingTeamOfStartingPlayer, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, PrepTargetingTeamBehavior, 0x077D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_IMYU, 0x077E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, PrepAreaEmitter, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, bSetPrepAreaEmitterLifespanToPrepDuration, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_3EAB, 0x0789);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, PrepAreaPlayerInclusionParticles, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, bPrepAreaAutoSendNotificationToIncludedPlayers, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_PWAM, 0x0799);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, PrepAreaNotificationPrefix, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionSuccessSound, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionFailedSound, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, LevelsToLoad, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, LevelsToLoadSinglePlayerAndListenServer, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionPhaseStartedEvent, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionPhaseEndedEvent, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionDeactivatedEvent, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionResetTimerEvent, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionCustomData, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionDinos, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionStructures, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_ST4E, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionDroppedItems, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, TeleportedCharacters, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, PlayerUsableItems, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionDispatcher, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, PlayersPendingAddToMission, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_B7T1, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, Gen2TeleportBuff, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_7OI6, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionPhaseIndex, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_CCCL, 0x0914);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_JIFF, 0x09BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, MissionDepositInventoryClass, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, LastThrottledTickEventTime, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, CurrentThrottledTickEventInterval, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_AJ8G, 0x09D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, LastThrottledServerTickEventTime, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, CurrentThrottledServerTickEventInterval, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_H5HN, 0x09E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, LastThrottledClientTickEventTime, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, CurrentThrottledClientTickEventInterval, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_M8V5, 0x09F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, LastAutoSwitchPhaseTime, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, CurrentAutoSwitchPhaseInterval, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_NSVJ, 0x0A04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, SplineSpanwerTriggerKeys, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, OnFailureKillAllTamesInTileStreamingVolumeCustomTag, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, SplineSpawners, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, UnknownData_2D8T, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, ActivePreventsMissions, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType, ExtraReferences, 0x0AA0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissionType, 0x0AB0);
		}

		// Class ShooterGame.NewMissionModuleBase
		TEST_METHOD(Class__ShooterGame__NewMissionModuleBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMissionModuleBase, UnknownData_5L6P, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMissionModuleBase, ModuleTimeLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMissionModuleBase, TravelStruct, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMissionModuleBase, SubmodulesToRunAtStart, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMissionModuleBase, SubmodulesToRunOnComplete, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMissionModuleBase, MyOuter, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMissionModuleBase, ModuleNavPoints, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMissionModuleBase, UnknownData_FGHQ, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNewMissionModuleBase, 0x00A8);
		}

		// Class ShooterGame.MissionType_ModularMissionBase
		TEST_METHOD(Class__ShooterGame__MissionType_ModularMissionBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType_ModularMissionBase, UnknownData_15GP, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType_ModularMissionBase, Modules, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType_ModularMissionBase, DelayBeforeInitalModule, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType_ModularMissionBase, MissionTimeRemainingAfterEscapePhase, 0x0ACC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType_ModularMissionBase, MissionProjectiles, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType_ModularMissionBase, UnknownData_OEKY, 0x0AE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType_ModularMissionBase, CurrModule, 0x0AE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType_ModularMissionBase, CurrRequirementsTitle, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType_ModularMissionBase, CurrentModule, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType_ModularMissionBase, CurrentModuleStartTime, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType_ModularMissionBase, CurrentModuleTimeLimit, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType_ModularMissionBase, NumDeadMissionDinos, 0x0B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType_ModularMissionBase, NumDestroyedMissionStructures, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType_ModularMissionBase, UnknownData_Z9AE, 0x0B0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType_ModularMissionBase, SpawnedForModuleActors, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType_ModularMissionBase, SpecialWorldIndicators, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissionType_ModularMissionBase, AdditionalModules, 0x0B30);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissionType_ModularMissionBase, 0x0B40);
		}

		// Class ShooterGame.NPCSpawnEntriesContainer
		TEST_METHOD(Class__ShooterGame__NPCSpawnEntriesContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNPCSpawnEntriesContainer, NPCSpawnEntries, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNPCSpawnEntriesContainer, NPCSpawnLimits, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNPCSpawnEntriesContainer, MaxDesiredNumEnemiesMultiplier, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNPCSpawnEntriesContainer, UnknownData_Y5GL, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNPCSpawnEntriesContainer, 0x0050);
		}

		// Class ShooterGame.NPCZoneManager
		TEST_METHOD(Class__ShooterGame__NPCZoneManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, LinkedZoneVolumes, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, LinkedZoneSpawnVolumeEntries, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, DefaultZoneSpawnVolumeFloors, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, DefaultZoneSpawnVolumeFloorTags, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, NPCSpawnEntriesContainerObject, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bEnabled, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bForceInEditor, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bNeverSpawnInWater, 0x04B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bOnlySpawnInWater, 0x04B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, UnknownData_JDZ9, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, OnlyAllowSpawningOnActorTags, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bAllowExtentTest, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bOnlyCheckMySublevelWater, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, UnknownData_MSUD, 0x04CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, MinDesiredNumberOfNPC, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, SP_MinDesiredNumberOfNPC, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, UnknownData_8QKV, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, DesiredNumberOfNPCMultiplier, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, TheSpawnPointMinimumFloorNormal, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, TheNewNewEditorNumberOfNPCMultiplier, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, KillOffOverweightNPCStasisTime, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, UnknownData_3MPN, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, TheMinimumPlayerDistanceFromSpawnPoint, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, TheIncreaseNPCInterval, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, SP_TheIncreaseNPCInterval, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, TheIncreaseNPCIntervalMax, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, TheDecreaseNPCInterval, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, NPCAIRangeMultiplier, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, NPCAIAggroNotifyNeighborsRangeMultiplier, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bNPCDontWander, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bNPCWildIgnoreWild, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bNPCNoKillXP, 0x050A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bNPCPreventSaving, 0x050B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bForceUntameable, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bUsesManualSpawning, 0x050D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bIgnoreVolumeEcompassingCheck, 0x050E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bSpawnAllNPCEntries, 0x050F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bOnlyUseInSingleplayer, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bOnlyUseInDedicatedServer, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, UnknownData_DVW8, 0x0512);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, NPCWanderRadiusMultiplier, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, MaxNumberSpawnZoneRandomPointChecks, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, TheNPCFullIncreaseMaximumIterations, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, TheMinimumTamedDinoDistanceFromSpawnPoint, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, TheMinimumStructureDistanceFromSpawnPoint, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, NPCLerpToMaxRandomBaseLevel, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, ManualSpawningNPCLerpToMaxRandomBaseLevel, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, MaximumNumberNearbyCoreStructures, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, AbsoluteMaximumNumberNearbyCoreStructures, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bAutoKillUseGlobalStasisArray, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, UnknownData_KF6R, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, HardLimitWildDinosToVolume, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bTraceForSpawnAgainstWater, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bNPCForcePreventExitingWater, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bUseSpawnPointOverrideRotation, 0x054A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, UnknownData_M3SE, 0x054B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, NPCLimitTargetsToVolume, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, NPCLevelMultiplier, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, ForceOverrideNPCBaseLevel, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, UnknownData_2QRE, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, NumNPCSpawned, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, NumSpawnFailures, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, UnknownData_8CQ7, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, LastIncreaseNPCTime, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, LastDecreaseNPCTime, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, UnknownData_GKJ9, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, CloseStructureDistanceFromSpawnPoint, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, UnknownData_TOXQ, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, SpawnPointOverrides, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, NonDedicatedFreezeWildDinoPhysicsIfLevelUnloaded, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, NonDedicatedFreezeWildDinoPhysicsIfLevelsUnloaded, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, MinimumManualSpawnInterval, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, UnknownData_4TRA, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, LastManuallySpawnedTime, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bIgnoreNPCRandomClassReplacements, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, bAllowSpawnPointOverridesNonDedicatedLevelUnloadedFreezing, 0x05E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, UnknownData_HBAT, 0x05EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneManager, TheNPCDynamicIncreaseMaximumIterations, 0x05EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANPCZoneManager, 0x05F0);
		}

		// Class ShooterGame.NPCZoneSpawnVolume
		TEST_METHOD(Class__ShooterGame__NPCZoneSpawnVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANPCZoneSpawnVolume, 0x04A0);
		}

		// Class ShooterGame.NPCZoneVolume
		TEST_METHOD(Class__ShooterGame__NPCZoneVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneVolume, UnknownData_NS0N, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneVolume, OnlyCountDinoClasses, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneVolume, IgnoreDinoClasses, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneVolume, HibernatedEntities, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneVolume, HibernatedCountWeights, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANPCZoneVolume, UnknownData_K0E9, 0x04DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANPCZoneVolume, 0x04F8);
		}

		// Class ShooterGame.ObjectMap
		TEST_METHOD(Class__ShooterGame__ObjectMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectMap, ObjectsList, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectMap, UnknownData_BZ7X, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectMap, SizeX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectMap, SizeY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectMap, CellSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectMap, UnknownData_ZSIZ, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectMap, 0x0098);
		}

		// Class ShooterGame.ObjectSerializer
		TEST_METHOD(Class__ShooterGame__ObjectSerializer)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectSerializer, 0x0028);
		}

		// Class ShooterGame.OceanDinoManager
		TEST_METHOD(Class__ShooterGame__OceanDinoManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, ViewerNumDinosGatherRadius, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, ViewerDinoSpawnRadiusMin, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, ViewerDinoSpawnRadiusMax, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, ViewerDinoSpawnViewOffsetMin, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, ViewerDinoSpawnViewOffsetMax, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, UnknownData_BA29, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, OceanDinoDepthEntries, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, MaxValidSpawnPointAttempts, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, MaxNumViewersToUpdatePerFrame, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, ViewerNumDinosTargetMinPlayers, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, ViewerNumDinosTargetMaxPlayers, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, RaftMinViewerSpeed, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, UnknownData_GIEV, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, NumDinosMinPlayers, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, NumDinosMaxPlayers, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, KilledOceanDinoAreaDeathBuff, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, OceanVolumeTags, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, UnknownData_6KIE, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, MinViewerDeltaDistanceToRefreshOceanSpawns, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOceanDinoManager, UnknownData_JELY, 0x065C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOceanDinoManager, 0x0660);
		}

		// Class ShooterGame.PaintingTexture
		TEST_METHOD(Class__ShooterGame__PaintingTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaintingTexture, Revision, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaintingTexture, UnknownData_TPR1, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaintingTexture, Texture, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaintingTexture, UnknownData_GPXR, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaintingTexture, 0x0060);
		}

		// Class ShooterGame.PaintingCache
		TEST_METHOD(Class__ShooterGame__PaintingCache)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaintingCache, UnknownData_MR3C, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaintingCache, PaintingTextures, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaintingCache, UnknownData_5AU0, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaintingCache, 0x00E8);
		}

		// Class ShooterGame.PaintingStreamingComponent
		TEST_METHOD(Class__ShooterGame__PaintingStreamingComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaintingStreamingComponent, UnknownData_LZET, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaintingStreamingComponent, 0x0148);
		}

		// Class ShooterGame.PointOfInterestActor
		TEST_METHOD(Class__ShooterGame__PointOfInterestActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APointOfInterestActor, UnknownData_B44G, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APointOfInterestActor, PointRootComp, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APointOfInterestActor, PointUseSphereComp, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APointOfInterestActor, PointTextComp, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::APointOfInterestActor, PointTitleTextComp, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::APointOfInterestActor, UnknownData_ZXZU, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::APointOfInterestActor, MyPointOfInterestData, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APointOfInterestActor, MyPointOfInterestCompanionBehavior, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APointOfInterestActor, UseSphereLocOffset, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::APointOfInterestActor, UseSphereRadius, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APointOfInterestActor, TitleTextZOffset, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APointOfInterestActor, UnknownData_M4YY, 0x08A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APointOfInterestActor, MyPointManager, 0x08A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointOfInterestActor, 0x08B0);
		}

		// Class ShooterGame.PrimalEmitterSpawnable
		TEST_METHOD(Class__ShooterGame__PrimalEmitterSpawnable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalEmitterSpawnable, RootTransformComp, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalEmitterSpawnable, SoundToPlay, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalEmitterSpawnable, CameraShake, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalEmitterSpawnable, CameraShakeInnerRadius, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalEmitterSpawnable, CameraShakeOuterRadius, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalEmitterSpawnable, CameraShakeFalloff, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalEmitterSpawnable, CameraShakeScaleMultiplier, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalEmitterSpawnable, DecalToSpawn, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalEmitterSpawnable, UnknownData_TKSD, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalEmitterSpawnable, ShallowEmitterDontSpawnOutOfViewCheckRadius, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalEmitterSpawnable, ShallowEmitterOverrideSecondsBeforeInactive, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalEmitterSpawnable, ActivateSoundFadeInDuration, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalEmitterSpawnable, DeactivateSoundFadeOutDuration, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalEmitterSpawnable, ShallowEmitterSpawnableMaxDistance, 0x0514);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalEmitterSpawnable, 0x0518);
		}

		// Class ShooterGame.PrimalBuff
		TEST_METHOD(Class__ShooterGame__PrimalBuff)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, DeactivationLifespan, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, InstigatorAttachmentSocket, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, InstigatorAttachmentSocket_PlayerOverride, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_VO05, 0x052D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_BI60, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_RNFX, 0x0537);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, RemoteForcedFleeDuration, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, AoETraceToTargetsStartOffset, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, Target, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, InstigatorItem, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, SlowInstigatorFallingAddZVelocity, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, SlowInstigatorFallingDampenZVelocity, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, DeactivateAfterTime, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, WeaponRecoilMultiplier, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, ReceiveDamageMultiplier, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, MeleeDamageMultiplier, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, DepleteInstigatorItemDurabilityPerSecond, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, ValuesToAddPerSecond, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_D5J8, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, BuffDescription, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, CharacterAdd_DefaultHyperthermicInsulation, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, CharacterAdd_DefaultHypothermicInsulation, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, CharacterMultiplier_ExtraWaterConsumptionMultiplier, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, CharacterMultiplier_ExtraFoodConsumptionMultiplier, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, CharacterMultiplier_SubmergedOxygenDecreaseSpeed, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, ViewMinExposureMultiplier, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, ViewMaxExposureMultiplier, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, XPtoAdd, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, XPtoAddRate, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, DinoColorizationPriority, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, DinoColorizationInterpSpeed, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_FHSO, 0x0625);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, OverrideInventoryItemClassWeightMultipliers, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_V4KJ, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, SubmergedMaxSpeedModifier, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnsubmergedMaxSpeedModifier, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, SubmergedMaxAccelerationModifier, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnsubmergedMaxAccelerationModifier, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, SubmergedRotationRateModifier, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnsubmergedRotationRateModifier, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, FrictionModifier, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, CharacterStatusValueModifiers, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, BuffStartTime, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_HLOV, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bForcedOnSpectatorPlayerController, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_OX7W, 0x06D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, BuffPostProcessEffect, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, PreventActorClassesTargeting, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, PreventActorClassesTargetingRanges, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, RelatedMission, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bHasRelatedMission, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_4Y2L, 0x0711);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, PreventIfMovementMassGreaterThan, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_3549, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, AOEOtherBuffToApply, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, AOEBuffRange, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, CharacterAOEBuffDamage, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, CharacterAOEBuffResistance, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, Maximum2DVelocityForStaminaRecovery, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_BW26, 0x0739);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, PostprocessBlendablesToExclude, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_XOTQ, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, BuffToGiveOnDeactivation, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, BuffClassesToCancelOnActivation, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, ActivePreventsBuffClasses, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, BuffRequiresOwnerClass, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, BuffPreventsOwnerClass, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, XPEarningMultiplier, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bUseBPSetupForInstigator, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bUseBPDeactivated, 0x07B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bUseBPOverrideBuffToGiveOnDeactivation, 0x07B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bUseBPCustomAllowAddBuff, 0x07B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bUseBPInformDamageCauserOfBuffAdded, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_TWYI, 0x07BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, staticPathingDestination, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_UMFQ, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_84M5, 0x07D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, MyBuffPersistentData, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, BuffPersistentDataClass, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, MaxStatScalers, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, DamageCauser, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, ExtraActivationSoundToPlay, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bPersistentBuffSurvivesLevelUp, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_AIVV, 0x0809);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, AoEApplyDamage, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, AoEApplyDamageInterval, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_SGYP, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, AoEApplyDamageType, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, ForceNetworkSpatializationMaxLimitBuffType, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, ForceNetworkSpatializationBuffMaxLimitNum, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, ForceNetworkSpatializationBuffMaxLimitRange, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, InsulationRange, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, HyperThermiaInsulation, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, HypoThermiaInsulation, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, AoEBuffLocOffset, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, AoEClassesToInclude, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, AoEClassesToExclude, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bUseBPExcludeAoEActor, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bOverrideBuffDescription, 0x0869);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bOverrideBuffType, 0x086A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bOnlyTickIfPlayerCharacter, 0x086B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bOnlyTickWhenPossessed, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bDestroyWhenUnpossessed, 0x086D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_IZJ3, 0x086E);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, OnlyForInstigatorSoundFadeInTime, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bUseBuffTickServer, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bUseBuffTickClient, 0x087D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_88M9, 0x087E);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, BuffTickServerMaxTime, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, BuffTickServerMinTime, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, BuffTickClientMaxTime, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, BuffTickClientMinTime, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bUseRemoteClientTick, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_14RF, 0x0891);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, BuffTickRemoteClientMaxTime, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, BuffTickRemoteClientMinTime, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bContinueTickingServerAfterDeactivate, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bContinueTickingClientAfterDeactivate, 0x089D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_RXYL, 0x089E);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, AddBuffMaxNumStacks, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, DeactivatedSound, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bDeactivatedSoundOnlyLocal, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bDisableBloom, 0x08D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bBPModifyCharacterFOV, 0x08D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_HBYM, 0x08D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, PostProcessInterpSpeedDown, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, PostProcessInterpSpeedUp, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, TPVCameraSpeedInterpolationMultiplier, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bIsCarryBuff, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_ZIR4, 0x08E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, PostprocessMaterialAdjusters, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_M5JP, 0x08FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, AOEBuffIntervalMin, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, AOEBuffIntervalMax, 0x090C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, MaximumVelocityZForSlowingFall, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_4UH8, 0x0914);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_8MV2, 0x0919);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bAddTPVCameraOffset, 0x091D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bOverrideTPVCameraOffset, 0x091E);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_OJEH, 0x091F);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, TPVCameraOffset, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bOverrideTPVCameraOffsetMultiplier, 0x092C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_NSQW, 0x092D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, TPVCameraOffsetMultiplier, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bUseCenteredTPVCamera, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bUseBlueprintAnimNotifications, 0x093D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_269Z, 0x093F);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_ANOH, 0x0941);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_4RC4, 0x0945);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, CharacterMultiplier_DefaultExtraDamageMultiplier, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_M46S, 0x0951);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, StaminaDrainMultiplier, 0x0954);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bUseBPGetPlayerFootStepSound, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_ZH1K, 0x0959);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, DisabledWeaponTags, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bUseBPGetCrosshairColor, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bUseBPModifyArmorValue, 0x0971);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, bShowMammalIncubationOptions, 0x0972);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff, UnknownData_2RCH, 0x0973);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalBuff, 0x0978);
		}

		// Class ShooterGame.PrimalBuff_Companion
		TEST_METHOD(Class__ShooterGame__PrimalBuff_Companion)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CompanionRoot, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CompanionMeshComp, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CompanionUseSphereComp, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, MyPlayer, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, MyPC, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, UnknownData_9E7Q, 0x09A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, ReachPointOrbitWithinDist, 0x09A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, ReactionDialogVolumeMultiplier, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CompanionViewDot, 0x09AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CompanionSoundAttenuation, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, DefaultMissionCompanionReactionData, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CurrentCompanionReactionVFX, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CurrentCompanionReactionSFX, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CurrentPointsOfInterest, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CompanionState_Current, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CompanionState_Previous, 0x09E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, UnknownData_79SK, 0x09E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, ReactionStack, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, DialogueIconOverrideStack, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CurrentIDStack, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CurrentFocusedLocation, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, UnknownData_EZMC, 0x0A24);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CurrentFocusedPointData, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CurrentEventData, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CurrentEventActor, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, LastPointTag_StartOrbit, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, LastPointTag_ReachedOrbit, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, LastPlayedReactionNetworkTime, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, UnknownData_TQM0, 0x0E91);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, PreviouslyPlayedReaction, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, UnknownData_3NPC, 0x0F39);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, FullyTranslatedLanguages, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, HUDOverlayToolTipWidgetExtended, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, ReactionExplorerNotesToUnlock, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, AsyncLoadedDialogueAnimTexture, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, AsyncLoadedSoundCue, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, AsyncLoadedSoundWave, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, AnimTextureParamName, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, AnimTextureStartTimeParamName, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, AnimTextureDurationParamName, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, AnimTextureDurationOffset, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, UnknownData_GLIK, 0x0F9E);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CurrentReactionSFXIndex, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, PreviousReactionSFXIndex, 0x0FA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CurrentSoundWaveStringAssetReference, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CurrentSoundCueStringAssetReference, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CurrentAnimTextureStringAssetReference, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, FallbackSubtitleAudioString, 0x0FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, MeshDynamicMaterials, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, CompanionReactionSubtitleIcon, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, DefaultReactionAnimtexture, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, LocalizedAudioTracks, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, IsUsingLocalizedAudioTrack, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, DebugBypassVRTeleportRestrictions, 0x1031);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, ForcedMonologueCheat, 0x1032);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, UnknownData_N61C, 0x1033);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, FinalBossFightEasy, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, UnknownData_1M0V, 0x1033);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, FinalBossFightMed, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, UnknownData_39U6, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, FinalBossFightHard, 0x1078);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, UnknownData_4UJ3, 0x1078);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, FinalBossFightFlowTest, 0x1098);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, UnknownData_ZCAP, 0x1098);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, AllowedHLNAFocusedSelectedRemoteTargetDistance, 0x10B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, UnknownData_CCIO, 0x10BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, OnReactionPlayed_Delegate, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, OnReactionStopped_Delegate, 0x10E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, OnReactionAnimPlayed_Delegate, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, OnReactionComponentSpawned_VFX_Delegate, 0x1108);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, OnReactionComponentSpawned_SFX_Delegate, 0x1118);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Companion, UnknownData_947J, 0x1128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalBuff_Companion, 0x1130);
		}

		// Class ShooterGame.CompanionEventTrigger
		TEST_METHOD(Class__ShooterGame__CompanionEventTrigger)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ACompanionEventTrigger, BoxTriggerComp, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACompanionEventTrigger, EventTitleTextComp, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACompanionEventTrigger, MyEventData, 0x08C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACompanionEventTrigger, 0x0910);
		}

		// Class ShooterGame.PointOfInterestCosmeticActor
		TEST_METHOD(Class__ShooterGame__PointOfInterestCosmeticActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APointOfInterestCosmeticActor, CosmeticRootComp, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APointOfInterestCosmeticActor, CosmeticParticlesComp, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APointOfInterestCosmeticActor, UnknownData_2EDY, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APointOfInterestCosmeticActor, MyPointOfInterestData, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointOfInterestCosmeticActor, 0x05C0);
		}

		// Class ShooterGame.PreviewImage
		TEST_METHOD(Class__ShooterGame__PreviewImage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, UnknownData_A682, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, FOV, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, UnknownData_16C2, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, RenderTarget, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, MeshScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, LightBrightness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, LightRotation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, MeshRotation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, CameraLocation, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, CameraRotation, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, AmbientSourceType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, UnknownData_HWTB, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, AmbientCubemap, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, AmbientLightColor, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, AmbientBrightness, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, GameWorld, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, PreviewComponents, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, PreviewMesh, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, PreviewWorld, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, CaptureComponent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, DirctionalLight, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, SkyLight, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewImage, LineBatcher, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewImage, 0x00E0);
		}

		// Class ShooterGame.PrimalAIState
		TEST_METHOD(Class__ShooterGame__PrimalAIState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIState, Pawn, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIState, AnimationCustomName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIState, ChildStates, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIState, ParentState, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIState, bUseBPCanAttack, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIState, bUseBPOverrideAttackWeight, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIState, UnknownData_LUDF, 0x0053);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalAIState, 0x0058);
		}

		// Class ShooterGame.PrimalAIStateBPBase
		TEST_METHOD(Class__ShooterGame__PrimalAIStateBPBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateBPBase, UnknownData_V58G, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateBPBase, MinTickEventTime, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateBPBase, MaxTickEventTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateBPBase, UnknownData_QYAR, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateBPBase, MinAttackTickTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateBPBase, MaxAttackTickTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateBPBase, UnknownData_F80W, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalAIStateBPBase, 0x00A0);
		}

		// Class ShooterGame.PrimalAIStateDinoMeleeState
		TEST_METHOD(Class__ShooterGame__PrimalAIStateDinoMeleeState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoMeleeState, SpawnProjectileClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoMeleeState, SpawnProjectileInterval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoMeleeState, SpawnProjectileSocket, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoMeleeState, UnknownData_5WRP, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoMeleeState, SecondarySwingRadiusTargetClasses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoMeleeState, SecondarySwingRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoMeleeState, SecondarySwingLocOffset, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalAIStateDinoMeleeState, 0x0090);
		}

		// Class ShooterGame.PrimalAIStateDinoFlyerGrab
		TEST_METHOD(Class__ShooterGame__PrimalAIStateDinoFlyerGrab)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoFlyerGrab, FirstHit, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalAIStateDinoFlyerGrab, 0x0098);
		}

		// Class ShooterGame.PrimalAIStateDinoGrabAndReleaseState
		TEST_METHOD(Class__ShooterGame__PrimalAIStateDinoGrabAndReleaseState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoGrabAndReleaseState, FirstHit, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalAIStateDinoGrabAndReleaseState, 0x0098);
		}

		// Class ShooterGame.PrimalAIStateDinoRangedState
		TEST_METHOD(Class__ShooterGame__PrimalAIStateDinoRangedState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoRangedState, AccuracyWeight, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoRangedState, ClampAngle, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoRangedState, WorldGeometryTargetLocOffset, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoRangedState, CharacterTargetLocOffset, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoRangedState, UnknownData_3020, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoRangedState, AimSocket, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoRangedState, UnknownData_6FRX, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoRangedState, RangedSockets, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoRangedState, SpreadOffset, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoRangedState, UnknownData_VV62, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalAIStateDinoRangedState, 0x00A0);
		}

		// Class ShooterGame.PrimalAIStateBotRangedState
		TEST_METHOD(Class__ShooterGame__PrimalAIStateBotRangedState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateBotRangedState, bDrawDebug, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateBotRangedState, UnknownData_OROR, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateBotRangedState, ChanceBotWillAimDirectlyAtPlayer, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateBotRangedState, ChanceBotWillAimDirectlyAtDino, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateBotRangedState, ChanceBotWillCompletelyMissPlayer, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateBotRangedState, ChanceBotWillCompletelyMissDino, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateBotRangedState, ConeHalfAngle, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateBotRangedState, ConeHalfAngleRandRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateBotRangedState, bUseBPGetSocketLocation, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateBotRangedState, UnknownData_TA7V, 0x00BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalAIStateBotRangedState, 0x00C0);
		}

		// Class ShooterGame.PrimalAIStateDinoSpiderRangedWebState
		TEST_METHOD(Class__ShooterGame__PrimalAIStateDinoSpiderRangedWebState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderRangedWebState, SprayStartSocket, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderRangedWebState, SprayEndSocket, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderRangedWebState, UnknownData_DVAZ, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderRangedWebState, TimeBetweenProjectile, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderRangedWebState, LeadTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderRangedWebState, UnknownData_2ROH, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderRangedWebState, NextSprayTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderRangedWebState, SpreadOffsetPitch, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderRangedWebState, NumberOfProjectilesMultiplier, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalAIStateDinoSpiderRangedWebState, 0x00D0);
		}

		// Class ShooterGame.PrimalAIStateDinoSpineyLizardTailRangeState
		TEST_METHOD(Class__ShooterGame__PrimalAIStateDinoSpineyLizardTailRangeState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpineyLizardTailRangeState, UnknownData_TPNO, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalAIStateDinoSpineyLizardTailRangeState, 0x00A8);
		}

		// Class ShooterGame.PrimalAIStateDinoSpiderMinions
		TEST_METHOD(Class__ShooterGame__PrimalAIStateDinoSpiderMinions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, MinionCharacterTypeClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, MinionCharacterTypeClasses, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, MinionCharacterTypeClassesWeights, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, MinionMaxCount, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, UnknownData_3CBZ, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, SpawnRandomOffset, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, SpawnFixedOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, EggSocket, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, bFirstBatch, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, bPreventMinionTaming, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, bPreventMinionSaving, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, UnknownData_2EMK, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, BatchMinionCoolDown, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, LastBatchTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, BatchCount, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, AbsoluteMaxMinions, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, RemainingMinionBatchCount, 0x00C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, UnknownData_FP7S, 0x00C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, OverrideMinionBaseLevel, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderMinions, NumMinionsToSpawn, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalAIStateDinoSpiderMinions, 0x00D0);
		}

		// Class ShooterGame.PrimalAIStateDinoSpiderRangedAcidState
		TEST_METHOD(Class__ShooterGame__PrimalAIStateDinoSpiderRangedAcidState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderRangedAcidState, SprayStartSocket, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderRangedAcidState, TimeBetweenProjectile, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderRangedAcidState, bScaleProjDamageByDinoDamage, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderRangedAcidState, bAimAtTarget, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderRangedAcidState, UnknownData_NBRQ, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalAIStateDinoSpiderRangedAcidState, NextSprayTime, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalAIStateDinoSpiderRangedAcidState, 0x0070);
		}

		// Class ShooterGame.PrimalBotRidingComponent
		TEST_METHOD(Class__ShooterGame__PrimalBotRidingComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalBotRidingComponent, Rider, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalBotRidingComponent, Claimer, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalBotRidingComponent, 0x00E8);
		}

		// Class ShooterGame.PrimalBuffPersistentData
		TEST_METHOD(Class__ShooterGame__PrimalBuffPersistentData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalBuffPersistentData, bPermanentlyPersist, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalBuffPersistentData, UnknownData_QHEU, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalBuffPersistentData, ForPrimalBuffClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalBuffPersistentData, ForPrimalBuffClassString, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalBuffPersistentData, 0x0048);
		}

		// Class ShooterGame.PrimalBuffPersistentData_MissionData
		TEST_METHOD(Class__ShooterGame__PrimalBuffPersistentData_MissionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalBuffPersistentData_MissionData, ActiveMission, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalBuffPersistentData_MissionData, ActiveMissionIndex, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalBuffPersistentData_MissionData, UnknownData_5RP8, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalBuffPersistentData_MissionData, missionData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalBuffPersistentData_MissionData, 0x0068);
		}

		// Class ShooterGame.PrimalCableActor
		TEST_METHOD(Class__ShooterGame__PrimalCableActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCableActor, CableComponent, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalCableActor, 0x0470);
		}

		// Class ShooterGame.PrimalCableComponent
		TEST_METHOD(Class__ShooterGame__PrimalCableComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCableComponent, AttachEndTo, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCableComponent, EndLocation, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCableComponent, CableLength, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCableComponent, NumSegments, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCableComponent, SubstepTime, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCableComponent, SolverIterations, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCableComponent, MaxParticleSpeed, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCableComponent, CableWidth, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCableComponent, NumSides, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCableComponent, TileMaterial, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCableComponent, bRenderFirstHalfOnly, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCableComponent, UnknownData_SUUY, 0x06C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalCableComponent, 0x06E0);
		}

		// Class ShooterGame.PrimalCharacter
		TEST_METHOD(Class__ShooterGame__PrimalCharacter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_1VMG, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, OldLocation, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, OldRotation, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, EffectorInterpSpeed, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, HalfLegLength, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, TwoLeggedVirtualPointDistFactor, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, FullIKDistance, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, IKAfterFallingTime, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, SimpleIkRate, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, GroundCheckExtent, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_5QPU, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LastForceAimedCharactersTime, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, JumpAnim, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LandedAnim, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, HurtAnim, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, HurtAnim_Flying, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, PinnedAnim, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, HurtFX, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, HurtSound, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, RootBodyBoneName, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, HurtDecalData, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_GUEE, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_3RVQ, 0x0789);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, TribeName, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, WaterSubmergedDepthThreshold, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ProneWaterSubmergedDepthThreshold, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, SubmergedWaterMovementMode, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnSubmergedWaterMovementMode, 0x07A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_EQ5G, 0x07AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DamageTypeAdjusters, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, SnapshotScale, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_Q00S, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, SnapshotPoses, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, PoopItemClass, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, TaxidermySkinClass, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DragBoneName, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DragSocketName, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, MaxDragDistance, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, MaxDragDistanceTimeout, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, BonesToIngoreWhileDragged, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, PreviewCameraMaxZoomMultiplier, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, PreviewCameraDefaultZoomMultiplier, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, PreviewCameraDistanceScaleFactor, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_1LKT, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, StartDraggedSound, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, EndDraggedSound, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DraggedCharacter, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DraggingCharacter, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_POKQ, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, StasisConsumerRangeMultiplier, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_NE8P, 0x0889);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ImmobilizationActor, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_ZR9K, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_UEIA, 0x08A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, BPTimerServerMin, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, BPTimerServerMax, 0x08AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, BPTimerNonDedicatedMin, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, BPTimerNonDedicatedMax, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, NextBPTimerServer, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, NextBPTimerNonDedicated, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_KZK7, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LastCausedDamageTime, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_JV4M, 0x08DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ImmobilizationTrapsToIgnore, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_1503, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, CarryingDino, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DediOverrideCapsuleCollisionProfileName, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DediOverrideMeshCollisionProfileName, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, SnaredFromSocket, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DeathDestructionDepositInventoryClass, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DamageNotifyTeamAggroMultiplier, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DamageNotifyTeamAggroRange, 0x0924);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DamageNotifyTeamAggroRangeFalloff, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ReplicatedCurrentHealth, 0x092C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ReplicatedMaxHealth, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ReplicatedCurrentTorpor, 0x0934);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ReplicatedMaxTorpor, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_N4Y5, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LastGrapHookPullingMe, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_LGA6, 0x094D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LastGrapHookPullingOwner, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_NGVQ, 0x0959);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DragOffset, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_94G2, 0x096A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LastIkUpdateTime, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_LCSJ, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DraggedBoneIndex, 0x09A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, customBitFlags, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, RunningSpeedModifier, 0x09AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_5N0Q, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DeathAnim, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DeathSound, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, RunLoopSound, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, RunStopSound, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, FootStepSoundsPhysMat, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LandedSoundsPhysMat, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, MeshRootSocketName, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_29FT, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, MaxFallSpeed, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, FallDamageMultiplier, 0x0A14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, RunLoopAC, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DraggingConstraint, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_04HO, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, CurrentTransponder, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_QTTC, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ServerTargetCarriedYaw, 0x0B94);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, NetDynamicMusicSound, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, MountedDino, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, MountedDinoTime, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_MASW, 0x0BAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LastBasedMovementActorRef, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, GrabWeightThreshold, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DragWeight, 0x0BE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DescriptiveName, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ReplicatedRagdollPositions, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ReplicatedRagdollRotations, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_I4ZV, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, KillXPBase, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_EHHX, 0x0C6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, RagdollReplicationInterval, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_YA3A, 0x0C84);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, BoneDamageAdjusters, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ClientRotationInterpSpeed, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ClientLocationInterpSpeed, 0x0C9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, MaxDragMovementSpeed, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, CurrentAimRot, 0x0CA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, CurrentRootLoc, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_UUFA, 0x0CBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, MyCharacterStatusComponent, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_NHXO, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, MyInventoryComponent, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, SyncedMontage, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_W8AQ, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, MontageSyncInterval, 0x0CFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LastRunningTime, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, TPVCameraOffset, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, TPVCameraOffsetMultiplier, 0x0D14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, TPVCameraOrgOffset, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LandedSoundMaxRange, 0x0D2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, FallingDamageHealthScaleBase, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, FootstepsMaxRange, 0x0D34);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, MinTimeBetweenFootsteps, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_Q2DR, 0x0D3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, MinTimeBetweenFootstepsRunning, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_RSD8, 0x0D4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, AnimationsPreventInput, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DeathHarvestingComponent, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, MyDeathHarvestingComponent, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_ADEJ, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LastDamageEventInstigator, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_V7NJ, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, PreDragComponentUpdateFlag, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, TargetableDamageFXDefaultPhysMaterial, 0x0DB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_WOE7, 0x0DB2);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, PoopAnimation, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, CorpseDestructionTime, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, CorpseLifespan, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, TPVStructurePlacingHeightMultiplier, 0x0DCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, CorpseFadeAwayTime, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, RagdollDeathImpulseScaler, 0x0DD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, PoopSound, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, BaseTargetingDesirability, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DeadBaseTargetingDesirability, 0x0DE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_V7QH, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, OrbitCamZoom, 0x0DF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, OrbitCamZoomStepSize, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, OrbitCamMinZoomLevel, 0x0DFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, OrbitCamMaxZoomLevel, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_U9FH, 0x0E04);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, MaxCursorHUDDistance, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, AddForwardVelocityOnJump, 0x0E34);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DeathActorTargetingOffset, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, SocketOverrideTargetingLocation, 0x0E44);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_WJSY, 0x0E4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LastTimeSubmerged, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_IV48, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, FootPhysicalSurfaceCheckInterval, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_9IQZ, 0x0E8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LastAttackedNearbyPlayer, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LastAttackedNearbyPlayerTime, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_O0TF, 0x0EA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, RagdollImpactDamageVelocityScale, 0x0EBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, RagdollImpactDamageMinDecelerationSpeed, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, StartFallingImpactRagdollTimeInterval, 0x0EC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_ZA12, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, EnteredSwimmingSound, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, EnteredSleepingSound, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LeftSleepingSound, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_TNY0, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, CorpseDraggedDecayRate, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, PoopAltItemChance, 0x0F44);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, PoopAltItemClass, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DefaultBuffs, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, PoopIcon, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, RunningMaxDesiredRotDelta, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_WBGS, 0x0F6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, CorpseDestructionTimer, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LastSkinnedTime, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_DG03, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, OnDied, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, OnNotifyDamage, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, OnSleepStateChanged, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, NotifyLevelUp, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, NotifyUnstasis, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, NotifyStasis, 0x0FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_8VTU, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LastTimeInSwimming, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_BOC7, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DefaultNoItemTextureParamOverrides, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_MC27, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, PaintingComponent, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ExtraMaxSpeedModifier, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ExtraRotationRateModifier, 0x1034);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, TamedDinoCallOutRange, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_CYO5, 0x103C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, TargetPathfindingLocationOffset, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_DT3S, 0x1054);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LastTookDamageTime, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ExtraReceiveDamageMultiplier, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ExtraMeleeDamageMultiplier, 0x1064);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_79G7, 0x1068);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DamageTheMeleeDamageCauserPercent, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DurabilityDegrateTheMeleeDamageCauserPercent, 0x1084);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, DamageTheMeleeDamageCauserDamageType, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, TribeGroupInventoryRank, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_G5VD, 0x1091);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, CharacterDamageImpulseMultiplier, 0x1094);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_9VPM, 0x1098);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, MaxRagdollDeathVelocityImpulse, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ClientRotationInterpSpeedMultiplierGround, 0x10B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, GlideGravityScaleMultiplier, 0x10B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, GlideMaxCarriedWeight, 0x10BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_L9JP, 0x10C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ScaleDeathHarvestHealthyByMaxHealthBase, 0x10C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_9P37, 0x10CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, NotifyInputEvent, 0x10D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_R8UW, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, RunMinVelocityRotDot, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_ZF7F, 0x10F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, LastHitDamageTime, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, bShouldBeInGodMode, 0x1100);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_ZGVP, 0x1101);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, MeshingTickCounterMultiplier, 0x1108);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_VOGW, 0x110C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, PreventBuffClasses, 0x1110);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, PreventBuffClassesWithTag, 0x1120);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_PWFP, 0x1133);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, ControlledInventoryAccessDistanceOffset, 0x1134);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, OnOrbitCameraViewChange, 0x1138);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, AdditionalMaxUseDistance, 0x1148);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalCharacter, UnknownData_NEWZ, 0x114C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalCharacter, 0x1150);
		}

		// Class ShooterGame.PrimalDinoCharacter
		TEST_METHOD(Class__ShooterGame__PrimalDinoCharacter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_6F3B, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ForcedMasterTarget, 0x1184);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MountCharacterSocketName, 0x118C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MountCharacter, 0x1194);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_6N3E, 0x119C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RidingAttackExtraVelocity, 0x11A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_MVBC, 0x11AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StartChargeAnimation, 0x11B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AttackAnimations, 0x11B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AttackAnimationWeights, 0x11C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AttackAnimationsTimeFromEndToConsiderFinished, 0x11D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ColorizationIntensity, 0x11EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_BBSD, 0x11F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FemaleMaterialOverrides, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_IN6S, 0x1209);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, PaintConsumptionMultiplier, 0x120C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ChargingBlockedStopTimeThreshold, 0x1210);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_YKGL, 0x1214);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MeleeSwingSockets, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MeleeDamageAmount, 0x1228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MeleeDamageImpulse, 0x122C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MeleeSwingRadius, 0x1230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_M10C, 0x1234);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AttackInfos, 0x1238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, CurrentAttackIndex, 0x1248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LastAttackIndex, 0x1249);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_HZGP, 0x124A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MeleeDamageType, 0x1250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StepActorDamageTypeOverride, 0x1258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AttackOffset, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FleeHealthPercentage, 0x1264);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BreakFleeHealthPercentage, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_X0OU, 0x126C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamerString, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedName, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, HibernatedZoneVolumes, 0x1290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OverlayTooltipPadding, 0x12A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OverlayTooltipScale, 0x12A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, HUDOverlayToolTipWidget, 0x12B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MyDinoEntry, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RiderFPVCameraOffset, 0x12C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_2HMV, 0x12CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FinalNPCLevelMultiplier, 0x12F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LandingTraceMaxDistance, 0x12F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FlyingWanderFixedDistanceAmount, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FlyingWanderRandomDistanceAmount, 0x12FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AcceptableLandingRadius, 0x1300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MaxLandingTime, 0x1304);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, GenderSpeedMultipliers, 0x1308);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ChargeSpeedMultiplier, 0x1310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_SR4I, 0x1314);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ChargingAnim, 0x1318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ChargingStaminaPerSecondDrain, 0x1320);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ChargingStopDotTreshold, 0x1324);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_NKXW, 0x1328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, Rider, 0x1340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, PreviousRider, 0x1348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SaddleItemClass, 0x1350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SaddleSlotNameOverride, 0x1358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, NoSaddlePassengerSeats, 0x1368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, CarriedCharacter, 0x1378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_D4ML, 0x1380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DinoWithPassengerAnim, 0x1388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DinoWithDinoPassengerAnim, 0x1390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, PassengerPerSeat, 0x1398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SavedPassengerPerSeat, 0x13A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_FF5U, 0x13B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LastClientCameraRotationServerUpdate, 0x13C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OverrideTargetComponents, 0x13D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WhistleTraceOffset, 0x13E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_G8V5, 0x13E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LastPlayedAttackAnimation, 0x13F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AttackIndexOfPlayedAnimation, 0x13F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_D3OF, 0x13F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DinoBaseLevelWeightEntries, 0x1400);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_50WL, 0x1410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RidingFirstPersonViewLocationOffset, 0x1480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyChanceOfTwins, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyGestationSpeed, 0x1498);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ExtraBabyGestationSpeedMultiplier, 0x14A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AutoFadeOutAfterTameTime, 0x14A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BasedCameraSpeedMultiplier, 0x14B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_9U8H, 0x14B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LastEggBoostedTime, 0x14B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WildPercentageChanceOfBaby, 0x14C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WildBabyAgeWeight, 0x14C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyGestationProgress, 0x14C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FlyerForceLimitPitchMin, 0x14CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FlyerForceLimitPitchMax, 0x14D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_3TQH, 0x14D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyChanceOfTriplets, 0x14DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyAge, 0x14E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MaxPercentOfCapsulHeightAllowedForIK, 0x14E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SlopeBiasForMaxCapsulePercent, 0x14E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FlyingForceRotationRateModifier, 0x14EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, HideBoneNames, 0x14F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, HideBonesString, 0x1500);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WaterSurfaceExtraJumpVector, 0x1510);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FlyerTakeOffAdditionalVelocity, 0x151C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OpenDoorDelay, 0x1528);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedWanderHarvestInterval, 0x152C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedWanderHarvestSearchRange, 0x1530);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedWanderHarvestCollectRadius, 0x1534);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedWanderHarvestCollectOffset, 0x1538);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RootLocSwimOffset, 0x1544);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, PlayAnimBelowHealthPercent, 0x1548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LeavePlayAnimBelowHealthPercent, 0x154C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, PlatformSaddleMaxStructureBuildDistance2D, 0x1550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_IKNM, 0x1554);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, PlayAnimBelowHealth, 0x1558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LowHealthExitSound, 0x1560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LowHealthEnterSound, 0x1568);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LowHealthDinoSettings, 0x1570);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SwimOffsetInterpSpeed, 0x1578);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_8JVO, 0x157C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AIRangeMultiplier, 0x1580);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, PreventColorizationRegions, 0x1584);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AllowPaintingColorRegions, 0x158A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ColorSetIndices, 0x1590);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_E8XA, 0x1596);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ColorSetNames, 0x1598);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ColorSetIntensityMultipliers, 0x15C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ColorOverrideBuff, 0x15E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_O4U3, 0x15E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MeleeAttackStaminaCost, 0x15F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WakingTameAnimation, 0x15F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, Target, 0x1600);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedFollowTarget, 0x1608);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedLandTarget, 0x1610);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, PercentChanceFemale, 0x1618);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_XXEG, 0x161C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DeathGiveItemClasses, 0x1620);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DeathGiveItemChanceToBeBlueprint, 0x1630);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DeathGiveItemQualityMin, 0x1640);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DeathGiveItemQualityMax, 0x1644);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DeathGiveItemRange, 0x1648);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_0617, 0x164C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DeathGiveAchievement, 0x1650);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OverrideAreaMusic, 0x1660);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnboardLocationOffset, 0x1668);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_30DT, 0x1674);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RidingNetUpdateFequency, 0x1688);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RiderMaxSpeedModifier, 0x168C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RiderExtraMaxSpeedModifier, 0x1690);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RiderMaxRunSpeedModifier, 0x1694);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RiderRotationRateModifier, 0x1698);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SwimmingRotationRateModifier, 0x169C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, chargingRotationRateModifier, 0x16A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_0WBJ, 0x16A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, EnterFlightAnim, 0x16A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ExitFlightAnim, 0x16B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SleepConsumeFoodAnim, 0x16B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WakingConsumeFoodAnim, 0x16C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FallAsleepAnim, 0x16C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedUnsleepAnim, 0x16D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WildUnsleepAnim, 0x16D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OpenDoorAnim, 0x16E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ControlFacePitchInterpSpeed, 0x16E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedWalkableFloorZ, 0x16EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, CurrentMovementAnimRate, 0x16F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MinPlayerLevelForWakingTame, 0x16F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_FN5W, 0x16F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedInventoryComponentTemplate, 0x1700);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DeathInventoryTemplates, 0x1708);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DeathInventoryChanceToUse, 0x1728);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WakingTameFeedInterval, 0x172C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_RKK7, 0x1730);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DeathInventoryQualityPerLevelMultiplier, 0x1738);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RequiredTameAffinity, 0x173C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RequiredTameAffinityPerBaseLevel, 0x1740);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedAITargetingRange, 0x1744);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_G2JV, 0x1747);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, PassengerBoneNameOverride, 0x1748);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, CurrentTameAffinity, 0x1750);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TameIneffectivenessModifier, 0x1754);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TameIneffectivenessByAffinity, 0x1758);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_SCAG, 0x175C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, bUseBPIsValidUnStasisCaster, 0x1760);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_F7ZA, 0x1761);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SaddleStructures, 0x1768);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MaxSaddleStructuresHeight, 0x1778);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, CalculateStructureHeightFromSaddle, 0x177C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, CalculateStructureDistanceFromSaddle, 0x177D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_DPR5, 0x177E);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SaddlePivotOffset, 0x1780);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MaxSaddleStructuresNum, 0x1784);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DinoSettingsClass, 0x1788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamingFoodConsumeInterval, 0x1790);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DediForceAttackAnimTime, 0x1794);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DediForceStartAttackAfterAnimTime, 0x1798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WakingTameFoodIncreaseMultiplier, 0x179C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamingTeamID, 0x17A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OwningPlayerID, 0x17A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OwningPlayerName, 0x17A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamingLastFoodConsumptionTime, 0x17B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DinoID1, 0x17C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DinoID2, 0x17C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_HWIK, 0x17C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedAggressionLevel, 0x17D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamingIneffectivenessModifierIncreaseByDamagePercent, 0x17D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_HPW2, 0x17DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LinkedSupplyCrate, 0x17E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UntamedPoopTimeMinInterval, 0x17EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UntamedPoopTimeMaxInterval, 0x17F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MeleeHarvestDamageMultiplier, 0x17F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AllowRidingMaxDistance, 0x17F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UntamedPoopTimeCache, 0x17FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BaseEggClass, 0x1800);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, EggItemsToSpawn, 0x1808);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, EggWeightsToSpawn, 0x1818);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FertilizedEggItemsToSpawn, 0x1828);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FertilizedEggWeightsToSpawn, 0x1838);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, EggChanceToSpawnUnstasis, 0x1848);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, EggIntervalBetweenUnstasisChances, 0x184C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, EggRangeMaximumNumberFromSameDinoType, 0x1850);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, EggMaximumNumberFromSameDinoType, 0x1854);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, EggRangeMaximumNumber, 0x1858);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, EggMaximumNumber, 0x185C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, EggSpawnSocketName, 0x1860);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, EggLayingAnimation, 0x1868);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UntamedWalkingSpeedModifier, 0x1870);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedWalkingSpeedModifier, 0x1874);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UntamedRunningSpeedModifier, 0x1878);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedRunningSpeedModifier, 0x187C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RandomColorSetsMale, 0x1880);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RandomColorSetsFemale, 0x1888);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SpawnerColorSets, 0x1890);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RiderAnimOverride, 0x1898);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TurningRightRiderAnimOverride, 0x18A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TurningLeftRiderAnimOverride, 0x18A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LatchedRiderAnimOverride, 0x18B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RiderMoveAnimOverride, 0x18B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RidingAnimSpeedFactor, 0x18C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_UZKN, 0x18C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StartRidingAnimOverride, 0x18C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StopRidingAnimOverride, 0x18D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TargetingTeamNameOverride, 0x18D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ExtraTamedSpeedMultiplier, 0x18E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ExtraUnTamedSpeedMultiplier, 0x18E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LastEggSpawnChanceTime, 0x18E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OriginalNPCVolumeName, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OutsideOriginalNPCVolumeStasisDestroyInterval, 0x18F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StasisedDestroyInterval, 0x18FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedAllowNamingTime, 0x1900);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MovementSpeedScalingRotationRatePower, 0x1904);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AttackNoStaminaTorpidityMultiplier, 0x1908);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DecayDestructionPeriod, 0x190C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedAtTime, 0x1910);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LastInAllyRangeTime, 0x1918);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_D8NO, 0x1920);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LatchedOnStructures, 0x1930);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MyDinoSettingsCDO, 0x1940);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_1NSB, 0x1948);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LocInterpolationSnapDistance, 0x194C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_QB6F, 0x1950);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, HUDScaleMultiplier, 0x1960);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, HUDTextScaleMultiplier, 0x1964);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedCorpseLifespan, 0x1968);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MateBoostDamageReceiveMultiplier, 0x196C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MateBoostDamageGiveMultiplier, 0x1970);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MateBoostRange, 0x1974);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DinoNameTag, 0x1978);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AttackMyTargetForPlayerController, 0x1980);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RidingAttackExtraVelocityDelay, 0x1988);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StepDamageRadialDamageInterval, 0x198C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StepDamageRadialDamageExtraRadius, 0x1990);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StepDamageRadialDamageAmountGeneral, 0x1994);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StepDamageRadialDamageAmountHarvestable, 0x1998);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_3G8R, 0x199C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StepHarvestableDamageType, 0x19A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StepDamageFootDamageInterval, 0x19B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StepDamageFootDamageRadius, 0x19B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StepDamageFootDamageAmount, 0x19B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_T0IL, 0x19BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StepDamageFootDamageSockets, 0x19C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DurationBeforeMovingStuckPawn, 0x19D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_LJVP, 0x19D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StartledAnimationRightDefault, 0x19E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StartledAnimationLeft, 0x19F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StartledAnimations, 0x19F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FlyingStartledAnimation, 0x1A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RandomPlayStartledAnimIntervalMin, 0x1A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RandomPlayStartledAnimIntervalMax, 0x1A14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StartledAnimationCooldown, 0x1A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DefaultActivateAttackRangeOffset, 0x1A1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, CorpseTargetingMultiplier, 0x1A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_1GQ1, 0x1A24);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, CorpseLifespanNonRelevant, 0x1A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_F9VD, 0x1A3D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MinStaminaForRider, 0x1A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LoseStaminaWithRiderRate, 0x1A44);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FollowingRunDistance, 0x1A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MaxDinoKillerTransferWeightPercent, 0x1A4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, NPCZoneVolumeCountWeight, 0x1A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_2QPP, 0x1A54);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FloatingHUDTextWorldOffset, 0x1A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_OSFX, 0x1A64);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RepairRequirementsItem, 0x1AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_PAHD, 0x1AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RepairCheckInterval, 0x1ADC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RepairPercentPerInterval, 0x1AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RiderCheckTraceOffset, 0x1AE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RiderEjectionImpulse, 0x1AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WakingTameAffinityDecreaseFoodPercentage, 0x1AFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WakingTameAllowFeedingFoodPercentage, 0x1B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WakingTameFoodAffinityMultiplier, 0x1B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, CheckForWildAmbientHarvestingIntervalMin, 0x1B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, CheckForWildAmbientHarvestingIntervalMax, 0x1B0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_AHXX, 0x1B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WildAmbientHarvestingAnimation, 0x1B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WildAmbientHarvestingAnimations, 0x1B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WildAmbientHarvestingComponentClasses, 0x1B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WildAmbientHarvestingRadius, 0x1B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_B236, 0x1B44);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AbsoluteBaseLevel, 0x1B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_GPZF, 0x1B4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OverrideBaseStatLevelsOnSpawn, 0x1B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OverrideStatPriorityOnSpawn, 0x1B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedHarvestDamageType, 0x1B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SaddleStruct, 0x1B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_BVVI, 0x1B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StartChargingShake, 0x1BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LightEndChargingShake, 0x1BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, HardEndChargingShake, 0x1BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ChargeBumpDamage, 0x1BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_ZY2V, 0x1BD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ChargeBumpDamageType, 0x1BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ChargeBumpImpulse, 0x1BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MinChargeInterval, 0x1BE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, PlayerMountedLaunchFowardSpeed, 0x1BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, PlayerMountedLaunchUpSpeed, 0x1BEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AttackOnLaunchMaximumTargetDistance, 0x1BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, KeepFlightRemainingTime, 0x1BF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MountCharacterAnimation, 0x1BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnmountCharacterAnimation, 0x1C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, EndChargingAnimation, 0x1C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FlyingRunSpeedModifier, 0x1C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ChargingAnimDelay, 0x1C14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RiderSocketName, 0x1C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ChargingActivationRequiresStamina, 0x1C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ChargingActivationConsumesStamina, 0x1C24);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FlyerHardBreakingOverride, 0x1C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyScale, 0x1C2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabySpeedMultiplier, 0x1C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyPitchMultiplier, 0x1C34);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyVolumeMultiplier, 0x1C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WanderAroundActor, 0x1C3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WanderAroundActorMaxDistance, 0x1C44);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_MG2E, 0x1C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BuffGivenToBasedCharacters, 0x1C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_QLN1, 0x1C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LastUpdatedBabyAgeAtTime, 0x1C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LastUpdatedGestationAtTime, 0x1C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LastUpdatedMatingAtTime, 0x1C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyAgeSpeed, 0x1C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ExtraBabyAgeSpeedMultiplier, 0x1C94);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FemaleMatingRangeAddition, 0x1C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FemaleMatingTime, 0x1C9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, NextAllowedMatingTime, 0x1CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MatingProgress, 0x1CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_ERNG, 0x1CAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LastMatingNotificationTime, 0x1CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MatingWithDino, 0x1CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MatingAnimationMale, 0x1CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, GestationEggNumberOfLevelUpPointsApplied, 0x1CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, GestationEggTamedIneffectivenessModifier, 0x1CD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, GestationEggColorSetIndices, 0x1CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_ZJXA, 0x1CDE);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, NewFemaleMinTimeBetweenMating, 0x1CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, NewFemaleMaxTimeBetweenMating, 0x1CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DefaultTamedBuffs, 0x1CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_8XU0, 0x1CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, HyperThermiaInsulation, 0x1D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, HypoThermiaInsulation, 0x1D14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, InsulationRange, 0x1D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, GangOverlapRange, 0x1D1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, GangDamageResistance, 0x1D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, GangDamage, 0x1D24);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MaxGangCount, 0x1D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, GangCount, 0x1D2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_EU5T, 0x1D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WildRandomScale, 0x1D4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, HeldJumpSlowFallingGravityZScale, 0x1D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_PR5A, 0x1D54);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SlowFallingAnim, 0x1D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SlowFallingStaminaCostPerSecond, 0x1D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, NoRiderRotationModifier, 0x1D64);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RiderFPVCameraUseSocketName, 0x1D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RiderLatchedFPVCameraUseSocketName, 0x1D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, PassengerFPVCameraRootSocket, 0x1D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FPVRiderBoneNamesToHide, 0x1D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ExtraRunningSpeedModifier, 0x1D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ScaleExtraRunningSpeedModifierMin, 0x1D94);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ScaleExtraRunningSpeedModifierMax, 0x1D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ScaleExtraRunningSpeedModifierSpeed, 0x1D9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LastHigherScaleExtraRunningSpeedValue, 0x1DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_6UY0, 0x1DA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LastHigherScaleExtraRunningSpeedTime, 0x1DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_NPPU, 0x1DB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RiderMovementSpeedScalingRotationRatePowerMultiplier, 0x1DB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, HighQualityLedgeDetectionExtraTraceDistance, 0x1DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LoadDestroyWildDinosUnderVersion, 0x1DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SaveDestroyWildDinosUnderVersion, 0x1DC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AllowWaterSurfaceExtraJumpStaminaCost, 0x1DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_A8QH, 0x1DCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, PlayKillLocalSound, 0x1DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_S4BK, 0x1DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TribeGroupPetOrderingRank, 0x1DEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TribeGroupPetRidingRank, 0x1DED);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FollowStoppingDistance, 0x1DEE);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_A33C, 0x1DEF);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ImprinterName, 0x1DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ImprinterPlayerDataID, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyMinCuddleInterval, 0x1E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyMaxCuddleInterval, 0x1E0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyCuddleGracePeriod, 0x1E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyCuddleLoseImpringQualityPerSecond, 0x1E14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyCuddleWalkDistance, 0x1E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyCuddleWalkStartingLocation, 0x1E1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyNextCuddleTime, 0x1E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyCuddleType, 0x1E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_QZH8, 0x1E31);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyCuddleFood, 0x1E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyCuddledAnimation, 0x1E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MyBabyCuddleFoodTypes, 0x1E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RiderMaxImprintingQualityDamageReduction, 0x1E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RiderMaxImprintingQualityDamageMultiplier, 0x1E5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, BabyImprintingQualityTotalMaturationTime, 0x1E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WakingTameMaxDistance, 0x1E64);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TimeBetweenTamedWakingEatAnimations, 0x1E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_Q0SY, 0x1E6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StepDamageFootDamageRunningMultiplier, 0x1E7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_SKT7, 0x1E81);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, maxRangeForWeaponTriggeredTooltip, 0x1E84);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_X4Z8, 0x1E8B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StepRadialDamageOffset, 0x1E8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ForcePawnBigPushingForTime, 0x1E94);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_2O9C, 0x1E9B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WanderRadiusMultiplier, 0x1E9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_IR9E, 0x1EA3);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AIDinoForceActiveUntasisingRange, 0x1EA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WildRunningRotationRateModifier, 0x1EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedRunningRotationRateModifier, 0x1EAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedSwimmingRotationRateModifier, 0x1EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WildSwimmingRotationRateModifier, 0x1EB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, HardLimitWildDinoToVolume, 0x1EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WildLimitTargetVolume, 0x1EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RiderFlyingRotationRateModifier, 0x1EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, NoRiderFlyingRotationRateModifier, 0x1ECC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AICombatRotationRateModifier, 0x1ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WalkingRotationRateModifier, 0x1ED4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SetAttackTargetTraceDistance, 0x1ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SetAttackTargetTraceWidth, 0x1EDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_60XF, 0x1EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, PlayerMountedCarryAnimation, 0x1EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_UMDI, 0x1F05);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, HealthBarOffsetY, 0x1F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_HPL7, 0x1F0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OwnerMission, 0x1F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_1NI2, 0x1F1A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LimitRiderYawOnLatchedRange, 0x1F1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LatchingDistanceLimit, 0x1F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LatchingInitialYaw, 0x1F24);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LatchingInitialPitch, 0x1F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LatchingInterpolatedPitch, 0x1F2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LatchedFirstPersonViewAngle, 0x1F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LatchingCameraInterpolationSpeed, 0x1F34);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TargetLatchingInitialYaw, 0x1F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, CurrentStrafeMagnitude, 0x1F3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, GainStaminaWhenLatchedRate, 0x1F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AIAggroNotifyNeighborsClassesRangeScale, 0x1F44);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LastFrameMoveRight, 0x1F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LastFrameMoveLeft, 0x1F4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LastRiderMountedWeaponRotation, 0x1F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_2RG5, 0x1F5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DeathGivesDossierIndex, 0x1F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DeathGivesDossierDelay, 0x1F6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LastMovementDesiredRotation_MountedWeaponry, 0x1F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SaddleRiderMovementTraceThruSocketName, 0x1F7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SwimmingRunSpeedModifier, 0x1F84);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RidingSwimmingRunSpeedModifier, 0x1F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_9IR4, 0x1F8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DinoDownloadedAtTime, 0x1F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UploadedFromServerName, 0x1F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LatestUploadedFromServerName, 0x1FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, PreviousUploadedFromServerName, 0x1FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedOnServerName, 0x1FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DinoAncestors, 0x1FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DinoAncestorsMale, 0x1FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, NextBabyDinoAncestors, 0x1FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, NextBabyDinoAncestorsMale, 0x2008);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MaxAllowedRandomMutations, 0x2018);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RandomMutationRolls, 0x201C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RandomMutationChance, 0x2020);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RandomMutationGivePoints, 0x2024);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RandomMutationsMale, 0x2028);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, RandomMutationsFemale, 0x202C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, GestationEggRandomMutationsFemale, 0x2030);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, GestationEggRandomMutationsMale, 0x2034);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WakingTameDistanceSocketName, 0x2038);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, WakingTameConsumeEntireStackMaxQuantity, 0x2040);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AttackPlayerDesirabilityMultiplier, 0x2044);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_XOT6, 0x2048);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, FlyerAttachedExplosiveSpeedMultiplier, 0x2058);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_4NAH, 0x205C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DinoExtraDefaultInventoryItems, 0x2060);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DeathGiveEngramClasses, 0x2070);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SinglePlayerOutgoingDamageModifier, 0x2080);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SinglePlayerIncomingDamageModifier, 0x2084);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_G3XH, 0x2088);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DinoLevelUpAnimationOverride, 0x20B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DamageVictimClassesIgnoreBlockingGeomtryTrace, 0x20B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_9FI6, 0x20C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, CloneBaseElementCost, 0x20D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, CloneElementCostPerLevel, 0x20DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, LastValidTameVersion, 0x20E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SavedLastValidTameVersion, 0x20E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, NonDedicatedFreezeDinoPhysicsIfLevelUnloaded, 0x20E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, NonDedicatedFreezeWildDinoPhysicsIfLevelsUnloaded, 0x20F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnboardLocationTraceOffset, 0x2100);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AttackLineOfSightMeshSocketName, 0x210C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AttackForceWalkDistanceMultiplier, 0x2114);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, AttackForceWalkRotationRateMultiplier, 0x2118);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OverrideDinoTameSoundIndex, 0x211C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SwimSound, 0x2120);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SwimSoundIntervalPerHundredSpeed, 0x2128);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_4IUN, 0x212C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedAIControllerOverride, 0x2130);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, PersonalTamedDinoCost, 0x2138);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_LQ3E, 0x213C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UploadEarliestValidTime, 0x2140);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, StasisAutoDestroyInterval, 0x2148);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, CarryCameraYawOffset, 0x214C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ExtraDamageMultiplier, 0x2150);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ExtraTamedBaseHealthMultiplier, 0x2154);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, attackRangeOffset, 0x2158);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DinoExtraIncreasePlayerCollisionActivationDistanceSquared, 0x215C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_DCPD, 0x2160);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OverrideApproachRadius, 0x2164);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, TamedOverrideStasisComponentRadius, 0x2168);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_AXY4, 0x216C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UniqueDino_MapMarkerMesh, 0x2170);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UniqueDino_MapMarkerColor, 0x2178);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OverrideDinoMaxExperiencePoints, 0x217C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MaxDinoTameLevels, 0x2180);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, DestroyTamesOverLevelClampOffset, 0x2184);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, NursingTroughFoodEffectivenessMultiplier, 0x2188);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_9MZ1, 0x218C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, ForceAllowFoodAsConsumableList, 0x2190);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, CustomReplicatedData, 0x21A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_TWK1, 0x21A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OnNotifySetRider, 0x21A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OnNotifyClearRider, 0x21B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OnSetMountedDino, 0x21C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OnClearMountedDino, 0x21D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OnNotifyAddPassenger, 0x21E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OnNotifyClearPassenger, 0x21F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, NextAllowedBedUseTime, 0x2208);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UseBedCooldownTime, 0x2210);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_EK1V, 0x2216);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, CarriedAsBabyPassengerSizeLimitOverride, 0x2218);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, MutagenBaseCost, 0x221C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, PaintTextureResolution, 0x2220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_5Z14, 0x2224);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OnFlyerStartLanding, 0x2228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OnFlyerLanded, 0x2238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, OnFlyerLandingInterrupted, 0x2248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, bOnlyDrawFloatingHUDAsLocalPlayerController, 0x2258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, bHasPlayerController, 0x2259);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_AZJK, 0x225A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, CopyDinoSettingsRangeMesh, 0x2260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, GestationGenderOverride, 0x2268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_ABZW, 0x226A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, SecondaryInventoryComponent, 0x2270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalDinoCharacter, UnknownData_UL60, 0x2278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalDinoCharacter, 0x2280);
		}

		// Class ShooterGame.PrimalBotCharacter
		TEST_METHOD(Class__ShooterGame__PrimalBotCharacter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotCharacter, AlternateSkeletalMesh, 0x2278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotCharacter, AlternateAnimBP, 0x2280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotCharacter, AlternateDinoRidingAnimation, 0x2288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotCharacter, AlternateDinoRidingMoveAnimation, 0x2290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotCharacter, HasMeleeWeapon, 0x2298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotCharacter, UnknownData_Y198, 0x2299);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotCharacter, RideableDinoClasses, 0x22A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotCharacter, bIsRiding, 0x22B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotCharacter, UnknownData_4R6M, 0x22B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotCharacter, DefaultDinoRidingAnimation, 0x22B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotCharacter, DefaultDinoRidingMoveAnimation, 0x22C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotCharacter, UseAltAimOffsetAnimation, 0x22C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotCharacter, bIsStationary, 0x22C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotCharacter, UnknownData_5XKO, 0x22CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotCharacter, DinoBeingRidden, 0x22CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotCharacter, bIsUsingAlternateMesh, 0x22D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotCharacter, UnknownData_U66V, 0x22D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalBotCharacter, 0x2330);
		}

		// Class ShooterGame.PrimalRaft
		TEST_METHOD(Class__ShooterGame__PrimalRaft)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalRaft, Icon, 0x2278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalRaft, MovingSoundComponent, 0x2280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalRaft, MovingSoundCue, 0x2288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalRaft, RaftSpawnEffect, 0x2290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalRaft, NetworkCreationTime, 0x2298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalRaft, UnknownData_CJV0, 0x22A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalRaft, SurfaceAdjustmentZInterpSpeed, 0x22A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalRaft, UnknownData_3GOA, 0x22A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalRaft, 0x22C0);
		}

		// Class ShooterGame.PrimalWheeledVehicleCharacter
		TEST_METHOD(Class__ShooterGame__PrimalWheeledVehicleCharacter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, VehicleMovement, 0x2278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, RetainPlayerCameraRotationWhileMovingFor, 0x2280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, CameraRotationInterpolationSpeed, 0x2284);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, DustType, 0x2288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, DustPSC, 0x2290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, EngineAC, 0x22B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, HonkAC, 0x22B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, SkidAC, 0x22C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, SkidSound, 0x22C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, HonkSound, 0x22D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, SkidSoundStop, 0x22D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, LandingSound, 0x22E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, ImpactSound, 0x22E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, SkidFadeoutTime, 0x22F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, SkidThresholdVelocity, 0x22F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, LongSlipSkidThreshold, 0x22F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, LateralSlipSkidThreshold, 0x22FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, SkidDurationRequiredForStopSound, 0x2300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, UnknownData_3U0F, 0x2304);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, SpringCompressionLandingThreshold, 0x2310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, UnknownData_MZ8U, 0x2314);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, DeathFX, 0x2318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, UpForce, 0x2320);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, BackForce, 0x2324);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, bFollowCamera, 0x2328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, UnknownData_4AH7, 0x2329);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, MinimumDamageSpeed, 0x232C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, UnknownData_HTJQ, 0x2330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, CenterTraceLocationOffset, 0x2340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWheeledVehicleCharacter, UnknownData_SLO3, 0x234C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalWheeledVehicleCharacter, 0x2350);
		}

		// Class ShooterGame.VRMainBoss_Character
		TEST_METHOD(Class__ShooterGame__VRMainBoss_Character)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMainBoss_Character, CurrentMission, 0x2278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVRMainBoss_Character, 0x2280);
		}

		// Class ShooterGame.ShooterCharacter
		TEST_METHOD(Class__ShooterGame__ShooterCharacter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_PISQ, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, SpawnIntroAnim1P, 0x1160);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, RespawnIntroAnim1P, 0x1168);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, ProneInAnim, 0x1170);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, ProneOutAnim, 0x1178);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, StartRidingAnim, 0x1180);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, StopRidingAnim, 0x1188);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, TalkingAnim, 0x1190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, VoiceTalkingAnim, 0x1198);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, VoiceYellingAnim, 0x11A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, EmoteAnims, 0x11A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, FireBallistaAnimation, 0x11B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, ReloadBallistaAnimation, 0x11C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, DraggingCharacterAnim, 0x11C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, VivoxUsername, 0x11D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, CurrentVoiceModeAsUInt32, 0x11E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, VoiceModeForCullingTests, 0x11E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_821Z, 0x11E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, bWasProne, 0x11F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, bIsPreviewCharacter, 0x11F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_Y3KJ, 0x11F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, WalkBobMagnitude, 0x1204);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, WalkBobInterpSpeed, 0x1208);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, TargetingTime, 0x120C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, BobMaxMovementSpeed, 0x1210);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, WeaponBobMaxMovementSpeed, 0x1214);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_LW0T, 0x121B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, DefaultWeapon, 0x1480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, OverrideDefaultWeapon, 0x1488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, MapWeapon, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, GPSWeapon, 0x1498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, CompassWeapon, 0x14A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_S12Q, 0x14A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, PlayerName, 0x14B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, RidingDino, 0x14C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, Mesh1P, 0x14C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, LowerBodyPartRootBones, 0x14D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, FPVCameraAnimationPhysicsAsset, 0x14E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, DropItemAnimation, 0x14E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, ThrowItemAnimation, 0x14F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, PickupItemAnimation, 0x14F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, ActivateInventoryAnimation, 0x1500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, SurvivorProfilePreviewMesh, 0x1508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, LastDinoAimRotationOffset, 0x1510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_TETH, 0x151C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, LastFiredBoomerang, 0x1528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, LastFiredGrapHook, 0x1530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, GrapplingHookCable, 0x1538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, LastGrapHookAC, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, _GrapHookCableObjectCount, 0x1548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, GrapHookDefaultOffset, 0x154C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, GrapHookCableWidth, 0x1558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_X142, 0x155C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, GrapHookMaterial, 0x1560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, LadderLateralJumpVelocity, 0x1568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, GrapHookPulledRopeDistance, 0x156C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, GrapHookSyncTime, 0x1570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, bReleasingGrapHook, 0x1574);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_JQ6V, 0x1575);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, PlatformProfileName, 0x1578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, PlatformProfileID, 0x1588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, CharacterStatusStateSounds, 0x1598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, CharacterStatusStateSoundComponent, 0x15A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_82NP, 0x15B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, DefaultTPVAnimBlueprint, 0x15E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, WeaponAttachPoint, 0x15F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, TargetingSpeedModifier, 0x15F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_VPT1, 0x15FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, LowHealthSound, 0x1600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, CallFollowAnim, 0x1608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, CallStayAnim, 0x1610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, CallFollowAnimSingle, 0x1618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, CallStayAnimSingle, 0x1620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, CallMoveToAnim, 0x1628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, CallAttackAnim, 0x1630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, LowHealthWarningPlayer, 0x1638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_9GPB, 0x1640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, CraftingMovementSpeedModifier, 0x1660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, WeaponBobMagnitudes, 0x1664);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, WeaponBobPeriods, 0x1670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, WeaponBobOffsets, 0x167C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, WeaponBobMagnitudes_Targeting, 0x1688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, WeaponBobPeriods_Targeting, 0x1694);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, WeaponBobOffsets_Targeting, 0x16A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, WeaponBobMinimumSpeed, 0x16AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, WeaponBobSpeedBase, 0x16B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, WeaponBobSpeedBaseFalling, 0x16B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_74BV, 0x16B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, DefaultAttachmentInfos, 0x16C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, StartCrouchSound, 0x16D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, EndCrouchSound, 0x16D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, StartProneSound, 0x16E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, EndProneSound, 0x16E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, NextInventoryWeapon, 0x16F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, PreMapWeaponItemNetID, 0x16F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, ServerSeatedViewRotationYaw, 0x1700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, ServerSeatedViewRotationPitch, 0x1704);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, CurrentWeapon, 0x1708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_78V2, 0x1711);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, HealthBarOffsetY, 0x1714);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_6BMA, 0x1719);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, LinkedPlayerDataID, 0x1720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_BA5K, 0x1728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, LastValidPlayerController, 0x1748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, DrinkingAnimation, 0x1750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_EL4P, 0x1758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, IndoorsHyperthermiaInsulation, 0x1780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, IndoorsHypothermiaInsulation, 0x1784);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, IndoorCheckInterval, 0x1788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_TWKC, 0x178C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, PreRidingWeaponItemNetID, 0x1798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, PreInventoryWeaponItemNetID, 0x17A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, OverrideAnimBlueprints, 0x17A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, ViewingInventoryAnimation, 0x17B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, DefaultDinoRidingAnimation, 0x17C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, DefaultDinoRidingMoveAnimation, 0x17C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, DefaultSeatingAnimation, 0x17D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, DefaultShieldAnimation, 0x17D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, ShieldCoverAnimation, 0x17E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, ShieldCoverAnimationForCrouch, 0x17E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_FC00, 0x17F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, EnemyPlayerMaxCursorHUDDistanceProne, 0x17F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, EnemyPlayerMaxCursorHUDDistanceCrouched, 0x17F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, EnemyPlayerMaxCursorHUDDistanceStanding, 0x17FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_RPTY, 0x1800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, CurrentPassengerSeatDefinition, 0x1808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, AnimsOverrideFrom, 0x18B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, AnimOverrideTo, 0x18C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, AnimSequencesOverrideFrom, 0x18D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, AnimSequenceOverrideTo, 0x18E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_AUYJ, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, BodyColors, 0x18F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, FacialHairIndex, 0x1934);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, HeadHairIndex, 0x1935);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_62UU, 0x1936);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, RawBoneModifiers, 0x1938);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_I47K, 0x1990);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, LoggedOutTargetingDesirability, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, bIsRainWatered, 0x19A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_A89C, 0x19A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UniqueNetIdTypeHash, 0x19B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_0XIH, 0x19B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, SpawnAnim, 0x19C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, FirstSpawnAnim, 0x19D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_XLEU, 0x19D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, SavedLastTimeHadController, 0x19F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, LastTimeHadController, 0x19F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, LastTaggedTime, 0x1A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, LastTaggedTimeExtra, 0x1A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, LastTaggedTimeThird, 0x1A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, ExtraFloatVar, 0x1A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, ExtraVectorVar, 0x1A1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, ExtraExtraVectorVar, 0x1A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, ExtraNameVar, 0x1A34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, bIsOnSeatingStructure, 0x1A3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, bIsControllingBallista, 0x1A3D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, bUseBallistaAimOffset, 0x1A3E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_KWJ7, 0x1A3F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, CurrentControlledBallistaYaw, 0x1A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, bIsServerAdmin, 0x1A44);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_Z8MV, 0x1A45);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, SeatingStructure, 0x1A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, SeatingStructureSeatNumber, 0x1A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_NZUI, 0x1A54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, ThrowCharacterSound, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_G34W, 0x1A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, PlayerBadgeGroup, 0x1A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, bShouldInvertTurnInput, 0x1A89);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_LQMQ, 0x1A8A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, InventoryDragWeightScale, 0x1AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_A7CU, 0x1AC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, MountedCarryingDinoAnimation, 0x1AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, CuddleAnimation, 0x1AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_BR7I, 0x1AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, CharacterAdditiveStandingAnim, 0x1B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_NXF8, 0x1B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, HeadHairComponent, 0x1B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, FacialHairComponent, 0x1B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, DefaultHeadHairMesh, 0x1B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, DefaultFacialHairMesh, 0x1B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, IntervalForFullHeadHairGrowth, 0x1B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, IntervalForFullFacialHairGrowth, 0x1B54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, PercentOfFullFacialHairGrowth, 0x1B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, PercentOfFullHeadHairGrowth, 0x1B5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, OriginalHairColor, 0x1B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, PostUpdateTick, 0x1B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_7C1N, 0x1BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, ReplicatedWeight, 0x1BCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, LocalCorpseEmitter, 0x1BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, LocalDiedAtTime, 0x1BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_FHBW, 0x1BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, ProneMoveSound, 0x1BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UploadEarliestValidTime, 0x1BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_4DYM, 0x1BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, JunctionLinkCableParticle, 0x1C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_P12F, 0x1C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, bPreventWeaponMovementAnims, 0x1C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_NSHK, 0x1C29);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, CurrentItemBalloon, 0x1C2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_WZYW, 0x1C34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, NotifyWeaponUnequipped, 0x1C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, NotifyWeaponEquipped, 0x1C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, NotifyWeaponFired, 0x1C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, NotifyOnWeaponEquip, 0x1C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, PlayerHexagonCount, 0x1C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, DefaultHexagonAmountEarnedOnMissionCompletion, 0x1C7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_0C7E, 0x1C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, MeshHeightAdjustment, 0x1C94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, BuffExtraDamageMultiplier, 0x1C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, bNormalizeHeadPosition, 0x1C9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_YYJU, 0x1C9D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, OnFirstPersonCameraView, 0x1CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, OnThirdPersonCameraView, 0x1CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, ExpectedBaseID, 0x1CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_B4BU, 0x1CC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, LastExpectedBaseTime, 0x1CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, bPreventShowHUDOnSpawnIntroCompletion, 0x1CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_FLQ9, 0x1CD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterCharacter, UnknownData_H2YP, 0x1CD5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterCharacter, 0x1D00);
		}

		// Class ShooterGame.PrimalUI
		TEST_METHOD(Class__ShooterGame__PrimalUI)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, UnknownData_PVJM, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bCaptureMouseInput, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bIsClosing, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bWantsPrimalItemNotifications, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, UnknownData_IZK0, 0x025B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, DefaultToolTipWidget, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bEscapeClosesMenu, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bEscapeOpensPauseMenu, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bClickClosesMenu, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bIsGameplayUI, 0x026B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bIsTopUI, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, HighlightStartPointType, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, UnknownData_6CK9, 0x026E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, ConfirmationDialogUITemplate, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, XBoxFooterUITemplate, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bShowCancelIcon, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bShowAcceptIcon, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bShowLStickIcon, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bShowRStickIcon, 0x0283);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bShowBumpersIcon, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bShowStartBtnIcon, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bShowLTBtnIcon, 0x0286);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bShowRTBtnIcon, 0x0287);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bShowFaceBtnLeftIcon, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bShowFaceBtnTopIcon, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bShowFaceBtnRightIcon, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bShowFaceBtnBottomIcon, 0x028B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bShowLeftShoulderBtnIcon, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bShowXBoxFooter, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bIgnoreUIScaling, 0x028E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, UnknownData_X3H0, 0x028F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, SplitscreenDPIScaler, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bDoExtraDataListButtonPanelFilteringChecks, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, UnknownData_H38P, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, DefaultHighlightWidgetOverrideName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, bShouldValidateInputOnRemove, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, UnknownData_7V3X, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, HTTPGetResponseEvent, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, ItemContainer, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalUI, UnknownData_BYRI, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalUI, 0x0518);
		}

		// Class ShooterGame.UI_Spawn
		TEST_METHOD(Class__ShooterGame__UI_Spawn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, SkinColorPreviewName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, HairColorPreviewName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, EyeColorPreviewName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, SavedPresetListPanelName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, IslandRgionButtonListPanelName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, LoadConfirmationButtonName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, CancelLoadButtonName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, LoadFromFileScrollBoxName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, RandomizeButtonName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, TabBgSwitcherName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, MaleEnabledEffectName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, FemaleEnabledEffectName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, SaveToFileButtonName, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, LoadFromFileButtonName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, PreviewWidgetName, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, RespawnButtonName, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, CreateNewPlayerButtonName, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, RespawnLabelName, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, MyScrollBoxName, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, CharConfigMaleButtonName, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, CharConfigFemaleButtonName, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, DoCreateNewPlayerButtonName, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, NewCharacterPanelName, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, RespawnPanelName, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, RespawnPanelButtonName, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, RespawnPanelMapName, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, GenderLabelName, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, BodyColorSliderName, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, HairColorSliderName, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, EyeColorSliderName, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, BoneModifiersSliders, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, CharacterNameBoxName, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, RespawnButtonLabelName, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, SlotButtonTemplate, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, RequestSpawnPointsInterval, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, DownloadCharacterDataButtonName, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, UnknownData_JSIU, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, ListCharacterDataSceneTemplate, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, SwitcherTextActiveColor, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, SwitcherTextInactiveColor, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, UnknownData_EBA9, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, PreviewCharacter, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, PreviewWidget, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, UnknownData_UJV2, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, EntryWidgets, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, UnknownData_FRSF, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, RespawnEntryWidgets, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, SavedPresetWidgets, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, UnknownData_XS70, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, MaxDistanceForMultiSpawnPointSelect, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Spawn, UnknownData_QM9G, 0x07CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Spawn, 0x09D0);
		}

		// Class ShooterGame.PrimalCharacterSetting
		TEST_METHOD(Class__ShooterGame__PrimalCharacterSetting)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterSetting, CharacterSetting, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalCharacterSetting, 0x0048);
		}

		// Class ShooterGame.PrimalCharacterStatusComponent
		TEST_METHOD(Class__ShooterGame__PrimalCharacterStatusComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, MaxStatusValues, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, BaseLevelMaxStatusValues, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, NumberOfLevelUpPointsApplied, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, NumberOfLevelUpPointsAppliedTamed, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, TamedIneffectivenessModifier, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, MovingStaminaRecoveryRateMultiplier, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, RecoveryRateStatusValue, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, TimeToRecoverAfterDepletionStatusValue, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, TimeToRecoverAfterDecreaseStatusValue, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, AmountMaxGainedPerLevelUpValue, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, AmountMaxGainedPerLevelUpValueTamed, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, MaxGainedPerLevelUpValueIsPercent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, RecoveryRateIsPercent, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, TamingMaxStatMultipliers, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, TamingMaxStatAdditions, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, MaxLevelUpMultiplier, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, TamedLandDinoSwimSpeedLevelUpEffectiveness, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, TamingIneffectivenessMultiplier, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, DinoRiderWeightMultiplier, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, CanLevelUpValue, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, DontUseValue, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, UnknownData_YAHE, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, StatusStateThresholds, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, ExperienceAutomaticConsciousIncreaseSpeed, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, CheatMaxWeight, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, CharacterStatusComponentPriority, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, SuffocationHealthPercentDecreaseSpeed, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, UnsubmergedOxygenIncreaseSpeed, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, SubmergedOxygenDecreaseSpeed, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, RunningStaminaConsumptionRate, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, WalkingStaminaConsumptionRate, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, SwimmingOrFlyingStaminaConsumptionRate, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, JumpStaminaConsumption, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, WindedSpeedModifier, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, WindedSpeedModifierSwimmingOrFlying, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, InjuredSpeedModifier, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, HypothermicHealthDecreaseRateBase, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, HypothermicHealthDecreaseRatePerDegree, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, HyperthermicHealthDecreaseRateBase, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, HyperthermicHealthDecreaseRatePerDegree, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, XPEarnedPerStaminaConsumed, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, KillXPMultiplierPerCharacterLevel, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, ShareXPWithTribeRange, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, BaseCharacterLevel, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, ExtraCharacterLevel, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, UnknownData_TZJO, 0x06D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, ExperiencePoints, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, ReplicatedExperiencePoints, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, LevelExperienceRampType, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, UnknownData_VMG5, 0x06DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, MaxExperiencePoints, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, BaseFoodConsumptionRate, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, BaseWaterConsumptionRate, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, FortitudeTorpidityDecreaseMultiplier, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, FortitudeTorpidityIncreaseResistance, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, SubmergedWaterIncreaseRate, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, CrouchedWaterFoodConsumptionMultiplier, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, ProneWaterFoodConsumptionMultiplier, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, StaminaRecoveryDecreaseFoodMultiplier, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, StaminaRecoveryDecreaseWaterMultiplier, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, HealthRecoveryDecreaseFoodMultiplier, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, BabyDinoConsumingFoodRateMultiplier, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, DinoTamedAdultConsumingFoodRateMultiplier, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, BabyGestationConsumingFoodRateMultiplier, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, BabyDinoStarvationHealthDecreaseRateMultiplier, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, BabyMaxHealthPercent, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, CrouchedStaminaConsumptionMultiplier, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, ProneStaminaConsumptionMultiplier, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, StarvationHealthConsumptionRate, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, DehyrdationHealthConsumptionRate, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, StaminaConsumptionDecreaseWaterMultiplier, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, StaminaConsumptionDecreaseFoodMultiplier, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, HypothermiaDecreaseFoodMultiplierBase, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, HypothermiaDecreaseFoodMultiplierPerDegree, 0x073C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, HyperthermiaDecreaseWaterMultiplierBase, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, HyperthermiaDecreaseWaterMultiplierPerDegree, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, HyperthermiaTemperatureThreshold, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, HypothermiaTemperatureThreshold, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, TorporExitPercentThreshold, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, KnockedOutTorpidityRecoveryRateMultiplier, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, DehydrationTorpidityMultiplier, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, StarvationTorpidityMultuplier, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, StarvationTorpidityIncreaseRate, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, DehyrdationTorpidityIncreaseRate, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, InjuredTorpidityIncreaseMultiplier, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, WeightSpeedDecreasePower, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, WeightJumpDecreasePower, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, PoopItemMinFoodConsumptionInterval, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, PoopItemMaxFoodConsumptionInterval, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, TheMaxTorporIncreasePerBaseLevel, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, CurrentStatusValuesReplicationInterval, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, InsulationHyperthermiaOffsetExponent, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, InsulationHyperthermiaOffsetScaler, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, InsulationHypothermiaOffsetExponent, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, InsulationHypothermiaOffsetScaler, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, HypoCharacterInsulationValue, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, HyperCharacterInsulationValue, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, PoopItemFoodConsumptionCache, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, LastHypothermalCharacterInsulationValue, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, LastHyperthermalCharacterInsulationValue, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, MaxStatusValueToAutoUpdate, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, UnknownData_PCC2, 0x07A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, GenericXPMultiplier, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, CraftEarnXPMultiplier, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, MinInventoryWeight, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, KillEarnXPMultiplier, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, GenericEarnXPMultiplier, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, SpecialEarnXPMultiplier, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, HarvestEarnXPMultiplier, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, DefaultHyperthermicInsulation, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, DefaultHypothermicInsulation, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, MaxTamingEffectivenessBaseLevelMultiplier, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, UnknownData_YZOL, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, FoodStatusNameOverride, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, FoodStatusIconBackgroundOverride, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, FoodStatusIconForegroundOverride, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, UnknownData_HZFF, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, StatusValueModifierDescriptionIndices, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, CurrentStatusValues, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, AdditionalStatusValues, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, ReplicatedCurrentStatusValues, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, ReplicatedGlobalMaxStatusValues, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, ReplicatedBaseLevelMaxStatusValues, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, ReplicatedGlobalCurrentStatusValues, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, CurrentStatusStates, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, UnknownData_53YM, 0x0944);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, StaminaRecoveryExtraResourceDecreaseMultiplier, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, DehydrationStaminaRecoveryRate, 0x0ACC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, WaterConsumptionMultiplier, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, FoodConsumptionMultiplier, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, EnteredStatusStateSounds, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, ExitStatusStateSounds, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, ExtraOxygenSpeedStatMultiplier, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, ExtraTamedHealthMultiplier, 0x0AFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, WakingTameFoodConsumptionRateMultiplier, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, SwimmingStaminaRecoveryRateMultiplier, 0x0B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, UnknownData_OJ3F, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, MountedDinoDinoWeightMultiplier, 0x0B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, ExtraWildDinoDamageMultiplier, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, ExtraTamedDinoDamageMultiplier, 0x0B2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, WeightMultiplierWhenCarriedOrBased, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, WeightMultiplierForCarriedPassengers, 0x0B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, WeightMultiplierForPlatformPassengersInventory, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, DinoMaxStatAddMultiplierImprinting, 0x0B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, DinoImprintingQuality, 0x0B6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, UnknownData_AR0J, 0x0B71);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, TamedBaseHealthMultiplier, 0x0B74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, ExtraBabyDinoConsumingFoodRateMultiplier, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, UnknownData_ZG12, 0x0B7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, StatusValueNameOverrides, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, RegainOxygenDamageType, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, bForceAllowStatusModifierSortingWhenTamed, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCharacterStatusComponent, UnknownData_6RSW, 0x0B99);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalCharacterStatusComponent, 0x1090);
		}

		// Class ShooterGame.PrimalDinoStatusComponent
		TEST_METHOD(Class__ShooterGame__PrimalDinoStatusComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalDinoStatusComponent, 0x1090);
		}

		// Class ShooterGame.PrimalPlayerStatusComponent
		TEST_METHOD(Class__ShooterGame__PrimalPlayerStatusComponent)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalPlayerStatusComponent, 0x1090);
		}

		// Class ShooterGame.PrimalClimbingSettings
		TEST_METHOD(Class__ShooterGame__PrimalClimbingSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, bDebug, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, bAllowInputClimbing, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, bAllowSliding, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, UnknownData_5EZQ, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, ArmSwitchAngle, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, PreFlinchUnclimbableInterval, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, PostFlinchUnclimbableInterval, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, ClimbingWaitAfterQuakeFall, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, bUseExtendedLandTrace, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, UnknownData_OJL5, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, RootLocationInterpSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, JumpUpVelocity, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, JumpForwardVelocity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, JumpDirectionVelocity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, JumpCameraTransitionDuration, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, ClimbingWaitForJump, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, ForceReleaseOnImpulseForce, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, TypeSettings, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, AttachAnchoredTraceRadius, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, AttachEffectTraceDistanceForward, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, AttachEffectTraceDistanceBackward, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, MinAimDirectionDot, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, AimDirectionBias, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, TracePlaneInterpolation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, HangingTracePlaneInterpolation, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, MinFloorDirectionDot, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, FallingConsumeDurabilityMultiplier, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, ImpactNormalOffsetAllowanceDot, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, MoveTraceDistance, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, MoveTraceRadius, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, HangingMinDotUp, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, CeilingDistance, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, CeilingTraceRadius, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, CeilingTraceDistance, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, MinCeilingTraceTime, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, WallDistance, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, WallTraceRadius, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, WallTraceDistance, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, MinWallTraceTime, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, GroundMaxDotUp, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, MinFloorDistance, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, FloorTraceRadius, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, LandMinFloorSpaceDistance, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, LandFloorSpaceTraceRadius, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, FlipMaxNormalDot, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, TurnMaxNormalDot, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, Transitions, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, ClimbAnimPlayRateDistanceScale, 0x0BBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, MinClimbAnimPlayRate, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, MaxClimbAnimPlayRate, 0x0BC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, CameraYawMin, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, CameraYawMax, 0x0BCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, CameraPitchUp, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, CameraPitchDown, 0x0BD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, CameraOffsetScale, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, HangingCameraPitchUp, 0x0BE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, HangingCameraPitchDown, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, HangingCameraOffsetScale, 0x0BEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, SwitchToFPVDistance, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, SwitchToFPVDownDot, 0x0BFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, SwitchToFPVTransitionDuration, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, SwitchFromFPVTransitionDuration, 0x0C04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, UpAndOverExtendedUp, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, UpAndOverExtendedForward, 0x0C0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, HangingFailTraceExtraLength, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, HangingFailMinDotUp, 0x0C14);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, HangingFailOppositeDirectTraceLength, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, HangingFailOppositeDirectTraceRadius, 0x0C1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, InvisibleWallTooCloseRadius, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalClimbingSettings, UnknownData_N64S, 0x0C24);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalClimbingSettings, 0x0C28);
		}

		// Class ShooterGame.PrimalColorSet
		TEST_METHOD(Class__ShooterGame__PrimalColorSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalColorSet, ColorSetDefinitions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalColorSet, 0x0268);
		}

		// Class ShooterGame.PrimalBotAIController
		TEST_METHOD(Class__ShooterGame__PrimalBotAIController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotAIController, DinoSearchRadius, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotAIController, UnknownData_ASFP, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotAIController, AttackCoordinator, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotAIController, RiddenDinoControllerClass, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotAIController, ClaimedDino, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBotAIController, UnknownData_0JYQ, 0x08D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalBotAIController, 0x08D8);
		}

		// Class ShooterGame.PrimalDinoEntry
		TEST_METHOD(Class__ShooterGame__PrimalDinoEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoEntry, UnknownData_NR7L, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoEntry, DinoNameTag, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoEntry, DinoDescriptiveName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoEntry, DinoIcon, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoEntry, DinoMaterial, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoEntry, bRequiresKill, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoEntry, UnknownData_1MEO, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalDinoEntry, 0x0080);
		}

		// Class ShooterGame.PrimalDinoSettings
		TEST_METHOD(Class__ShooterGame__PrimalDinoSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoSettings, FoodEffectivenessMultipliers, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoSettings, ExtraFoodEffectivenessMultipliers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoSettings, TamingAffinityNoFoodDecreasePercentageSpeed, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoSettings, UnknownData_7U0K, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoSettings, BaseDamageTypeAdjusters, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoSettings, ExtraDamageTypeAdjusters, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoSettings, DinoFoodTypeImage, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoSettings, DinoFoodTypeName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoSettings, bWakingTameDisplayItemName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoSettings, UnknownData_V3G1, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalDinoSettings, 0x0090);
		}

		// Class ShooterGame.PrimalBuff_Grappled
		TEST_METHOD(Class__ShooterGame__PrimalBuff_Grappled)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, CurrentGrappleTethers, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, LastSyncedGrappleTethers, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, ReplicatedGrappleTethers, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, MyOwner, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, MyOwnerCDO, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, GrappleState_Current, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, GrappleState_Previous, 0x09B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, WantsGrappleState, 0x09BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, UnknownData_NQ8B, 0x09BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, DefaultGrappledBuffClass, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, PullingSoundCue, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, ReleasingSoundCue, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, GrappleTetherMesh, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, UnknownData_CK8D, 0x09E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, MaxAllowedGrappleTethers, 0x09E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, ForceFallingWhenDirToTetherAboveUpDot, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, ForceFallingWhenAboveVelocityAwayFromAnchor, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, ForceFallingBelowTetherToOwnerDeltaZ, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, ReduceFallDamageUnderAngleToAnchor, 0x09F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, GrappledFallDamageMult_MIN, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, OwnerInput_SwingSpeed, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, SwingingVelocityDampingRate_Idle, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, SwingingVelocityDampingRate_Pulling, 0x0A04);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, SwingingVelocityDampingRateAxisMults_Pulling, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, SwingingVelocityDampingRate_Releasing, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, SwingingVelocityDampingRate_OwnerInput, 0x0A14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, TetherTensionVelocityDampingRate, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, GrappleVelocityMAX, 0x0A1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, SwingingClientPositionErrorOverride_Player, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, SwingingClientPositionErrorOverride_Dino_MovingFlying, 0x0A24);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, SwingingClientPositionErrorOverride_Dino_Stopped, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, SwingingClientLocationInterpSpeed, 0x0A2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, SwingingClientRotationInterpSpeed, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, SyncGrappleTetherLengthInterval, 0x0A34);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, PullableWeightLimit, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, TetherMaxLength, 0x0A3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, TetherMinLength, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, TetherAutoDetachUnderLength, 0x0A44);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, TetherBreakLimit_OwnerPastCurrentLengthDelta, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, TetherBreakLimit_OwnerPastCurrentLengthForTime, 0x0A4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, TetherBreakLimit_GrappledActorAboveVelocity, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, TetherWidth, 0x0A54);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, LastGrappleTetherLengthSyncTime, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, OwnerInput_CurrentSwingingVelocity, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, OwnerInput_CurrentSynced, 0x0A6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, OwnerInput_LastSynced, 0x0A74);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, UnknownData_YSHK, 0x0A7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, OwnerInput_LastSyncTime, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, OwnerInput_SyncInverval, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, DirToAgainstSurface, 0x0A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, LastDirToAgainstSurface, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, RequiredDirToSurfaceDotDeltaToUpdate, 0x0AA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, AgainstSurfaceNormal, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, TetherPullMaxVelocity, 0x0AB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, TetherPullAcceleration, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, TetherPullMaxVelocity_GrappledChar, 0x0ABC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, TetherPullAcceleration_GrappledChar, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, TetherReleaseMaxVelocity, 0x0AC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, TetherReleaseMaxVelocity_GrappledChar, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, CurrentTetherMoveVelocity, 0x0ACC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, AvgParentCharVelocity, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, ClientSuggestTetherLength_AllowedDelta, 0x0AE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, ClientSuggestTetherLength_AllowedInterval, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, UnknownData_X1EC, 0x0AEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, ClientSuggestTetherLength_LastReceivedTime, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, ValidHitSurface_DistanceFromCapsuleEdge, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, ValidHitSurface_UpVectorAngleRange, 0x0AFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, LastProjectedOwnerInputs, 0x0B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, OwnerCapsuleRadius, 0x0B0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, OwnerCapsuleHalfHeight, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, PreviousOwnerVelocity, 0x0B14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, TetherTensionStrength, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, TetherTensionExponent, 0x0B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, ForceFallingStateImpulse, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, UnknownData_IWT1, 0x0B2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, ReservedTetherTags, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, TetherTagOwnerConnectorString, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, GrappledGravityScaleRange, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, GrappledGravityScaleMult_Idle, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, GrappledGravityScaleMult_Pulling, 0x0B5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, GrappledGravityScaleMult_Releasing, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, AtTetherLimitBelowDistFromEnd, 0x0B64);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, LastGravity, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, LookingAtAgainstSurfaceAngle, 0x0B74);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, VelocityOverrideMaxDeltaTime, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_Grappled, UnknownData_1MRE, 0x0B7C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalBuff_Grappled, 0x0B80);
		}

		// Class ShooterGame.PrimalBuff_MissionData
		TEST_METHOD(Class__ShooterGame__PrimalBuff_MissionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_MissionData, ActiveMission, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_MissionData, ActiveMissionIndex, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_MissionData, UnknownData_J0Q0, 0x0984);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_MissionData, CurrentMissions, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_MissionData, MissionIndicatorParticles, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_MissionData, NonHostPrepAreaNotification, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_MissionData, PendingMission, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_MissionData, OnPlayerAddedToMission, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_MissionData, OnPlayerRemovedFromMission, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_MissionData, MissionClientDataUpdated, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_MissionData, UnknownData_0EHY, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_MissionData, ReplicatedMissionDataSubscriptions, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalBuff_MissionData, UnknownData_EA58, 0x0A48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalBuff_MissionData, 0x0AB0);
		}

		// Class ShooterGame.PrimalEngramEntry
		TEST_METHOD(Class__ShooterGame__PrimalEngramEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEngramEntry, UnknownData_T040, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEngramEntry, RequiredCharacterLevel, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEngramEntry, RequiredEngramPoints, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEngramEntry, UnknownData_VPMX, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEngramEntry, BluePrintEntry, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEngramEntry, ExtraEngramDescription, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEngramEntry, EngramRequirementSets, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEngramEntry, MyEngramIndex, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEngramEntry, EngramGroup, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEngramEntry, UnknownData_MXOI, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalEngramEntry, 0x0090);
		}

		// Class ShooterGame.PrimalGlobalUIData
		TEST_METHOD(Class__ShooterGame__PrimalGlobalUIData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, StatusColorGood, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, StatusColorWarning, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, StatusColorBad, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, RightMouseButtonIcon, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, LeftMouseButtonIcon, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, GamepadLeftBumper, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, GamepadRightBumper, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, LeftTriggerIcon, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, RightTriggerIcon, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, GamepadFaceButtonBottom, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, GamepadFaceButtonTop, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, GamepadFaceButtonLeft, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, GamepadFaceButtonRight, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, DPadUpIcon, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, DPadDownIcon, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, DPadLeftIcon, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, DPadRightIcon, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, RightThumbstickIcon, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, LeftThumbstickIcon, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, SpecialLeftIcon, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, SpecialRightIcon, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, MutagenIcon, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, MutagenGoodToGreatThreshold, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, MutagenGoodColor, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, MutagenGreatColor, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalGlobalUIData, UnknownData_XCAW, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalGlobalUIData, 0x0118);
		}

		// Class ShooterGame.PrimalHarvestingComponent
		TEST_METHOD(Class__ShooterGame__PrimalHarvestingComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, UnknownData_I0FC, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, HarvestResourceEntries, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, BaseHarvestResourceEntries, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, HarvestDamageTypeEntries, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, MaxHarvestHealth, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, UnknownData_SVGY, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, HarvestHealthGiveResourceInterval, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, CurrentHarvestHealth, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, bIsUnharvestable, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, UnknownData_L5FF, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, UnknownData_1XS3, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, AssignedToTribeID, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, UseHarvestDamageAmount, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, UseHarvestDamageType, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, DescriptiveName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, UseHarvestString, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, UnequipWeaponToUseHarvestString, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, UsableHarvestSphereRadius, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, ShouldReplenish, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, UnknownData_IQEH, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, MinPlayerDistanceReplenishing, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, MinStructureDistanceReplenishing, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, MinNonCoreStructureDistanceReplenishing, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, BaseMinTimeAfterDepletionReplenishing, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, BaseMaxTimeAfterDepletionReplenishing, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, ExhaustedDepletionTimeInterval, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, ExhaustedDepletionPower, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, ExhaustedDepletionEffectScale, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, ReduceExhaustedDepletionSpeed, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, AutoReplenishInterval, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, AutoReplenishPercent, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, DamageInstigatorAmount, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, GiveItemEntriesMin, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, GiveItemEntriesMax, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, TamedDinoHarvestGiveHealthMultiplier, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, UnknownData_CUQX, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, OnItemHarvested, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, UIStringIMeleeHitToHarvest, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, UIStringHarvestRequiresTool, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, UIStringCantHarvestUnderwater, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, DinoHarvestGiveHealthAmount, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, DinoHarvestGiveHealthSpeed, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, DinoHarvestGiveHealthDescriptionIndex, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, UnknownData_JBWA, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, ForceAllowMeleeHarvestingOverrides, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, HarvestingPriority, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, UnknownData_7BKA, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, AdditionalComponentAttachments, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalHarvestingComponent, AdditionalComponentAttachmentsDedicated, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalHarvestingComponent, 0x0250);
		}

		// Class ShooterGame.PrimalInventoryComponent_Static
		TEST_METHOD(Class__ShooterGame__PrimalInventoryComponent_Static)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalInventoryComponent_Static, 0x0590);
		}

		// Class ShooterGame.PrimalItem_CruiseMissile
		TEST_METHOD(Class__ShooterGame__PrimalItem_CruiseMissile)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalItem_CruiseMissile, 0x0AE8);
		}

		// Class ShooterGame.PrimalItem_Dye
		TEST_METHOD(Class__ShooterGame__PrimalItem_Dye)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem_Dye, DyeColor, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem_Dye, DyeUISceneTemplate, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem_Dye, UnknownData_PPIC, 0x0B00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalItem_Dye, 0x0B08);
		}

		// Class ShooterGame.PrimalItem_Radio
		TEST_METHOD(Class__ShooterGame__PrimalItem_Radio)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItem_Radio, SetFrequencySound, 0x0AE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalItem_Radio, 0x0AF0);
		}

		// Class ShooterGame.PrimalNoClimbingVolume
		TEST_METHOD(Class__ShooterGame__PrimalNoClimbingVolume)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalNoClimbingVolume, 0x04A0);
		}

		// Class ShooterGame.PrimalRichTextBlock
		TEST_METHOD(Class__ShooterGame__PrimalRichTextBlock)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalRichTextBlock, Text, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalRichTextBlock, UnknownData_E0OB, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalRichTextBlock, TextDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalRichTextBlock, Justification, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalRichTextBlock, AutoWrapText, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalRichTextBlock, UnknownData_W6SN, 0x01C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalRichTextBlock, WrapTextAt, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalRichTextBlock, CenterVertically, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalRichTextBlock, UnknownData_LCTE, 0x01C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalRichTextBlock, Margin, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalRichTextBlock, LineHeightPercentage, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalRichTextBlock, WidgetStyle, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalRichTextBlock, TextStyles, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalRichTextBlock, ImageStyles, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalRichTextBlock, UnknownData_KD7V, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalRichTextBlock, 0x0330);
		}

		// Class ShooterGame.PrimalStaticData_MissionCompanionData
		TEST_METHOD(Class__ShooterGame__PrimalStaticData_MissionCompanionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalStaticData_MissionCompanionData, UnknownData_LKXA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalStaticData_MissionCompanionData, MissionPointOfInterestData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalStaticData_MissionCompanionData, 0x0420);
		}

		// Class ShooterGame.PrimalStaticData_MissionCompanionReactionData
		TEST_METHOD(Class__ShooterGame__PrimalStaticData_MissionCompanionReactionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalStaticData_MissionCompanionReactionData, ReactionData_MissionStart, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalStaticData_MissionCompanionReactionData, ReactionData_MissionEnd_Success, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalStaticData_MissionCompanionReactionData, ReactionData_MissionEnd_Failure, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalStaticData_MissionCompanionReactionData, 0x0208);
		}

		// Class ShooterGame.PrimalStructurePlacer
		TEST_METHOD(Class__ShooterGame__PrimalStructurePlacer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePlacer, PlaceableStructures, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePlacer, CurrentState, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePlacer, UnknownData_UX5J, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePlacer, CurrentPlacingStructureIndex, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePlacer, CurrentPlacingStructure, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePlacer, UnknownData_3OI6, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePlacer, RotationAxisName, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePlacer, RotationSpeed, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePlacer, AltRotationAxisName, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePlacer, AltRotationSpeed, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePlacer, UnknownData_D82J, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePlacer, RotationIcon, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePlacer, RotationIconSize, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePlacer, RotationIconScale, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePlacer, UnknownData_G7KT, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructurePlacer, 0x0508);
		}

		// Class ShooterGame.PrimalStructureSettings
		TEST_METHOD(Class__ShooterGame__PrimalStructureSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalStructureSettings, BaseDamageTypeAdjusters, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalStructureSettings, ExtraDamageTypeAdjusters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalStructureSettings, DecayDestructionPeriodMultiplier, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalStructureSettings, UnknownData_04OS, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalStructureSettings, 0x0050);
		}

		// Class ShooterGame.PrimalSupplyCrateItemSet
		TEST_METHOD(Class__ShooterGame__PrimalSupplyCrateItemSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalSupplyCrateItemSet, ItemSet, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalSupplyCrateItemSet, 0x0068);
		}

		// Class ShooterGame.PrimalSupplyCrateItemSets
		TEST_METHOD(Class__ShooterGame__PrimalSupplyCrateItemSets)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalSupplyCrateItemSets, ItemSets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalSupplyCrateItemSets, 0x0038);
		}

		// Class ShooterGame.PrimalStructureBearTrap
		TEST_METHOD(Class__ShooterGame__PrimalStructureBearTrap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, TrapSK, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, TriggerComponent, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, TrapTriggerSound, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, TrapDamageType, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, TrapMinPawnMass, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, TrapMaxPawnMass, 0x0B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, TrapDamageAmount, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, PeriodicalTrapDamageTime, 0x0B0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, PeriodicalTrapDamageAmount, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, IgnoreTriggerAfterSpawnTime, 0x0B14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, IgnoreDinosWithCustomTag, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, ForceImmobilizeDinosWithCustomTag, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, HealthDecreasePerSecPlayers, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, HealthDecreasePerSecWild, 0x0B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, bImmuneToNormalDamage, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, UnknownData_VKQS, 0x0B41);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, ImmobilizedCharacter, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, CurrentTrapState, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, ClientPrevTrapState, 0x0B51);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, bClosedTrap, 0x0B52);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, UnknownData_8D6W, 0x0B53);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, HealthDecreasePerSec, 0x0B54);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, DestroyTime, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, DestroyAfterTime, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, bUseOnlyOnNonAllied, 0x0B64);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, UnknownData_B3TJ, 0x0B65);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, DamagedOnlyBy, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, OnDestroyFX, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBearTrap, UnknownData_FMLM, 0x0B81);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureBearTrap, 0x0B88);
		}

		// Class ShooterGame.PrimalStructureDoor
		TEST_METHOD(Class__ShooterGame__PrimalStructureDoor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureDoor, MyDoorTransform, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureDoor, RotationSpeed, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureDoor, UnknownData_J749, 0x0AEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureDoor, DoorOpenSound, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureDoor, DoorCloseSound, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureDoor, CurrentPinCode, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureDoor, UnknownData_56M3, 0x0B07);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureDoor, UnknownData_JS1T, 0x0B09);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureDoor, DoorStateChangeIgnoreEncroachmentInterval, 0x0B0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureDoor, DoorOpenState, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureDoor, UnknownData_53HH, 0x0B11);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureDoor, SecondDoorDefaultRot, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureDoor, CurrentDoorAngle, 0x0B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureDoor, UnlockDoorSound, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureDoor, LockDoorSound, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureDoor, LockedSound, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureDoor, LastPinOpenSuccessTime, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureDoor, UnknownData_Y6G5, 0x0B58);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureDoor, 0x0B68);
		}

		// Class ShooterGame.PrimalStructureSkeletalDoor
		TEST_METHOD(Class__ShooterGame__PrimalStructureSkeletalDoor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSkeletalDoor, SkeletalDoorComponent, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSkeletalDoor, DoorCollisionComponent, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSkeletalDoor, TriggerComponent, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSkeletalDoor, BuffToApplyWhenInsideStructure, 0x0B80);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureSkeletalDoor, 0x0B88);
		}

		// Class ShooterGame.PrimalStructureElevatorPlatform
		TEST_METHOD(Class__ShooterGame__PrimalStructureElevatorPlatform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, MaxCarryWeight, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, Speed, 0x0AE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, DownSpeed, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, ClientLocationInterpSpeed, 0x0AEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, ClientLocationInterpSpeedDown, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, UpObstructionTraceLength, 0x0AF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, DownObstructionTraceLength, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, TrackTraceLength, 0x0AFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, TraceExtent, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, UnknownData_4OO8, 0x0B0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, StartMovingSound, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, StopMovingSound, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, DistanceToTravel, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, MaxDistanceToTravel, 0x0B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, StartLocation, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, UnknownData_JZP3, 0x0B35);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, CarriedActors, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, CurrentState, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, UnknownData_XMJ7, 0x0B49);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, TraveledDistance, 0x0B4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, CurrentLiftedWeight, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, bUseBPElevatorStopped, 0x0B54);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, UnknownData_0GA7, 0x0B55);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, MinHeight, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, MaxHeight, 0x0B74);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, Height, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, ReplicatedZ, 0x0B7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, UnknownData_3TFS, 0x0B81);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, CurrentPinCode, 0x0B84);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorPlatform, UnknownData_QOEO, 0x0B88);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureElevatorPlatform, 0x0B90);
		}

		// Class ShooterGame.PrimalStructureExplosive
		TEST_METHOD(Class__ShooterGame__PrimalStructureExplosive)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, ConstructorPlayerDataID, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, UnknownData_OXH7, 0x0AE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, ConstructorPawn, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, ConstructorTargetingTeam, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, UnknownData_C38S, 0x0AF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, ExplosiveLocOffset, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, ExplosiveRotOffset, 0x0B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, PlacementInitialSpeed, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, PlacementMaxSpeed, 0x0B14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, PlacementAccel, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, ExplosionDamage, 0x0B1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, ExplosionRadius, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, ExplosionImpulse, 0x0B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, ExplosionDamageType, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, ExplosiveAmmoItemTemplate, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, UnknownData_YE0R, 0x0B39);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, AlertDinosRange, 0x0B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, PickupItemClass, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, PickUpQuantity, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, UnknownData_JU0Y, 0x0B4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, AnimatedComponent, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosive, UnknownData_IWWN, 0x0B58);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureExplosive, 0x0B80);
		}

		// Class ShooterGame.PrimalStructureExplosiveTransGPS
		TEST_METHOD(Class__ShooterGame__PrimalStructureExplosiveTransGPS)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosiveTransGPS, CurrentFrequency, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosiveTransGPS, InSocketName, 0x0B84);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosiveTransGPS, UnknownData_R4Y1, 0x0B8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosiveTransGPS, PlayerDataID, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureExplosiveTransGPS, AttachedToStructure, 0x0B98);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureExplosiveTransGPS, 0x0BA0);
		}

		// Class ShooterGame.PrimalStructureTripwire
		TEST_METHOD(Class__ShooterGame__PrimalStructureTripwire)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTripwire, WireComponent, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTripwire, TriggerComponent, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTripwire, CableRotOffset, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTripwire, MaximumCableLength, 0x0B9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTripwire, UnknownData_6JL1, 0x0BA2);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTripwire, NotifyTripChatSound, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTripwire, BoxName, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTripwire, ConnectedTo, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTripwire, OwnerTargetingTeam, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTripwire, UnknownData_FM1D, 0x0BCC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureTripwire, 0x0BE0);
		}

		// Class ShooterGame.PrimalStructureElevatorTrack
		TEST_METHOD(Class__ShooterGame__PrimalStructureElevatorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorTrack, bHasBase, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorTrack, UnknownData_W4DA, 0x0E09);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorTrack, ElevatorBase, 0x0E0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureElevatorTrack, UnknownData_W8KN, 0x0E15);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureElevatorTrack, 0x0E18);
		}

		// Class ShooterGame.PrimalStructureItemContainer_CropPlot
		TEST_METHOD(Class__ShooterGame__PrimalStructureItemContainer_CropPlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, SeedBaseItemTemplate, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, FertilizerBaseItemTemplate, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, WaterNearbyStructureTemplate, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, CropRefreshIntervalMin, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, CropRefreshIntervalMax, 0x0E24);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, WaterNearbyStructureRange, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, MaxWaterAmount, 0x0E2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, ActiveRainWaterIncreaseSpeed, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, AverageRainWaterIncreaseMultiplier, 0x0E34);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, WaterItemAmountMultiplier, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, ExtraCropMeshScale, 0x0E3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, CropRefreshInterval, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, CropPhaseFertilizerCache, 0x0E4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, CropFruitFertilizerCache, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, CurrentCropPhase, 0x0E56);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, UnknownData_TH7C, 0x0E57);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, PlantedCrop, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, IrrigationWaterTap, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, LastCropRefreshTime, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, UnknownData_G0HV, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, MyCropMeshes, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, MyCropStructure, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, CropRefreshTimeCache, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, FertilizerAmount, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, WaterAmount, 0x0EA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, NumGreenHouseStructures, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, UnknownData_Y6PL, 0x0EA9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, WateringItemTemplates, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, FertilizerConsumptionRateMultiplier, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, UnknownData_FGHY, 0x0EC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, WateredOverridesCraftingItemTemplate, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, MinWateredOverridesCrafting, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, MaxGreenHouseStructures, 0x0EDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, MaxGreenHouseCropGrowthMultiplier, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, GainWaterRate, 0x0EE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, UnknownData_YFUD, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, CropMaxFruitsMultiplier, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot, UnknownData_7T9A, 0x0EF4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureItemContainer_CropPlot, 0x0EF8);
		}

		// Class ShooterGame.PrimalStructureItemContainer_CropPlot_VisualItems
		TEST_METHOD(Class__ShooterGame__PrimalStructureItemContainer_CropPlot_VisualItems)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot_VisualItems, MyExtraStaticMesh, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot_VisualItems, ExtraStaticMesh_NoItems, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot_VisualItems, ExtraStaticMesh_HasItems, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot_VisualItems, ItemClassesToCheck, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_CropPlot_VisualItems, UnknownData_QR05, 0x0F21);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureItemContainer_CropPlot_VisualItems, 0x0F28);
		}

		// Class ShooterGame.PrimalStructureItemContainer_SupplyCrate
		TEST_METHOD(Class__ShooterGame__PrimalStructureItemContainer_SupplyCrate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, MinItemSets, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, MaxItemSets, 0x0E0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, NumItemSetsPower, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, bSetsRandomWithoutReplacement, 0x0E14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, UnknownData_Q1JX, 0x0E15);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, MinQualityMultiplier, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, MaxQualityMultiplier, 0x0E1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, AboveOneExtraQualityMultiplier, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, UnknownData_DIPZ, 0x0E24);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, ItemSets, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, ItemSetsOverride, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, AdditionalItemSets, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, AdditionalItemSetsOverride, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, RequiredLevelToAccess, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, MaxLevelToAccess, 0x0E5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, InitialTimeToLoseHealth, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, IntervalTimeToLoseHealth, 0x0E64);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, IntervalPercentHealthToLose, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, UnknownData_XCRZ, 0x0E6D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, LinkedToCrateSpawnVolume, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, LinkedNPCs, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, UnknownData_JH7P, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, SpawnInInDamageCollisionBoxExtent, 0x0E94);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, bIsUnderWaterCrate, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_SupplyCrate, UnknownData_M61Q, 0x0EA1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureItemContainer_SupplyCrate, 0x0EA8);
		}

		// Class ShooterGame.PrimalStructureItemContainer_HordeCrate
		TEST_METHOD(Class__ShooterGame__PrimalStructureItemContainer_HordeCrate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_HordeCrate, ElementPostProcessMaterial, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_HordeCrate, CrateLoc, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_HordeCrate, UnknownData_WOX5, 0x0EBC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureItemContainer_HordeCrate, 0x0EC0);
		}

		// Class ShooterGame.PrimalStructureItemContainer_VisualItems
		TEST_METHOD(Class__ShooterGame__PrimalStructureItemContainer_VisualItems)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_VisualItems, MyExtraStaticMesh, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_VisualItems, ExtraStaticMesh_NoItems, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_VisualItems, ExtraStaticMesh_HasItems, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_VisualItems, ItemClassesToCheck, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_VisualItems, bIgnoreBlueprints, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_VisualItems, bIgnoreEngrams, 0x0E31);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureItemContainer_VisualItems, UnknownData_2QSJ, 0x0E33);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureItemContainer_VisualItems, 0x0E38);
		}

		// Class ShooterGame.PrimalStructureKeypad
		TEST_METHOD(Class__ShooterGame__PrimalStructureKeypad)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureKeypad, DoorActivationRange, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureKeypad, UnknownData_TJN8, 0x0E0C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureKeypad, 0x0E18);
		}

		// Class ShooterGame.PrimalStructureMovingContainer
		TEST_METHOD(Class__ShooterGame__PrimalStructureMovingContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureMovingContainer, FinalLocation, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureMovingContainer, ItemBalloonLocation, 0x0E14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureMovingContainer, ItemLatitude, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureMovingContainer, ItemLongitude, 0x0E22);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureMovingContainer, LocationName, 0x0E24);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureMovingContainer, bHasSetLocation, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureMovingContainer, UnknownData_ETUD, 0x0E29);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureMovingContainer, 0x0E30);
		}

		// Class ShooterGame.PrimalStructureSeating
		TEST_METHOD(Class__ShooterGame__PrimalStructureSeating)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, SeatedCharacter, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, UnknownData_Y57M, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, SeatedController, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, CharacterPerSeat, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, UnknownData_DW3O, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, NumSeats, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, SeatedCharacterLocationOffset, 0x0E44);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, SeatedCharacterRotationOffset, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, UnknownData_W92G, 0x0E5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, OtherSeatingSpots, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, UnknownData_RECW, 0x0E72);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, TPVCameraYawRange, 0x0E74);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, TPVCameraOffset, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, TPVCameraOffsetMultiplier, 0x0E84);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, UnboardDistance, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, UnknownData_2A32, 0x0E94);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, SeatingActionText, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, RideSound, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, UnrideSound, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, SeatingAnimOverride, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, UnknownData_HMX2, 0x0EC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, SeatingActionPriority, 0x0EC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, LastServerUpdateSent, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeating, UnknownData_6SK7, 0x0ED0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureSeating, 0x0EE0);
		}

		// Class ShooterGame.PrimalStructureBed
		TEST_METHOD(Class__ShooterGame__PrimalStructureBed)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBed, UnknownData_KQ1V, 0x0EE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBed, PlayerSpawnLocOffset, 0x0EE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBed, PlayerSpawnRotOffset, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBed, LinkedPlayerID, 0x0EFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBed, LinkedPlayerName, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBed, BedName, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBed, UseCooldownTime, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBed, UseCooldownRadius, 0x0F24);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBed, AttachedToPlatformStructureEnemySpawnPreventionRadius, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBed, UnknownData_A765, 0x0F2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBed, NextAllowedUseTime, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureBed, UnknownData_TAVD, 0x0F38);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureBed, 0x0F40);
		}

		// Class ShooterGame.PrimalStructureSeatingMusic
		TEST_METHOD(Class__ShooterGame__PrimalStructureSeatingMusic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeatingMusic, StickMesh1, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeatingMusic, StickMesh2, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeatingMusic, StickMeshAttachPoint1, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeatingMusic, StickMeshAttachPoint2, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeatingMusic, InstrumentSounds, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeatingMusic, InstrumentPawnAnimations, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeatingMusic, MinimumTimeBetweenPlays, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeatingMusic, UnknownData_MKLJ, 0x0F24);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeatingMusic, LastPlayInstrumentTime, 0x0F28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureSeatingMusic, 0x0F38);
		}

		// Class ShooterGame.PrimalStructureTurretBallista
		TEST_METHOD(Class__ShooterGame__PrimalStructureTurretBallista)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, TurretTipBone, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, RiderOverrideSocketName, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, AmmoItemTemplate, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, AlternateAmmoItemTemplates, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, ProjectileClass, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, ShootingDamageType, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, ShootingDamageAmount, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, ShootingDamageImpulse, 0x0F1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, ShootingTrailFX, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, ShootingAimSpread, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, UnknownData_DQLX, 0x0F2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, MuzzleFlashEmitter, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, ShootingFireInterval, 0x0F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, UnknownData_QXZD, 0x0F3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, LastShootingFireTime, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, bIsTryingToShoot, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, bIsShooting, 0x0F49);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, bIsTargeting, 0x0F4A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, UnknownData_I3KK, 0x0F4B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, YawViewRotation, 0x0F4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, OldYawViewRotation, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, PitctViewRotation, 0x0F54);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, RotationInput, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, UnknownData_BYJH, 0x0F64);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, FireSound, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, EmptyFireSound, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, RotateSoundCue, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, RotateSpeedThreshold, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, RotateSoundFadeInSpeed, 0x0F84);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, RotateSoundFadeOutSpeed, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, RotateSoundMinVolume, 0x0F8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, RotateSoundMaxVolume, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, TPVCameraPitchMin, 0x0F94);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, TPVCameraPitchMax, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, TPVCameraYawMin, 0x0F9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, TPVCameraYawMax, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, UnknownData_7DEF, 0x0FA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, FireBallistaAnimation, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, EmptyBallistaAnimation, 0x0FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, ReloadBallistaAnimation, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, bIsLoaded, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, UnknownData_FQJP, 0x0FC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, ControllerRiddingYaw, 0x0FC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, TurretSkeletalMeshComponentName, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, MySkeletalMeshComp, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, AttachedModuleComponentName, 0x0FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, AttachedModuleSkeletalMeshComp, 0x0FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, AttachedModuleFireAnimation, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, AttachedModuleReloadAnimation, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, ProjectileMeshAttachPoint, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, ProjectileMeshAttachPointForMeshOnly, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, ProjectileBoneName, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, bQueueReloadingAnimation, 0x1011);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, UnknownData_FUKI, 0x1013);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, ProjectileMesh, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, RotateSoundComponent, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, ProgressBarBackground, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, ProgressBarForeground, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, AmmoCount, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, UnknownData_UCZF, 0x103C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, CurrentAmmoItemTemplate, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, MagazineSize, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, RangeToCheckForAmmo, 0x104C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, UnknownData_A51J, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, AmmoItemTemplateMesh, 0x1068);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, AlternateAmmoItemTemplateMeshes, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, AlternateAmmoProjectileClasses, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, BuffsWhileSeated, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, DefaultAmmoReloadAnimSpeed, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, UnknownData_BCNL, 0x10A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, AlternateAmmoReloadAnimSpeeds, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, HealthCostPerShot, 0x10B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, MinimumHealthPercentToShoot, 0x10BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, InstantFireTraceRange, 0x10C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, AimFromPlayerView, 0x10C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretBallista, UnknownData_77QT, 0x10C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureTurretBallista, 0x10C8);
		}

		// Class ShooterGame.PrimalStructureTurret
		TEST_METHOD(Class__ShooterGame__PrimalStructureTurret)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, Target, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, AmmoItemTemplate, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, MuzzleFlashEmitter, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, FireInterval, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, UnknownData_ETAK, 0x0E24);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, LastFireTime, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, LastLongReloadStartTime, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, MaxFireYawDelta, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, MaxFirePitchDelta, 0x0E3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, TargetingLocOffset, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, TargetingRotationInterpSpeed, 0x0E4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, TargetingRanges, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, TargetingTraceOffset, 0x0E5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, FireDamageType, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, FireDamageAmount, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, FireDamageImpulse, 0x0E74);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, TrailFX, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, TurretAimRotOffset, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, AimTargetLocOffset, 0x0E8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, PlayerProneTargetOffset, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, AimSpread, 0x0EA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, RangeSetting, 0x0EAA);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, AISetting, 0x0EAB);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, WarningSetting, 0x0EAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, UnknownData_0VBN, 0x0EAD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, NumBullets, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, NumBulletsPerShot, 0x0EB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, LongAmmoReloadCD, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, MaxAmmoContainerReloadPercent, 0x0EBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, AlwaysEnableFastTurretTargetingOverVelocity, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, UnknownData_S2C0, 0x0EC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, ProjectileClass, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, WarningExpirationTime, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, UnknownData_EXQI, 0x0ED4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, WarningEmitterShort, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, WarningEmitterLong, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, BatteryIntervalFromActivationBeforeFiring, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, UnknownData_D1ST, 0x0EEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, MyChildEmitterTargetingEffect, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, DefaultTurretAimRotOffset, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, MuzzleLocOffset, 0x0F14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, UnknownData_C6GS, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, MagazineSize, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, RangeToCheckForAmmo, 0x0F2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, AmmoBoxReloadCooldown, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, UnknownData_4R0L, 0x0F34);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurret, CopySettingsRangeMesh, 0x0F38);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureTurret, 0x0F40);
		}

		// Class ShooterGame.PrimalStructureTurretPlant
		TEST_METHOD(Class__ShooterGame__PrimalStructureTurretPlant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretPlant, PlantMuzzleSockets, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretPlant, PlantAttackAnims, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretPlant, PlantHealthRecoverPerSec, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretPlant, AmountOfFertilizerToUsePerShot, 0x0F64);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretPlant, HealthRecoverPerSec, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretPlant, UnknownData_RP49, 0x0F6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretPlant, OwnerCropPlot, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureTurretPlant, UnknownData_QGVN, 0x0F78);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureTurretPlant, 0x0FA0);
		}

		// Class ShooterGame.PrimalStructureUnderwaterBase
		TEST_METHOD(Class__ShooterGame__PrimalStructureUnderwaterBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureUnderwaterBase, UnknownData_1SPI, 0x0E09);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureUnderwaterBase, PortholeOpen, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureUnderwaterBase, PortholeLocked, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureUnderwaterBase, PortholeOpenSaveState, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureUnderwaterBase, PortholeLinks, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureUnderwaterBase, UnknownData_5FFC, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureUnderwaterBase, FloodedEmitter, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureUnderwaterBase, UnfloodedEmitter, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureUnderwaterBase, OpenPortholeSound, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureUnderwaterBase, ClosePortholeSound, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureUnderwaterBase, FreezePortholeSound, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureUnderwaterBase, UnfreezePortholeSound, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureUnderwaterBase, CurrentPinCodes, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureUnderwaterBase, ForcePortholesClosedIndices, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureUnderwaterBase, PortholeNameOverrides, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureUnderwaterBase, UnknownData_D5PK, 0x0EC8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureUnderwaterBase, 0x0ED0);
		}

		// Class ShooterGame.PrimalStructureLadder
		TEST_METHOD(Class__ShooterGame__PrimalStructureLadder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureLadder, LadderCenterZOffset, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureLadder, LadderExitTopPointOffset, 0x0AE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureLadder, LadderExitBottomPointOffset, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureLadder, LadderEnterTopPointOffset, 0x0AFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureLadder, LadderEnterBottomPointOffset, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureLadder, LadderClimbRotationOffset, 0x0B14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureLadder, UnknownData_LSH0, 0x0B21);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureLadder, LadderRetractionSound, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureLadder, LadderUnretractionSound, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureLadder, UnknownData_0QQD, 0x0B39);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureLadder, 0x0B40);
		}

		// Class ShooterGame.PrimalStructurePortableLadder
		TEST_METHOD(Class__ShooterGame__PrimalStructurePortableLadder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePortableLadder, MaximumHeightAllowedForLadder, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePortableLadder, UnknownData_FACF, 0x0B44);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePortableLadder, BottomAnimBlueprint, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePortableLadder, MidAnimBlueprint, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePortableLadder, MidRetractedAnimMontageBlueprint, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePortableLadder, BottomRetractedAnimMontageBlueprint, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePortableLadder, MidAnimMontageBlueprint, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePortableLadder, BottomAnimMontageBlueprint, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePortableLadder, MidAnimMontageExtendedBlueprint, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePortableLadder, BottomAnimMontageExtendedBlueprint, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePortableLadder, MidSkeletalMesh, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePortableLadder, MyBottomSkeletalMesh, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePortableLadder, MidLadderSkeletalMeshs, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePortableLadder, BottomLadderSkeletalMesh, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePortableLadder, SkeletalMeshsForAnimation, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePortableLadder, UnknownData_ILCV, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructurePortableLadder, UnknownData_YHCK, 0x0BE1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructurePortableLadder, 0x0BE8);
		}

		// Class ShooterGame.PrimalStructureSeaMine
		TEST_METHOD(Class__ShooterGame__PrimalStructureSeaMine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, TriggerComponent, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, ExplodingTriggerComponent, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, ActivatedMineParticleSystem, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, ActivatedMineParticleSystemOffset, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, UnknownData_KP9O, 0x0B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, ActivateMaterials, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, ActivatedSound, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, SeaMineSpeed, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, SeaMineExplodeTime, 0x0B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, ExplosionDamage, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, ExplosionRadius, 0x0B2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, ExplosionImpulse, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, UnknownData_YCGW, 0x0B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, ExplosionDamageType, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, OwnerTargetingTeam, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, UnknownData_XF9S, 0x0B44);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, TriggerOverlappingCharacters, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, UnknownData_1YQU, 0x0B59);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, LastKnownTargetLocation, 0x0B5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSeaMine, SeaMineTarget, 0x0B68);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureSeaMine, 0x0B70);
		}

		// Class ShooterGame.PrimalStructureSign
		TEST_METHOD(Class__ShooterGame__PrimalStructureSign)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSign, SignText, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSign, SignWidth, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSign, MaxNumberofCharacters, 0x0AF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSign, MinFontSize, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSign, DefaultScale, 0x0AFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSign, TextRender, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureSign, UnknownData_WYNF, 0x0B08);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureSign, 0x0B10);
		}

		// Class ShooterGame.PrimalStructureWaterPipe
		TEST_METHOD(Class__ShooterGame__PrimalStructureWaterPipe)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureWaterPipe, UnknownData_30OX, 0x0AE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureWaterPipe, AutoDestroyPeriodWhenUnconnectedToNonPipe, 0x0AE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureWaterPipe, HasWaterMaterial, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureWaterPipe, NoWaterMaterial, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureWaterPipe, WaterMaterialIndex, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalStructureWaterPipe, UnknownData_C278, 0x0AFC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalStructureWaterPipe, 0x0B00);
		}

		// Class ShooterGame.PrimalTribeData
		TEST_METHOD(Class__ShooterGame__PrimalTribeData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalTribeData, TribeData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalTribeData, 0x0168);
		}

		// Class ShooterGame.BaseSelectableButtonWidget
		TEST_METHOD(Class__ShooterGame__BaseSelectableButtonWidget)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseSelectableButtonWidget, 0x0518);
		}

		// Class ShooterGame.DataListEntryButton_HostSession
		TEST_METHOD(Class__ShooterGame__DataListEntryButton_HostSession)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_HostSession, UnknownData_7ETP, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_HostSession, DisplayName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_HostSession, bCenterDisplayName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_HostSession, UnknownData_28JH, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_HostSession, ShortMapName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_HostSession, LongMapName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_HostSession, ModName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_HostSession, ModPath, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_HostSession, ModItemId, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_HostSession, UnknownData_ADEJ, 0x0581);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataListEntryButton_HostSession, 0x05D0);
		}

		// Class ShooterGame.DataListEntryButton_ListSession
		TEST_METHOD(Class__ShooterGame__DataListEntryButton_ListSession)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, LastJoinedExtendedStyle, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, StandardExtendedStyle, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, UniqueID, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, GameName, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, BuildId, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, OwnerName, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, MapName, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, DayTimeStr, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, NumPlayers, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, MaxNumPlayers, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, ModId, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, TotalConversionId, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, Ping, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, bHasPassword, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, bIsFavourite, 0x0629);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, bIsPVEServer, 0x062A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, bSessionHasActiveMods, 0x062B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, UnknownData_R3N6, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, PasswordTexture, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, bIsOfficialServer, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, bUsingBattleEye, 0x0639);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, bAllowDownloadCharacters, 0x063A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, bAllowDownloadItems, 0x063B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, UnknownData_UKCM, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, BattleEyeTexture, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, OfficialServerTexture, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, PVPServerTexture, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, PVEServerTexture, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, DisplayStringSelectedColor, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_ListSession, UnknownData_HJND, 0x0671);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataListEntryButton_ListSession, 0x07B8);
		}

		// Class ShooterGame.DataListEntryButton_MainMenu
		TEST_METHOD(Class__ShooterGame__DataListEntryButton_MainMenu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_MainMenu, UnknownData_1QU7, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_MainMenu, DisplayName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_MainMenu, bCenterDisplayName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_MainMenu, UnknownData_3GA9, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_MainMenu, MapName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_MainMenu, ModName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_MainMenu, ModPath, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_MainMenu, ModItemId, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_MainMenu, UnknownData_8BKY, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_MainMenu, Button, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_MainMenu, EntryNameLabel, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataListEntryButton_MainMenu, 0x0588);
		}

		// Class ShooterGame.DinoListButtonWidget
		TEST_METHOD(Class__ShooterGame__DinoListButtonWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDinoListButtonWidget, ContextMenuAnchorName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDinoListButtonWidget, DinoStatusLabelName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDinoListButtonWidget, ExpirationLabelName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDinoListButtonWidget, ExpirationLabelParentName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDinoListButtonWidget, UnknownData_D5BC, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDinoListButtonWidget, ContextMenuAnchor, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDinoListButtonWidget, UnknownData_73R0, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDinoListButtonWidget, 0x0698);
		}

		// Class ShooterGame.MissionBiomeCompletionWidget
		TEST_METHOD(Class__ShooterGame__MissionBiomeCompletionWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionBiomeCompletionWidget, ButtonIcon, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionBiomeCompletionWidget, SectionName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionBiomeCompletionWidget, UnknownData_DFFU, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionBiomeCompletionWidget, AllMissionsCompletedColor, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionBiomeCompletionWidget, SectionNameTextColor, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionBiomeCompletionWidget, CompletionPercentLabelTextColor, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionBiomeCompletionWidget, NumCompletedValueTextColor, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionBiomeCompletionWidget, NumCompletedLabelTextColor, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionBiomeCompletionWidget, CompletionProgressBarForegroundColor, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionBiomeCompletionWidget, UnknownData_7TLD, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionBiomeCompletionWidget, 0x05E8);
		}

		// Class ShooterGame.MissionListEntryWidget
		TEST_METHOD(Class__ShooterGame__MissionListEntryWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionListEntryWidget, ItemLabelName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionListEntryWidget, UnknownData_R3GX, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionListEntryWidget, 0x0538);
		}

		// Class ShooterGame.TamingListEntryWidget
		TEST_METHOD(Class__ShooterGame__TamingListEntryWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTamingListEntryWidget, ItemLabelName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTamingListEntryWidget, NameLabelColor_Default, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTamingListEntryWidget, NameLabelColor_Female, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTamingListEntryWidget, NameLabelColor_Male, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTamingListEntryWidget, BackgroundColor_Default, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTamingListEntryWidget, BackgroundColor_Tracked, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTamingListEntryWidget, BackgroundColor_Completed, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTamingListEntryWidget, SeparatorColor, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTamingListEntryWidget, DistanceIconTexture, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTamingListEntryWidget, CompletedIconTexture, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTamingListEntryWidget, TooltipBackgroundTexture, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTamingListEntryWidget, GenderIcon_Male, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTamingListEntryWidget, GenderIcon_Female, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTamingListEntryWidget, UnknownData_4NRR, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTamingListEntryWidget, 0x0680);
		}

		// Class ShooterGame.TradeItemButtonWidget
		TEST_METHOD(Class__ShooterGame__TradeItemButtonWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeItemButtonWidget, ItemCostTextBlockName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeItemButtonWidget, ItemQuantityTextBlockName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeItemButtonWidget, ItemImageName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeItemButtonWidget, ItemWeightTextBlockName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeItemButtonWidget, CanAffordPriceText, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeItemButtonWidget, TooExpensivePriceText, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeItemButtonWidget, UnknownData_5QKC, 0x0559);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTradeItemButtonWidget, 0x0598);
		}

		// Class ShooterGame.TribeManagerListButton
		TEST_METHOD(Class__ShooterGame__TribeManagerListButton)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTribeManagerListButton, UnknownData_AVKQ, 0x0519);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTribeManagerListButton, 0x0530);
		}

		// Class ShooterGame.TribeMemberButtonWidget
		TEST_METHOD(Class__ShooterGame__TribeMemberButtonWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTribeMemberButtonWidget, UnknownData_JYTC, 0x0519);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTribeMemberButtonWidget, 0x0558);
		}

		// Class ShooterGame.TribeWarButtonWidget
		TEST_METHOD(Class__ShooterGame__TribeWarButtonWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTribeWarButtonWidget, UnknownData_G8GI, 0x0519);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTribeWarButtonWidget, 0x0548);
		}

		// Class ShooterGame.DataListEntryButton_DyeResources
		TEST_METHOD(Class__ShooterGame__DataListEntryButton_DyeResources)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryButton_DyeResources, UnknownData_QGYC, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataListEntryButton_DyeResources, 0x0528);
		}

		// Class ShooterGame.DataListEntryEngramList
		TEST_METHOD(Class__ShooterGame__DataListEntryEngramList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryEngramList, EntryWidgetTemplate, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryEngramList, DataPanelName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryEngramList, LevelLabelName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryEngramList, LevelEnabledEffectName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryEngramList, ElementIconName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryEngramList, EngramRowStartName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryEngramList, EngramRowMiddleName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryEngramList, EngramRowEndName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryEngramList, SwitcherTextActiveColor, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryEngramList, SwitcherTextInactiveColor, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryEngramList, WidgetLimit, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataListEntryEngramList, UnknownData_TM0S, 0x057C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataListEntryEngramList, 0x05D0);
		}

		// Class ShooterGame.DinoAncestryEntryWidget
		TEST_METHOD(Class__ShooterGame__DinoAncestryEntryWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDinoAncestryEntryWidget, UnknownData_VAVF, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDinoAncestryEntryWidget, 0x0538);
		}

		// Class ShooterGame.DyeRegionButtonWidget
		TEST_METHOD(Class__ShooterGame__DyeRegionButtonWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeRegionButtonWidget, UnknownData_H3EB, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeRegionButtonWidget, DefaultBackgroundColor, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeRegionButtonWidget, DefaultPreviewColor, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeRegionButtonWidget, UnknownData_9F5Z, 0x053C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDyeRegionButtonWidget, 0x0560);
		}

		// Class ShooterGame.HUDActiveMissionWidget
		TEST_METHOD(Class__ShooterGame__HUDActiveMissionWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, UnknownData_QAWV, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, ActiveMissionVisibilityWidgetNames, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, MissionNameTextBlockName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, MissionDifficultyTextBlockName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, MissionDescriptionTextBlockName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, ObjectiveTimeValueTextBlockName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, ObjectiveTimeLabelTextBlockName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, ObjectiveTimePanelName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, ObjectiveTimeProgressBarName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, MissionDifficultyPanelName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseRequirementContainerName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, MissionTimeRemainingDefaultTextColor, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, MissionStatTrackerVisibilityWidgetNames, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, MissionStatTrackerContainerName, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseRequirementWidgetClass, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseBackgroundBorderWidgetName, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseRichTextBlockName, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseDescriptionBlockName, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseDescriptionPrefixBlockName, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseDescriptionSuffixBlockName, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseValueContainerName, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseValueTextBlockName, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseValueSlashTextBlockName, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseMaxValueTextBlockName, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseProgressContainerName, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseProgressBarName, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseNormalBackgroundColor, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseCompleteBackgroundColor, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, MissionAlertFlyoutContainerName, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, MissionAlertEntryContainerName, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, MissionAlertTitleTextBlockName, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, MissionAlertBorderName, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, TopMissionAlertFlyoutContainerName, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, TopMissionAlertEntryContainerName, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, TopMissionAlertTitleTextBlockName, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, TopMissionAlertBorderName, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, MissionAlertColor_Negative, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, MissionAlertColor_Neutral, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, MissionAlertColor_Positive, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, AlertEntryWidgetClass, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, AlertFlyoutAnimationDuration, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, AlertFlyoutCurve, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, UnknownData_LLLW, 0x069D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, AlertOffscreenTransform, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, TopAlertOffscreenTransform, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, DefaultPositiveMissionAlertSound, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, DefaultNeutralMissionAlertSound, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, DefaultNegativeMissionAlertSound, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, AlertEntryIconContainerName, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, AlertEntryIconName, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, AlertCountTextBlockName, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, AlertContentTextBlockName, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, RacePanelName, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, RacePositionTextBlockName, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, RaceMaxPositionTextBlockName, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, MissionTimeValueTextBlockName, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, BestRaceTimeName, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, ObjectiveTimeRemainingProgressBarColor, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, LowObjectiveTimeRemainingProgressBarColor, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseReqTextColor_Negative, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseReqTextColor_Neutral, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseReqTextColor_Positive, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseReqProgressColor_Negative, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseReqProgressColor_Neutral, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, PhaseReqProgressColor_Positive, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, OpacityForSlashAndMaxValueText, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, UnknownData_MD8L, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, WorldBuffEffectListEntry_WidgetType, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, UnknownData_D07G, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, BestRaceTimeTextBlock, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, UnknownData_Q207, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, MaxWorldBuffsDisplayedAtOnce, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, UnknownData_80EO, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, ActiveMission, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, missionData, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, ActiveMissionWidget, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, CustomStatusCanvas, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDActiveMissionWidget, UnknownData_MG1M, 0x0900);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDActiveMissionWidget, 0x0918);
		}

		// Class ShooterGame.HUDCustomStatusWidget
		TEST_METHOD(Class__ShooterGame__HUDCustomStatusWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDCustomStatusWidget, UnknownData_VE4A, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDCustomStatusWidget, CanvasPanelName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDCustomStatusWidget, TextWidgetClass, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDCustomStatusWidget, TitleWidgetTextBlockName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDCustomStatusWidget, TextWidgetTextBlockName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDCustomStatusWidget, CustomTextContainerName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDCustomStatusWidget, ProgressWidgetClass, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDCustomStatusWidget, ProgressWidgetProgressName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDCustomStatusWidget, ImageWidgetClass, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDCustomStatusWidget, ImageBackgroundWidgetName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDCustomStatusWidget, IconWidgetName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDCustomStatusWidget, CustomStatusCanvas, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDCustomStatusWidget, UnknownData_DDIX, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDCustomStatusWidget, WidgetRefs, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDCustomStatusWidget, UnknownData_B7F4, 0x05D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDCustomStatusWidget, 0x05E0);
		}

		// Class ShooterGame.HUDPingsContainer
		TEST_METHOD(Class__ShooterGame__HUDPingsContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPingsContainer, PingContainerCanvasName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPingsContainer, PingWidgetClass, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPingsContainer, PingContainerCanvas, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPingsContainer, SpawnedPingWidgets, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDPingsContainer, 0x0540);
		}

		// Class ShooterGame.HUDPingWidget
		TEST_METHOD(Class__ShooterGame__HUDPingWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPingWidget, PingPlayerNameTextBlockName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPingWidget, PingRespondingPlayerNameTextBlockName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPingWidget, PingIconName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPingWidget, PingSwitcherName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPingWidget, PingOffScreenArrowName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPingWidget, PingOffScreenIconName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPingWidget, PingOffScreenArrowBackgroundName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPingWidget, WidgetRemoveDuration, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPingWidget, UnknownData_OQFR, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPingWidget, WidgetPingData, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPingWidget, UnknownData_1MBO, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPingWidget, UnknownData_71DY, 0x05E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDPingWidget, 0x05E8);
		}

		// Class ShooterGame.HUDPointOfInterestWidget
		TEST_METHOD(Class__ShooterGame__HUDPointOfInterestWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, OuterContainerName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, PointTitleTextBlockName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, PointDescTextBlockName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, PointIconPanelName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, PointIconName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, PointSwitcherName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, PointOffScreenArrowName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, PointOffScreenIconName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, OnScreenPrimaryPanelName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, OffScreenPrimaryPanelName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, OnScreenIndicatorImageName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, OffScreenIndicatorImageName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, OnScreenProgressPanelName, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, OnScreenProgressLabelName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, OffScreenProgressPanelName, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, OffScreenProgressLabelName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, WidgetTitleHiddenIconRenderOffset_Y, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, UnknownData_Z6B3, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, WidgetPointOfInterestData, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, FallbackIcon, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, DefaultLocationAddedSound, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, DefaultLocationReachedSound, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, UnknownData_MS9U, 0x06F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, OffScreenWidgetScale, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointOfInterestWidget, UnknownData_PVZL, 0x0700);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDPointOfInterestWidget, 0x0780);
		}

		// Class ShooterGame.HUDPointsOfInterestContainer
		TEST_METHOD(Class__ShooterGame__HUDPointsOfInterestContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointsOfInterestContainer, PointContainerCanvasName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointsOfInterestContainer, PointOfInterestWidgetClass, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointsOfInterestContainer, TamingListEntryTemplate, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointsOfInterestContainer, PointContainerCanvas, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointsOfInterestContainer, SpawnedPointWidgets, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointsOfInterestContainer, TamingPOITooltip, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDPointsOfInterestContainer, UnknownData_CAID, 0x0550);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDPointsOfInterestContainer, 0x0558);
		}

		// Class ShooterGame.InventoryArkCreaturesPanel
		TEST_METHOD(Class__ShooterGame__InventoryArkCreaturesPanel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryArkCreaturesPanel, UploadedCreatureListName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryArkCreaturesPanel, LocalCreatureListName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryArkCreaturesPanel, UploadCreatureButtonName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryArkCreaturesPanel, DownloadCreatureButtonName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryArkCreaturesPanel, DinoSlotButtonTemplate, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryArkCreaturesPanel, UnknownData_M2RI, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryArkCreaturesPanel, 0x0818);
		}

		// Class ShooterGame.InventoryDinoAncestryPanel
		TEST_METHOD(Class__ShooterGame__InventoryDinoAncestryPanel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryDinoAncestryPanel, AncestryEntryWidgetTemplate, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryDinoAncestryPanel, UnknownData_4C30, 0x0520);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryDinoAncestryPanel, 0x0590);
		}

		// Class ShooterGame.PrimalSubMenuUI
		TEST_METHOD(Class__ShooterGame__PrimalSubMenuUI)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalSubMenuUI, UnknownData_DIWO, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalSubMenuUI, 0x0528);
		}

		// Class ShooterGame.UI_Inventory
		TEST_METHOD(Class__ShooterGame__UI_Inventory)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Inventory, PanelContainerLeftName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Inventory, PanelContainerCenterName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Inventory, PanelContainerRightName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Inventory, WidgetSwitcherRightName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Inventory, QuickActionSlotPanelName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Inventory, QuickActionSlotDataListName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Inventory, PlayerCharacterPanelName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Inventory, PlayerInventoryPanelName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Inventory, RemoteInventoryPanelName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Inventory, StatsPanelName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Inventory, DinoAncestryOverlayName, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Inventory, ListSessionsUITemplate, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Inventory, SteamInventoryStatusUITemplate, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Inventory, ErrorSound, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Inventory, UnknownData_AFQ3, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Inventory, bHasRemoteInventory, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Inventory, UnknownData_M798, 0x059A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Inventory, 0x08B0);
		}

		// Class ShooterGame.InventoryQuickSlotsPanel
		TEST_METHOD(Class__ShooterGame__InventoryQuickSlotsPanel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryQuickSlotsPanel, UnknownData_9C07, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryQuickSlotsPanel, 0x0528);
		}

		// Class ShooterGame.InventoryPanelWidget
		TEST_METHOD(Class__ShooterGame__InventoryPanelWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, TabBgSwitcherName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, InventoryButtonName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, CraftingButtonName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, CreaturesButtonName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, InventoryEnabledEffectName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, CraftingEnabledEffectName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, SearchTextBoxName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, TooltipToggleButtonName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, SortMenuButtonName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, SortMenuAnchorName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, ShowAllButtonName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, ShowEngramsButtonName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, ShowEngramsBoxName, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, TransferAllButtonName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, DropAllButtonName, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, NewFolderButtonName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, DataListSwitcherName, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, InventoryDataListName, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, CraftingDataListName, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, CraftingQueueHeaderBoxName, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, CraftingQueueItemsBoxName, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, CraftQueueItemButtonNames, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, HeaderBoxName, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, InventoryTabLabelName, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, CraftingTabLabelName, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, ArkCreaturesPanelName, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, ClearCraftingQueueButtonName, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, ReceivingItemsLabelName, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, SwitcherTextActiveColor, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, SwitcherTextInactiveColor, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, bIsRemoteInventory, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelWidget, UnknownData_HORK, 0x0621);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryPanelWidget, 0x0750);
		}

		// Class ShooterGame.InventoryStatsPanel
		TEST_METHOD(Class__ShooterGame__InventoryStatsPanel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStatsPanel, TabBgSwitcherName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStatsPanel, PlayerStatsTabButtonName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStatsPanel, RemoteStatsTabButtonName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStatsPanel, RemoteStatsTabTextBlockName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStatsPanel, PlayerEnabledEffectName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStatsPanel, RemoteEnabledEffectName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStatsPanel, StatsWidgetSwitcherName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStatsPanel, PlayerStatsPanelName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStatsPanel, HeaderPanelName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStatsPanel, RootSizeBoxName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStatsPanel, CharacterStatsPanelUITemplate, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStatsPanel, StructureStatsPanelUITemplate, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStatsPanel, ObeliskStatsPanelUITemplate, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStatsPanel, SwitcherTextActiveColor, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStatsPanel, SwitcherTextInactiveColor, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStatsPanel, UnknownData_P1G6, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStatsPanel, RemoteStatsPanel, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryStatsPanel, 0x0600);
		}

		// Class ShooterGame.LeaderboardRowWidget
		TEST_METHOD(Class__ShooterGame__LeaderboardRowWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRowWidget, bIsHeaderRow, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRowWidget, UnknownData_69PS, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRowWidget, ColumnContainerWidgetName, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRowWidget, UnknownData_J2V5, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRowWidget, Columns, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRowWidget, DefaultLeaderboardRowTextColor, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRowWidget, DefaultLeaderboardRowBackgroundColor, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRowWidget, DefaultLeaderboardRowBackgroundTexture, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRowWidget, PersonalLeaderboardRowTextColor, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRowWidget, PersonalLeaderboardRowBackgroundColor, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRowWidget, PersonalLeaderboardRowBackgroundTexture, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRowWidget, HeaderLeaderboardRowTextColor, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRowWidget, HeaderLeaderboardRowBackgroundColor, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRowWidget, HeaderLeaderboardRowBackgroundTexture, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRowWidget, UnknownData_SGGU, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRowWidget, ColumnContainer, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardRowWidget, ColumnWidgets, 0x05D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardRowWidget, 0x05E0);
		}

		// Class ShooterGame.PlayerHUDUI
		TEST_METHOD(Class__ShooterGame__PlayerHUDUI)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUDUI, SlotItemsDataListName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUDUI, PrimaryStatusBarsWidgetName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUDUI, SecondaryStatusBarsWidgetName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUDUI, CraftQueueItemButtonName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUDUI, ExtraProgressBarName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUDUI, SlotItemsDataListParentPanelName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUDUI, CompassBarWidgetName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUDUI, ElementBarWidgetName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUDUI, RichTextOverlayData, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUDUI, RichTextBlocks, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUDUI, UnknownData_5NWU, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUDUI, ExtraProgressBar, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHUDUI, UnknownData_0N25, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerHUDUI, 0x0688);
		}

		// Class ShooterGame.UI_DinoOrderGroups
		TEST_METHOD(Class__ShooterGame__UI_DinoOrderGroups)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DinoOrderGroups, DinoOrderGroupEntryTemplate, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DinoOrderGroups, ContextMenuClass, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DinoOrderGroups, UnknownData_079S, 0x0538);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_DinoOrderGroups, 0x0610);
		}

		// Class ShooterGame.UI_EngramsMenu
		TEST_METHOD(Class__ShooterGame__UI_EngramsMenu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EngramsMenu, ARKPrimeEngramsButtonName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EngramsMenu, ScorchedEarthEngramsButtonName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EngramsMenu, TekgramsButtonName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EngramsMenu, LearnEngramButtonTextName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EngramsMenu, AvailablePointsTextName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EngramsMenu, UnlearnedEngramsButtonName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EngramsMenu, AberrationEngramsButtonName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EngramsMenu, ExtinctionEngramsButtonName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EngramsMenu, GenesisEngramsButtonName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EngramsMenu, EngramTitleLabelName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EngramsMenu, EngramsDataListName, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EngramsMenu, EngramFilterTextBoxName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EngramsMenu, LearnEngramButtonName, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EngramsMenu, UnknownData_OLBA, 0x0590);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_EngramsMenu, 0x0648);
		}

		// Class ShooterGame.UI_MissionList
		TEST_METHOD(Class__ShooterGame__UI_MissionList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, CloseButtonName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, TitleLabelName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionListContainerName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionDetailsContainerName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionDetails_MissionNameTextBlockName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionDetails_MissionDescriptionTextBlockName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionDetails_StartMissionButtonName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionDetails_StartMissionButtonTextName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionDetails_LeaderboardsButtonName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionDetails_LeaderboardsButtonTextName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionDetails_DifficultyTextBlockName, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionStatusPanelName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MetaTagInfoClass, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionList_WidgetType, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionRequirement_WidgetType, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionObjective_WidgetType, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionTimer_WidgetType, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, WorldBuffEffectListEntry_WidgetType, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionRequirementEntry_WidgetType, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, StartButtonDisplayText_StartMission, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, StartButtonDisplayText_LeaveMission, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, StartButtonDisplayText_EnableStatTracker, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, StartButtonDisplayText_DisableStatTracker, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionList_EntryButtonWidgetName, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionList_NameWidgetName, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionList_DescWidgetName, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionList_ErrorTextWidgetName, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionList_EligibilityWidgetName, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionList_StartButtonTextWidgetName, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MissionList_StartButtonWidgetName, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, ArcticIcon, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, BogIcon, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, LunarIcon, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, OceanIcon, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, VolcanicIcon, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, SoloIcon, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MultiplayerIcon, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, TableWidth, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, LatestScoreTableWidth, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, MaxLeaderboardRowsToDisplay, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, SwitcherTextActiveColor, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, SwitcherTextInactiveColor, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, UnknownData_I25A, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, TabBackgroundTexture, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, TabMirroredBackgroundTexture, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, AlphaMissionColor, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, BetaMissionColor, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, GammaMissionColor, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, ActiveMissionColor, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, InactiveMissionColor, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, AvailableMissionColor, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, UnavailableMissionColor, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, DefaultTextColor, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, GlitchTintColor, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, GlitchTextColor, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, UnknownData_WUY3, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, HeaderRowWidget, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, RowContainer, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, RowWidgets, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, LatestScoreRowWidget, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, LatestPlayerScoreRowContainer, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MissionList, UnknownData_JBVU, 0x0A48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_MissionList, 0x0AA8);
		}

		// Class ShooterGame.UI_OptionsMenu
		TEST_METHOD(Class__ShooterGame__UI_OptionsMenu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, SaveButtonName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, ApplyButtonName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, ResetButtonName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, CancelButtonName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, ResolutionWidthTextBoxName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, ResolutionHeightTextBoxName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, ResolutionsComboBoxName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, WindowModeComboBoxName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, GraphicsQualityComboBoxName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, ResolutionScaleSliderName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, ViewDistanceComboBoxName, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, AntiAliasingComboBoxName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, PostProcessingComboBoxName, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, ShadowsComboBoxName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, TexturesComboBoxName, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, EffectsComboBoxName, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, AudioVolumeSliderName, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, KeyBindings, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, InvertMouseYCheckBoxName, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, CameraShakeScaleSliderName, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, FirstPersonRidingCheckboxName, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, ToggleToTalkCheckBoxName, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, ToggleExtendedHUDInfoCheckboxName, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_OptionsMenu, UnknownData_C4A0, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_OptionsMenu, 0x09D8);
		}

		// Class ShooterGame.UI_SurvivorProfile
		TEST_METHOD(Class__ShooterGame__UI_SurvivorProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, UnknownData_V1TJ, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, AsyncLoadedSoundWave, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, UnknownData_WW05, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, ExplorerNoteDynamicMaterials, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, UnknownData_XKIF, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, AsyncLoadedSoundCue, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, UnknownData_HDCC, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, AsyncLoadingDinoEntry, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, AsyncLoadedDinoTexture, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, AsyncLoadedDialogueAnimTexture, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, DialogueSoundComponent, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, bShowingDossiers, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, bShowingScorchedEarth, 0x08B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, UnknownData_6O9C, 0x08BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, ExplorerNoteMaterialParameterName, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, ExplorerNoteAnimTextureParamName, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, ExplorerNoteAnimTextureStartTimeParamName, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, ExplorerNoteAnimTextureDurationParamName, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, ExplorerNoteAnimTextureDurationOffset, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, ExplorerNoteFadeInSpeed, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, ExplorerNoteFadeOutSpeed, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, ShowDossierTitleDelayTime, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, ExplorerNoteExtraCloseTime, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, NoteCategoryNames, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, CategoryIcons, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SurvivorProfile, UnknownData_S2XF, 0x0910);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SurvivorProfile, 0x0918);
		}

		// Class ShooterGame.UI_TamingList
		TEST_METHOD(Class__ShooterGame__UI_TamingList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TamingList, TamingListEntryTemplate, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TamingList, POI_Icon, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TamingList, UnknownData_3A39, 0x0538);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_TamingList, 0x0638);
		}

		// Class ShooterGame.UI_TribeManager
		TEST_METHOD(Class__ShooterGame__UI_TribeManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeManager, CreateNewTribeButtonName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeManager, LeaveTribeButtonName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeManager, TribeNameLabelName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeManager, TribeNameEditBoxName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeManager, RemovePlayerFromTribeButtonName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeManager, ManageTribePanelName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeManager, NewTribePanelName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeManager, MyScrollBoxName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeManager, ReverseLogOrderButtonName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeManager, TribePlayerEntryButtonTemplate, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeManager, TribeWarEntryButtonTemplate, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeManager, TribeAllianceEntryButtonTemplate, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeManager, TribeAllianceMemberEntryButtonTemplate, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeManager, RankEntryButtonTemplate, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeManager, SwitcherTextActiveColor, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeManager, SwitcherTextInactiveColor, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeManager, LastPlayerRefreshTime, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeManager, UnknownData_I3Y7, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_TribeManager, 0x09D8);
		}

		// Class ShooterGame.StatsPanelWidget
		TEST_METHOD(Class__ShooterGame__StatsPanelWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget, MultiUseButton1Name, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget, MultiUseButton2Name, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget, MultiUseButton3Name, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget, MultiUseButton4Name, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget, MultiUseButton5Name, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget, MultiUseButton6Name, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget, DefaultMultiuseButtonExtendedStyle, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget, DefaultMultiuseButtonStyle, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget, UnknownData_NL7M, 0x07D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatsPanelWidget, 0x0828);
		}

		// Class ShooterGame.StatsPanelWidget_Character
		TEST_METHOD(Class__ShooterGame__StatsPanelWidget_Character)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, PlayerStatusBoxName, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, ExperienceBoxName, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, UpgradesBoxName, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, EquipmentDataListPanelName, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, DisabledEquipmentPanelName, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, GenderSwitcherName, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, NameLabelName, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, LevelLabelName, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, TribeLabelName, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, BiomeRegionLabelName, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, SpawnRegionLabelName, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, TameLimitLabelName, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, ArmorLabelName, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, HypothermalInsulationLabelName, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, HyperthermalInsulationLabelName, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, HypothermalInsulationNameLabelName, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, HyperthermalInsulationNameLabelName, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, ExperienceBarName, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, ExperienceLabelName, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, StatWidgetNames, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, ImprintingStatWidgetName, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, ShowAncestorsButtonName, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, NumUpgradePointsAvailableLabelName, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, HyperthermalInsulationBoxName, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, HypothermalInsulationBoxName, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, TameLimitBoxName, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, StatDayValueTextBlockName, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, StatTimeValueTextBlockName, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, StatTmpValueTextBlockName, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, StatWindValueTextBlockName, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Character, UnknownData_QUE7, 0x0970);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatsPanelWidget_Character, 0x0B40);
		}

		// Class ShooterGame.StatsPanelWidget_Obelisk
		TEST_METHOD(Class__ShooterGame__StatsPanelWidget_Obelisk)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Obelisk, NameLabelName, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Obelisk, DescriptionLabelName, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Obelisk, UploadCharacterDataButtonName, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Obelisk, TravelToAnotherServerButtonName, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Obelisk, RefreshArkButtonName, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Obelisk, ArkStorageStatName, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Obelisk, ArkDinoStatName, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Obelisk, StorageStatName, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Obelisk, UnknownData_4QWU, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatsPanelWidget_Obelisk, 0x08A8);
		}

		// Class ShooterGame.StatsPanelWidget_Structure
		TEST_METHOD(Class__ShooterGame__StatsPanelWidget_Structure)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Structure, EquipmentDataListPanelName, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Structure, DisabledEquipmentPanelName, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Structure, StructureNameLabelName, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Structure, OwnerLabelName, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Structure, DescriptionLabelName, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Structure, HealthStatName, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Structure, StorageStatName, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Structure, WeightStatName, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsPanelWidget_Structure, UnknownData_GWG8, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatsPanelWidget_Structure, 0x08A8);
		}

		// Class ShooterGame.StructureStatWidget
		TEST_METHOD(Class__ShooterGame__StructureStatWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructureStatWidget, StatName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructureStatWidget, UnknownData_1DDP, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructureStatWidget, StatIcon, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructureStatWidget, StatTextBlockName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructureStatWidget, StatValueBlockName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructureStatWidget, StatImageName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructureStatWidget, StatBarName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructureStatWidget, UnknownData_0XNI, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructureStatWidget, 0x0588);
		}

		// Class ShooterGame.UI_AdminMangment
		TEST_METHOD(Class__ShooterGame__UI_AdminMangment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, UnknownData_06QY, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, FPSValueName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, NumConnectedName, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, NumBannedName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, NumWhiteListedName, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, MaxStructuresInRangeName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, RemoveFromWhiteListButtonName, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, CancelCheatCommandButtonName, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ExcuteCheatCommandButtonName, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, CopyPlayerIDCheatCommandButtonName, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, CopySteamIDCheatCommandButtonName, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, CheatsScrollBoxName, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, CheatSlotButtonTemplate, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, UnknownData_AX7C, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, CancelManualBanButtonName, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ExcuteManualBanButtonName, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, CancelManualwhiteListedButtonName, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ExcuteManualwhiteListedButtonName, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, KickButtonName, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, RefreshButtonName, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, paramtersPanelName, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ManualBanPanelName, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ManualWhiteListedPaneName, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ConnectedPlayerPanelName, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, RefreshingConnectedPlayerPanelName, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, BannedPlayerPanelName, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, RefreshingBannedPlayerPanelName, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, WhiteListedPlayerPanelName, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, RefreshingWhiteListedPlayerPanelName, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ParmterTextFieldName, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ChetFunctionSelectedImageName, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, DifficultyOffsetName, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, GlobalVoiceChatName, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ProximityChatName, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, NoTributeDownloadsName, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, AllowThirdPersonPlayerName, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, AlwaysNotifyPlayerLeftName, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, DontAlwaysNotifyPlayerJoinedName, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, AddToWhiteListButtonName, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ManualAddToWhiteListButtonName, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ServerHardcoreName, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ServerPVEName, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ServerCrosshairName, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ServerForceNoHUDName, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, FunctionDiscriptionName, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ShowMapPlayerLocationName, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ServerPasswordName, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ServerAdminPasswordName, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, PositionName, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, MessgaeOfTheDayName, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, SetMessgaeOfTheDayName, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, AllConnectedPlayerScrollBoxName, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, AllBannedPlayerScrollBoxName, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, AllWhiteListedPlayerScrollBoxName, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ServerScrollBoxName, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, SlotButtonTemplate, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ServerInfoButtonTemplate, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, BanButtonName, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ManualBanButtonName, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, EnterPramterName, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, UnBanButtonName, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, CloseButtonName, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, DirectMessageTextFieldName, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, DirectMessageButtonName, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ErrorBlockName, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, errorBlockManualBanName, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, errorBlockManualWhiteListedName, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, errorBlockMessageOfTheDayName, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ManualBanningSteamIDTextFieldName, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, ManualWhiteListedSteamIDTextFieldName, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, OwnerPlayerController, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, CustomGameUIButtonName, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, UnknownData_Q4LB, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, MaxDirectMessageChars, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, MaxSteamIDChars, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, MaxMessageofthedayChars, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AdminMangment, UnknownData_YPEQ, 0x0804);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_AdminMangment, 0x09A0);
		}

		// Class ShooterGame.UI_AllPlayersList
		TEST_METHOD(Class__ShooterGame__UI_AllPlayersList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AllPlayersList, CloseButtonName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AllPlayersList, AllPlayersListBoxName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AllPlayersList, SlotButtonTemplate, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_AllPlayersList, UnknownData_WAEH, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_AllPlayersList, 0x05A8);
		}

		// Class ShooterGame.UI_ChangeTransponderFreqencyEntry
		TEST_METHOD(Class__ShooterGame__UI_ChangeTransponderFreqencyEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChangeTransponderFreqencyEntry, CloseButtonName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChangeTransponderFreqencyEntry, FrequencyNameTextBoxName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChangeTransponderFreqencyEntry, UnknownData_WJ1O, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ChangeTransponderFreqencyEntry, 0x0548);
		}

		// Class ShooterGame.UI_ChatBox
		TEST_METHOD(Class__ShooterGame__UI_ChatBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChatBox, ChatMessageUITemplate, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChatBox, ServerBroadCastMessageUITemplate, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChatBox, ChatBoxName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChatBox, EditTextBoxName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChatBox, SendingModelLabelName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChatBox, DisplayModeLabelName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChatBox, CanavasPanelName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChatBox, ServerSenderText, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChatBox, ChatHistoryLimit, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChatBox, UnknownData_1KAD, 0x057C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ChatBox, 0x05D0);
		}

		// Class ShooterGame.UI_ChatMessage
		TEST_METHOD(Class__ShooterGame__UI_ChatMessage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChatMessage, ChatBlockName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChatMessage, UnknownData_S52V, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ChatMessage, 0x0580);
		}

		// Class ShooterGame.UI_Cooking
		TEST_METHOD(Class__ShooterGame__UI_Cooking)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Cooking, DrinkRecipeTemplates, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Cooking, FoodRecipeTemplates, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Cooking, NoteItemTemplate, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Cooking, UnknownData_B5ED, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Cooking, PaletteColors, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Cooking, UnknownData_07VM, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Cooking, ItemIconMIC, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Cooking, UnknownData_N5LT, 0x0620);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Cooking, 0x0670);
		}

		// Class ShooterGame.UI_DepthOfFieldMenu
		TEST_METHOD(Class__ShooterGame__UI_DepthOfFieldMenu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, SaveButtonName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, ApplyButtonName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, CancelButtonName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, NearButtonName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, MediumButtonName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, FarButtonName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, ClearButtonName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, FocalDistanceSliderName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, FocalRegionSliderName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, NearTransitionRegionSliderName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, FarTransitionRegionSliderName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, ScaleSliderName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, MaxBokehSliderName, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, OcclusionSliderName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, FocalDistanceTextBoxName, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, FocalRegionTextBoxName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, NearTransitionRegionTextBoxName, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, FarTransitionRegionTextBoxName, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, ScaleTextBoxName, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, MaxBokehTextBoxName, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, OcclusionTextBoxName, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, BlurModeComboBoxName, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DepthOfFieldMenu, UnknownData_RVZK, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_DepthOfFieldMenu, 0x06B0);
		}

		// Class ShooterGame.UI_DyeItem
		TEST_METHOD(Class__ShooterGame__UI_DyeItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, DyeItemsDataListName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, BrushItemsDataListName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, CloseButtonName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, LoadPaintingsButtonName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, SavePaintingsButtonName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, ResetCameraButtonName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, ItemLabelName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, DyeLabelName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, DyeRegionButtonsNames, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, DyeButtonName, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, DyeIconImageName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, DurabilityProgressBarName, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, ItemIconImageName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, TitleLabelName, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, PreviewWidgetName, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, PaintLabelName, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, EraseAllButtonName, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, BackgroundImageName, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, PantingListUITemplate, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, SaveDialogUITemplate, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, UnknownData_RW05, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, CursorWidgetName, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DyeItem, UnknownData_VG7Q, 0x05EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_DyeItem, 0x0790);
		}

		// Class ShooterGame.UI_GenericConfirmationDialog
		TEST_METHOD(Class__ShooterGame__UI_GenericConfirmationDialog)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GenericConfirmationDialog, AcceptButtonName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GenericConfirmationDialog, CancelButtonName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GenericConfirmationDialog, TitleLabelName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GenericConfirmationDialog, MessageLabelName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GenericConfirmationDialog, UnknownData_5Y6U, 0x0538);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_GenericConfirmationDialog, 0x0570);
		}

		// Class ShooterGame.UI_Hairstyle
		TEST_METHOD(Class__ShooterGame__UI_Hairstyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hairstyle, TabBgSwitcherName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hairstyle, HeadHairEnabledEffectName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hairstyle, FacialHairEnabledEffectName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hairstyle, SwitcherTextActiveColor, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hairstyle, SwitcherTextInactiveColor, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hairstyle, HairStyleEntryTemplate, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hairstyle, UnknownData_D4BH, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hairstyle, TheHairStyleSelectedDelegate, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hairstyle, ClearHeadHairButtonClickedDelegate, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hairstyle, ClearFacialHairButtonClickedDelegate, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hairstyle, UnknownData_BZRD, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Hairstyle, 0x06A0);
		}

		// Class ShooterGame.UI_HelpPage
		TEST_METHOD(Class__ShooterGame__UI_HelpPage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HelpPage, UnknownData_WSEK, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HelpPage, 0x0608);
		}

		// Class ShooterGame.UI_HexagonConversion
		TEST_METHOD(Class__ShooterGame__UI_HexagonConversion)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, UnknownData_M97J, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, ItemIconName, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, ItemIconPanelName, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, ItemNameTextBoxName, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, CostPanelName, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, CostCountTextBoxName, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, CurrentCountTextBoxName, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, SubtotalCountTextBoxName, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, RemainingCountTextBoxName, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, AvailableItemsScrollboxName, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, ConvertButtonName, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, CloseButtonName, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, ItemQuantityTextBoxName, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, ItemDescriptionTextBoxName, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, ItemWeightValueTextBlockName, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, ItemInventoryQuantityValueTextBlockName, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, ConvertButtonItemIconName, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, QuantitySelectorTextBlockName, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, ConvertButtonSubtotalTextBlockName, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, ConvertButtonQuantityTextBlockName, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, WeightBeforePurchaseTextBlockName, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, WeightAfterPurchaseTextBlockName, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, WeightBeforePurchaseProgressBarName, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, WeightAfterPurchaseProgressBarName, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, IncreaseQuantityButtonName, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, IncreaseQuantity10ButtonName, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, MaxIncreaseQuantityButtonName, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, DecreaseQuantityButtonName, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, DecreaseQuantity10ButtonName, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, MaxDecreaseQuantityButtonName, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, SearchTextBoxName, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, AvailableItemsPerRow, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, UnknownData_FPZS, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, CurrentAvailableItems, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, UnknownData_TSP1, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, SlotButtonTemplate, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, EmptySlotButtonTemplate, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, UnavailableItemButtonStyle, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, UnknownData_8D6L, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, UnavailableConvertButtonStyle, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, UnknownData_43U4, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, NotAbleToPurchaseTextColor, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, AbleToPurchaseTextColor, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, NeutralTextColor, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, PurchaseItemReaction, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, CloseStoreReactionNoPurchase, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, CloseStoreReactionDidPurchase, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, OpenStoreReaction, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, OpenStoreReactionSale, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, OpenStoreReactionChange, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, OpenStoreReactionNewItemUnlocked, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, UnknownData_0HDG, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, DebugTestSaleReaction, 0x0D72);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, DebugTestChangeReaction, 0x0D73);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, DebugTestNewReaction, 0x0D74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, UnknownData_3B2X, 0x0D75);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, StoreOpenSound, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, StoreCloseSound, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, RequiredQuantity, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, UnknownData_IY12, 0x0D8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, CurrentTradableItemOption, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, WeightTextColor, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, OverencumberedTextColor, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, ItemRow, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, ItemColumn, 0x0DEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HexagonConversion, UnknownData_T9JM, 0x0DF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HexagonConversion, 0x0DF8);
		}

		// Class ShooterGame.UI_HostSession
		TEST_METHOD(Class__ShooterGame__UI_HostSession)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, MapDescriptionsArray, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, ProceduralButtonName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, DeleteProceduralArkButtonName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, HostButtonName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, HostDedicatedButtonName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, HostListenButtonName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, UpdateModsButtonName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, ProgressTextName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, CancelButtonName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, MyScrollBoxName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, SessionsPanelName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, ClearLocalDataButtonName, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, ConnectingPanelName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, PasswordAcceptButtonName, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, PasswordCancelButtonName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, PasswordTextFieldName, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, PasswordAdminTextFieldName, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, SessionNameTextFieldName, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, PasswordPanelName, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, ErrorBlockName, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, SlotButtonTemplate, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, ProceduralSettingsTemplate, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, UnknownData_5HRI, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, MaxPasswordChars, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, MaxSessionNameChars, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, SwitcherTextActiveColor, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, SwitcherTextInactiveColor, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HostSession, UnknownData_QU53, 0x05FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HostSession, 0x1228);
		}

		// Class ShooterGame.UI_Hub
		TEST_METHOD(Class__ShooterGame__UI_Hub)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, TopRecenteringSpacerName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, InventoryMenuButtonName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, EngramsMenuButtonName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, TribeManagerMenuButtonName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, TameGroupsMenuButtonName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, SurvivorProfileMenuButtonName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, MissionListMenuButtonName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, OptionsMenuButtonName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, SubMenuWidgetSwitcherName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, CloseHubButtonName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, HexagonCurrencyValuePanelName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, HexagonCurrencyValueTextBlockName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, InventoryUITemplate, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, TribeManagerUITemplate, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, EngramsMenuUITemplate, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, TameGroupsUITemplate, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, SurvivorProfileUITemplate, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, MissionListUITemplate, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, OptionsMenuUITemplate, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, TamingListUITemplate, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, TabSwitchSound, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, UnknownData_UVG7, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, SelectedMissionEntryIndex, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, SelectedBiomeFilterMask, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hub, UnknownData_W81X, 0x0630);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Hub, 0x0730);
		}

		// Class ShooterGame.UI_HudOverlay
		TEST_METHOD(Class__ShooterGame__UI_HudOverlay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HudOverlay, HudOverlayWidgetName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HudOverlay, UnknownData_2Q91, 0x0520);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HudOverlay, 0x0538);
		}

		// Class ShooterGame.UI_LeaderboardWidget
		TEST_METHOD(Class__ShooterGame__UI_LeaderboardWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LeaderboardWidget, LeaderboardHeaderContainerName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LeaderboardWidget, LeaderboardRowContainerName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LeaderboardWidget, CloseButtonName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LeaderboardWidget, TableWidth, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LeaderboardWidget, UnknownData_UICU, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LeaderboardWidget, HeaderContainer, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LeaderboardWidget, HeaderRowWidget, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LeaderboardWidget, CloseButton, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LeaderboardWidget, RowContainer, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LeaderboardWidget, RowWidgets, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_LeaderboardWidget, 0x0568);
		}

		// Class ShooterGame.UI_ListCharacterData
		TEST_METHOD(Class__ShooterGame__UI_ListCharacterData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListCharacterData, DownloadButtonName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListCharacterData, CancelButtonName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListCharacterData, MyScrollBoxName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListCharacterData, CharacterStatsPanelName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListCharacterData, CharacterSlotButtonTemplate, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListCharacterData, CharacterLabelName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListCharacterData, ExperienceLabelName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListCharacterData, ExperienceBarName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListCharacterData, CharacterHypoThermalInsulationLabelName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListCharacterData, CharacterHyperThermalInsulationLabelName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListCharacterData, StatsLabelNames, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListCharacterData, SteamInventoryStatusUITemplate, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListCharacterData, UnknownData_J1J1, 0x05D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ListCharacterData, 0x0800);
		}

		// Class ShooterGame.UI_ListSessions
		TEST_METHOD(Class__ShooterGame__UI_ListSessions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, SearchingColor, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, SearchingCompleteColor, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, JoinButtonName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, RefreshButtonName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, FavoritesButtonName, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, FavoritesButtonLabelName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, CancelButtonName, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, RentYourOwnServerButtonName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, MyScrollBoxName, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, SearchingTextBlockName, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, SessionsPanelName, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, FindSessionTextFieldName, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, PasswordAcceptButtonName, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, DarkBGName, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, PasswordCancelButtonName, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, PasswordTextFieldName, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, PasswordPanelName, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, ErrorBlockName, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, ServersCountBlockName, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, ShowProtectedSessionsCheckBoxName, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, ShowAvailableServersCheckBoxName, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, ShowServersTypeComboBoxName, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, OfficialStatusLabelName, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, SlotButtonTemplate, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, MaxPasswordChars, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, UnknownData_9NYU, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, AscendingIcon, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, DescendingIcon, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, UnknownData_ZGAS, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListSessions, ChineseLaunchURL, 0x0B48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ListSessions, 0x0B58);
		}

		// Class ShooterGame.UI_ClusterServersListSessions
		TEST_METHOD(Class__ShooterGame__UI_ClusterServersListSessions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ClusterServersListSessions, UnknownData_JBZ8, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ClusterServersListSessions, ClustersServersListGameSession, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ClusterServersListSessions, UnknownData_PLXH, 0x0B68);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ClusterServersListSessions, 0x0B70);
		}

		// Class ShooterGame.UI_ListTamedDinos
		TEST_METHOD(Class__ShooterGame__UI_ListTamedDinos)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListTamedDinos, DownloadButtonName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListTamedDinos, UploadButtonName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListTamedDinos, CancelButtonName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListTamedDinos, MyScrollBoxName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListTamedDinos, DinoSlotButtonTemplate, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListTamedDinos, CharacterStatsPanelName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListTamedDinos, CharacterLabelName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListTamedDinos, ExperienceLabelName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListTamedDinos, ExperienceBarName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListTamedDinos, CharacterHypoThermalInsulationLabelName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListTamedDinos, CharacterHyperThermalInsulationLabelName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListTamedDinos, StatsLabelNames, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ListTamedDinos, UnknownData_OFJR, 0x05D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ListTamedDinos, 0x06D8);
		}

		// Class ShooterGame.UI_MainMenu
		TEST_METHOD(Class__ShooterGame__UI_MainMenu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, OptionsButtonName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, HostButtonName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, JoinButtonName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, ExitButtonName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, ListSessionsName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, NewsLabelName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, EditableTextJoinName, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, EditableTextJoinPanelName, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, ConnectingDialogPanelName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, ListSessionsUITemplate, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, OptionsMenuUITemplate, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, HostSessoinUITemplate, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, HelpPageUITemplate, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, SlotButtonTemplate, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, NotifClass, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, WelcomeClass, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, UnknownData_LKVJ, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, TotalConversionsScrollBox, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, TotalConversionsEntryWidgets, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MainMenu, UnknownData_O7E1, 0x0600);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_MainMenu, 0x06B0);
		}

		// Class ShooterGame.UI_MapMarkersEntry
		TEST_METHOD(Class__ShooterGame__UI_MapMarkersEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, SlotButtonTemplate, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, TabBgSwitcherName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, AddEnabledEffectName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, RemoveEnabledEffectName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, CloseButtonName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, AcceptButtonName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, TitleLabelName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, CoordOneLabelName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, CoordTwoLabelName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, MarkerNameLabelName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, MarkerNameTextBoxName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, CoordOneTextBoxName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, CoordTwoTextBoxName, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, ErrorBlockName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, RemoveCloseButtonName, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, RemoveAcceptButtonName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, RemoveMarkersListName, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, RemoveMarkersPanelName, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, AddMarkersPanelName, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, GoToAddButtonName, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, GoToRemoveButtonName, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, MaxOpenTime, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, SwitcherTextActiveColor, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, SwitcherTextInactiveColor, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, UnknownData_PKB1, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, ColorSetMarkers, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MapMarkersEntry, UnknownData_INGM, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_MapMarkersEntry, 0x06C0);
		}

		// Class ShooterGame.UI_MultiUse
		TEST_METHOD(Class__ShooterGame__UI_MultiUse)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MultiUse, MyScrollBoxName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MultiUse, ActorDescriptionLabelName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MultiUse, ButtonEntryWidgetTemplate, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MultiUse, UnknownData_UCFY, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_MultiUse, 0x0560);
		}

		// Class ShooterGame.UI_Notification
		TEST_METHOD(Class__ShooterGame__UI_Notification)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Notification, TitleLabelName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Notification, MessageLabelName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Notification, OkButtonName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Notification, BoxCanvasPanelName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Notification, bReturnToMainMenuOnClose, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Notification, UnknownData_IPA2, 0x0539);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Notification, 0x0570);
		}

		// Class ShooterGame.UI_PaintingsList
		TEST_METHOD(Class__ShooterGame__UI_PaintingsList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PaintingsList, PaintingListName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PaintingsList, SelectButtonName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PaintingsList, CloseButtonName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PaintingsList, FailCloseButtonName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PaintingsList, LoadingLabelName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PaintingsList, LoadingCanvasName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PaintingsList, MissingTextName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PaintingsList, NeededTextName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PaintingsList, RenamePaintingName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PaintingsList, SlotButtonTemplate, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PaintingsList, ResourceEntryTemplate, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PaintingsList, UnknownData_DIOM, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PaintingsList, Preview, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PaintingsList, UnknownData_1ITJ, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_PaintingsList, 0x0698);
		}

		// Class ShooterGame.UI_PauseMenu
		TEST_METHOD(Class__ShooterGame__UI_PauseMenu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu, CloseButtonName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu, QuitButtonName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu, QuitButtonTextBlockName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu, TestWidgetName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu, InventoryButtonName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu, TribeManagerButtonName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu, OptionsButtonName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu, InviteFriendsButtonName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu, ServerPingTextBlockName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu, HelpButtonName, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu, OptionsMenuUITemplate, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PauseMenu, UnknownData_8UNT, 0x05A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_PauseMenu, 0x0678);
		}

		// Class ShooterGame.UI_PinEntry
		TEST_METHOD(Class__ShooterGame__UI_PinEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PinEntry, CloseButtonName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PinEntry, UseLastPinButtonName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PinEntry, UseLastPinButtonLabelName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PinEntry, ToggleShowLastPinButtonName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PinEntry, ToggleShowLastPinButtonLabelName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PinEntry, PinLabelName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PinEntry, TitleLabelName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PinEntry, PinButtonsNames, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PinEntry, UnknownData_X8IT, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_PinEntry, 0x05D8);
		}

		// Class ShooterGame.UI_PrimalTest
		TEST_METHOD(Class__ShooterGame__UI_PrimalTest)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PrimalTest, VerticalBoxName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PrimalTest, ChildWidgetTemplate, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PrimalTest, UnknownData_2RZ4, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_PrimalTest, 0x0538);
		}

		// Class ShooterGame.UI_ProceduralSettings
		TEST_METHOD(Class__ShooterGame__UI_ProceduralSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, CancelButtonName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, HostButtonName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, ResetButtonName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, RandomizeButtonName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, LoadFavoriteButtonName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, SaveFavoriteButtonName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, PresetsComboBoxName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, FavoriteComboBoxName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, ArkNameTextBoxName, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, MapSeedTextBoxName, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, LandscapeRadiusTextBoxName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, WaterFrequencyTextBoxName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, MountainFrequencyTextBoxName, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, MountainSlopeTextBoxName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, MountainHeightTextBoxName, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, TurbulencePowerTextBoxName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, ShoreSlopeTextBoxName, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, WaterLevelTextBoxName, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, GrassDensityTextBoxName, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, JungleGrassDensityTextBoxName, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, OceanFloorLevelTextBoxName, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, SnowBiomeSizeTextBoxName, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, RedwoodBiomeSizeTextBoxName, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, MountainBiomeStartTextBoxName, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, MountainTreeDensityTextBoxName, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, JungleBiomeStartTextBoxName, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, IslandBorderCurveTextBoxName, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, MaxSawnHeightTextBoxName, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, MountainGrassDensityTextBoxName, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, SnowGrassDensityTextBoxName, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, SnowMountainGrassDensityTextBoxName, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, SnowBiomeLocationXTextBoxName, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, SnowBiomeLocationYTextBoxName, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, RedwoodBiomeLocationXTextBoxName, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, RedwoodBiomeLocationYTextBoxName, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, TerrainScaleXTextBoxName, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, TerrainScaleYTextBoxName, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, TerrainScaleZTextBoxName, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, North1StartXTextBoxName, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, North1StartYTextBoxName, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, North1EndXTextBoxName, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, North1EndYTextBoxName, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, North2StartXTextBoxName, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, North2StartYTextBoxName, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, North2EndXTextBoxName, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, North2EndYTextBoxName, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, North3StartXTextBoxName, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, North3StartYTextBoxName, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, North3EndXTextBoxName, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, North3EndYTextBoxName, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, South1StartXTextBoxName, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, South1StartYTextBoxName, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, South1EndXTextBoxName, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, South1EndYTextBoxName, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, South2StartXTextBoxName, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, South2StartYTextBoxName, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, South2EndXTextBoxName, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, South2EndYTextBoxName, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, South3StartXTextBoxName, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, South3StartYTextBoxName, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, South3EndXTextBoxName, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, South3EndYTextBoxName, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, East1StartXTextBoxName, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, East1StartYTextBoxName, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, East1EndXTextBoxName, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, East1EndYTextBoxName, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, East2StartXTextBoxName, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, East2StartYTextBoxName, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, East2EndXTextBoxName, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, East2EndYTextBoxName, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, East3StartXTextBoxName, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, East3StartYTextBoxName, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, East3EndXTextBoxName, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, East3EndYTextBoxName, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, West1StartXTextBoxName, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, West1StartYTextBoxName, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, West1EndXTextBoxName, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, West1EndYTextBoxName, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, West2StartXTextBoxName, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, West2StartYTextBoxName, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, West2EndXTextBoxName, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, West2EndYTextBoxName, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, West3StartXTextBoxName, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, West3StartYTextBoxName, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, West3EndXTextBoxName, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, West3EndYTextBoxName, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ProceduralSettings, UnknownData_9SV5, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ProceduralSettings, 0x1018);
		}

		// Class ShooterGame.UI_SavePainting
		TEST_METHOD(Class__ShooterGame__UI_SavePainting)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SavePainting, CloseButtonName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SavePainting, SaveButtonName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SavePainting, FileNameTextBoxName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SavePainting, ErrorTextBoxName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SavePainting, UnknownData_BDSX, 0x0538);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SavePainting, 0x0570);
		}

		// Class ShooterGame.UI_SavingOverlay
		TEST_METHOD(Class__ShooterGame__UI_SavingOverlay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SavingOverlay, UnknownData_P9T1, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SavingOverlay, 0x0520);
		}

		// Class ShooterGame.UI_ServerBroadcastMessage
		TEST_METHOD(Class__ShooterGame__UI_ServerBroadcastMessage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerBroadcastMessage, MessageTextBlockName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerBroadcastMessage, BoldFont, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerBroadcastMessage, RegularFont, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerBroadcastMessage, UnknownData_1H5G, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ServerBroadcastMessage, 0x0570);
		}

		// Class ShooterGame.UI_SessionSortArrow
		TEST_METHOD(Class__ShooterGame__UI_SessionSortArrow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SessionSortArrow, UnknownData_AO4K, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SessionSortArrow, ImageName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SessionSortArrow, UpImage, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SessionSortArrow, DownImage, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SessionSortArrow, EmptyImage, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SessionSortArrow, UnknownData_20A7, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SessionSortArrow, 0x0550);
		}

		// Class ShooterGame.UI_SpawnPoint
		TEST_METHOD(Class__ShooterGame__UI_SpawnPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SpawnPoint, UnknownData_9STM, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SpawnPoint, SpawnPointImageName, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SpawnPoint, UnknownData_QEQS, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SpawnPoint, SpawnPointImageNormal, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SpawnPoint, SpawnPointImageDisabled, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SpawnPoint, SpawnPointImageSelected, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SpawnPoint, CurrentLocation, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SpawnPoint, MarkerTexture, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SpawnPoint, UnknownData_C1YY, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SpawnPoint, 0x0570);
		}

		// Class ShooterGame.UI_SteamInventoryStatusPopup
		TEST_METHOD(Class__ShooterGame__UI_SteamInventoryStatusPopup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SteamInventoryStatusPopup, CloseButtonName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SteamInventoryStatusPopup, TitleLabelName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SteamInventoryStatusPopup, DownloadMessageLabelName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SteamInventoryStatusPopup, UploadMessageLabelName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SteamInventoryStatusPopup, TitleText, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SteamInventoryStatusPopup, MessageText, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SteamInventoryStatusPopup, NumberOfDots, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SteamInventoryStatusPopup, TimeoutInterval, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SteamInventoryStatusPopup, DotsUpdateInterval, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_SteamInventoryStatusPopup, UnknownData_BIEL, 0x0564);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SteamInventoryStatusPopup, 0x05A8);
		}

		// Class ShooterGame.UI_Subtitles
		TEST_METHOD(Class__ShooterGame__UI_Subtitles)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Subtitles, SubtitlesTextBoxName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Subtitles, DialogueTextBoxName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Subtitles, DialogueIconImageName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Subtitles, OnProcessDynamicMaterialForDialogueIcon, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Subtitles, SoundWaveSubtitles, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Subtitles, UnknownData_PMXH, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Subtitles, CurrentlyPlayingSound, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Subtitles, CurrentlyPlayingSoundWave, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Subtitles, UnknownData_0MCL, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Subtitles, 0x05B8);
		}

		// Class ShooterGame.UI_TextEntry
		TEST_METHOD(Class__ShooterGame__UI_TextEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextEntry, CloseButtonName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextEntry, AcceptButtonName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextEntry, TitleLabelName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextEntry, EditTextBoxName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextEntry, CheckBoxName, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextEntry, CheckBoxLabelName, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextEntry, MaxOpenTime, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextEntry, UnknownData_AO4H, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextEntry, bNumericValue, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextEntry, bLimitInput, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextEntry, UnknownData_MRYN, 0x05A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextEntry, LimitCount, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextEntry, bCanCommitEmptyString, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextEntry, bNumericAndChar, 0x05A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TextEntry, UnknownData_5P1J, 0x05AA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_TextEntry, 0x05B0);
		}

		// Class ShooterGame.UI_TribeWarEntry
		TEST_METHOD(Class__ShooterGame__UI_TribeWarEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TribeWarEntry, UnknownData_SKS6, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_TribeWarEntry, 0x0568);
		}

		// Class ShooterGame.UI_Tutorial
		TEST_METHOD(Class__ShooterGame__UI_Tutorial)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Tutorial, TutorialTitleLabelName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Tutorial, TutorialTextLabelName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Tutorial, TutorialImageName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Tutorial, UnknownData_QUWW, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Tutorial, 0x0548);
		}

		// Class ShooterGame.UI_XBoxFooter
		TEST_METHOD(Class__ShooterGame__UI_XBoxFooter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_XBoxFooter, UnknownData_LYCL, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_XBoxFooter, 0x0560);
		}

		// Class ShooterGame.PrimalWheeledVehicleDustType
		TEST_METHOD(Class__ShooterGame__PrimalWheeledVehicleDustType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, DefaultFX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, ConcreteFX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, DirtFX, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, WaterFX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, MetalFX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, WoodFX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, GrassFX, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, FleshFX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, LeavesFX, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, RockFX, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, SandFX, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, SnowFX, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, DefaultMinSpeed, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, ConcreteMinSpeed, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, DirtMinSpeed, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, WaterMinSpeed, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, MetalMinSpeed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, WoodMinSpeed, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, GrassMinSpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, FleshMinSpeed, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, LeavesMinSpeed, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, RockMinSpeed, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, SandMinSpeed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWheeledVehicleDustType, SnowMinSpeed, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalWheeledVehicleDustType, 0x00B8);
		}

		// Class ShooterGame.PrimalWorldBuffCustomImplement
		TEST_METHOD(Class__ShooterGame__PrimalWorldBuffCustomImplement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWorldBuffCustomImplement, WorldBuffID, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalWorldBuffCustomImplement, 0x0030);
		}

		// Class ShooterGame.PrimalWorldBuffData
		TEST_METHOD(Class__ShooterGame__PrimalWorldBuffData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWorldBuffData, WorldBuffDefinitions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWorldBuffData, ConstructedWorldBuffImplements, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWorldBuffData, UnknownData_PGPP, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalWorldBuffData, 0x0050);
		}

		// Class ShooterGame.PrimalWorldModifier
		TEST_METHOD(Class__ShooterGame__PrimalWorldModifier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldModifier, bUseMapExclusionListAsExclusiveList, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldModifier, UnknownData_YW3F, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldModifier, MapExclusionList, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldModifier, PriorityTags, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldModifier, ReskinnedFoliageTrackingList, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldModifier, FoliageReskinList, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldModifier, ReskinnedLevelStaticMeshTrackingList, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldModifier, SublevelOverrideGroups, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldModifier, OnFoliageSkinned, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalWorldModifier, 0x04E0);
		}

		// Class ShooterGame.PrimalWorldSettings
		TEST_METHOD(Class__ShooterGame__PrimalWorldSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bMapSupportsMissions, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, UnknownData_15KF, 0x0CC9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, DefaultCameraPositionActor, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, DynamicResourceRefs, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bEditorEnableNPCSpawners, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bEditorForceDisableNPCSpawners, 0x0CE9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bPreventGlobalNonEventSpawnOverrides, 0x0CEA);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, UnknownData_HG4S, 0x0CEB);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, PlacingStructureToggleMeshTagVisibility, 0x0CEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bGenerateTerrain, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bForceSpawnAnimationTest, 0x0CF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bOverrideLongitudeAndLatitude, 0x0CF6);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, UnknownData_ZKLS, 0x0CF7);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, LongitudeScale, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, RegularWildDinoResistanceVersusTamesMultiplier, 0x0CFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, RegularWildDinoDamageVersusTamesMultiplier, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, RegularWildDinoXPMultiplier, 0x0D04);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, LatitudeScale, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, LongitudeOrigin, 0x0D0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, LatitudeOrigin, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, MinKillX, 0x0D14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, MaxKillX, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, MinKillY, 0x0D1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, MaxKillY, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, MaxKillZ, 0x0D24);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, MaxUnderWorldTraceRangeZ, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, UnknownData_HL8U, 0x0D2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, OverrideWeaponMapTextureEmpty, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, OverrideWeaponMapTextureFilled, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, OverrideUIMapTextureEmpty, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, OverrideUIMapTextureFilled, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, OverrideUIMapTextureSmall, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, LevelBlueprintContainerActor, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, PrimalGameDataOverride, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, ForceLoadMapName, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, OverridePlayerSpawnRegions, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, OverridePlayerSpawnRegionDifficulties, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, OverridePlayerSpawnRegionsHideInSpawnUI, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, LevelUseNPCClasses, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, NPCRandomSpawnClassWeights, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, SinglePlayerNPCRandomSpawnClassWeights, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, SpawnLevelBoundsMax, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, SpawnLevelBoundsMin, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, AutoSpectatorNamesMinZ, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bUseSpawnLevelBounds, 0x0DEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, UnknownData_2XTY, 0x0DED);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, CachedPersistentObjectClasses, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, DinosLerpToMaxRandomBaseLevel, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, UnknownData_CHH8, 0x0E04);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, DefaultSpawnPointRandomIndices, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, OverrideFirstSpawnAnim, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, OverrideSpawnAnim, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, GammaOffset, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bWaterDinosUseFlightBlocking, 0x0E2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, UnknownData_HB05, 0x0E2D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, GlobalHarvestHealthMultiplier, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, GlobalHarvestAmountMultiplier, 0x0E34);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bFlyersStructurePreventionDismountingAnywhere, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bFlyersStructurePreventionDismountingUnderTerrainOnly, 0x0E39);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, UnknownData_B0N1, 0x0E3A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, OverrideDifficultyMax, 0x0E3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, GlobalSpoilingTimeMultipliers, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, GlobalStatusAdjustmentRateMultipliersPositive, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, GlobalStatusAdjustmentRateMultipliersNegative, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, ValidEngramGroupsBitMask, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, UnknownData_YS4D, 0x0EB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, InventoryComponentAppends, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, InventoryComponentAppendsNonDedicated, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, DayCycleSpeedScale, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, DayTimeSpeedScale, 0x0EDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, NightTimeSpeedScale, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, NegativeHyperthermalInsulationMultiplier, 0x0EE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, PositiveHyperthermalInsulationMultiplier, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, NegativeHypothermalInsulationMultiplier, 0x0EEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, PositiveHypothermalInsulationMultiplier, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, UnknownData_FO8E, 0x0EF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, GlobalCuddleFoodList, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, CarnivoreNaturalTargetingRangeMultiplier, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, HerbivoreNaturalTargetingRangeMultiplier, 0x0F0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, OverrideCombatMusicDay, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, OverrideCombatMusicNight, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, OverrideCombatMusicDay_Heavy, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, OverrideCombatMusicNight_Heavy, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, SplitscreenUnderwaterSound, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, HarvestComponentHealthScaleParents, 0x0F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, HarvestComponentHealthScaleParentsValue, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, HarvestComponentHealthScaleExactMatch, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, HarvestComponentHealthScaleExactMatchValue, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, Override_Sound_ReconnectToCharacter, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, RequiresID, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bIgnoreBiomeWind, 0x0F84);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, UnknownData_HR5K, 0x0F85);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, Override_PostProcess_ColorLUT, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, AutoGenerateTerrainActorTemplate, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, DefaultWaterLineStartZ, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, DefaultDeepWaterStartZ, 0x0F9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, MaximumPlayerFlyZ, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, UnknownData_OWBJ, 0x0FA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, ExtraReferences, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, AllowDownloadDinoClasses, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, DefaultBiomeName, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, PreventStructureClasses, 0x0FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, MaxFallSpeedMultiplier, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bDisableStructureObstructedByWorldGeometryCheck, 0x0FEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bForceEnableTurretLimit, 0x0FED);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bUseMissions, 0x0FEE);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bUseMissionsMetaData, 0x0FEF);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, LoadForceRespawnDinosVersion, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, FirstSpawnNotTargetableForTime, 0x0FF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bIgnoreInMeshCheckingUnderwater, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bAllowRidingFliers, 0x0FF9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bForceDinoDrawHUD, 0x0FFA);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bDisableFirstPersonRiding, 0x0FFB);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bForceDinoHighQualityAttacks, 0x0FFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bScaleDinoFloatingHUDByMeshSize, 0x0FFD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, UnknownData_7MVA, 0x0FFE);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, ForceCameraTransitionTimeUponPossession, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, AdditionalDinoHealthBarOffsetY, 0x1004);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, AIOverrideNotifyNeighborsRange, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, SpawnAnimationLocationOffset, 0x100C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, MissionMultiUseEntryToolTipWidget, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, MissionDataBuff, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, ActiveEventSpawnActor, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, AvailableMissions, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, AvailableMissionsMetaData, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, NonPlayerFacingMissionsMetaData, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, UnknownData_F807, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, GlobalDinoCountValue, 0x11A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, UnknownData_C4N2, 0x11AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, ActiveEventOverrideObjectBlueprint, 0x11C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, UnknownData_TLHT, 0x11AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, ActiveEventOverrides, 0x11E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, MetaTagInfoClass, 0x11F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bEnforceSingleBiomeBuff, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, bHideMissionSortByDistance, 0x11F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWorldSettings, UnknownData_ED7L, 0x11FA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalWorldSettings, 0x1200);
		}

		// Class ShooterGame.PrimalWorldSettingsEventOverrides
		TEST_METHOD(Class__ShooterGame__PrimalWorldSettingsEventOverrides)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWorldSettingsEventOverrides, NPCRandomSpawnClassWeights, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWorldSettingsEventOverrides, SinglePlayerNPCRandomSpawnClassWeights, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWorldSettingsEventOverrides, UndeprecatedStructuresDuringEvent, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWorldSettingsEventOverrides, UndeprecatedItemsDuringEvent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWorldSettingsEventOverrides, UndeprecatedDinosDuringEvent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalWorldSettingsEventOverrides, AdditionalGlobalStatusAdjustmentsDuringEvent, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalWorldSettingsEventOverrides, 0x0088);
		}

		// Class ShooterGame.RadialSelectorHUD_Inventory
		TEST_METHOD(Class__ShooterGame__RadialSelectorHUD_Inventory)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD_Inventory, PlayerInventory, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialSelectorHUD_Inventory, 0x00E0);
		}

		// Class ShooterGame.RadialSelectorHUD_MultiUse
		TEST_METHOD(Class__ShooterGame__RadialSelectorHUD_MultiUse)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD_MultiUse, UnknownData_NPD8, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD_MultiUse, TextScaleCountOffset, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialSelectorHUD_MultiUse, 0x00F8);
		}

		// Class ShooterGame.RadialSelectorHUD_PlayerAction
		TEST_METHOD(Class__ShooterGame__RadialSelectorHUD_PlayerAction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD_PlayerAction, UnknownData_OKVJ, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD_PlayerAction, ActionBindings, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD_PlayerAction, UnknownData_RMPL, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD_PlayerAction, bAddUnlockableEmotes, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD_PlayerAction, UnknownData_NUJC, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD_PlayerAction, TextScaleCountOffset, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialSelectorHUD_PlayerAction, UnknownData_1UC6, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialSelectorHUD_PlayerAction, 0x0140);
		}

		// Class ShooterGame.RCONServer
		TEST_METHOD(Class__ShooterGame__RCONServer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::URCONServer, UnknownData_F3XV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URCONServer, CheatManager, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URCONServer, UnknownData_XI2H, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URCONServer, 0x0068);
		}

		// Class ShooterGame.SaveGameActor
		TEST_METHOD(Class__ShooterGame__SaveGameActor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASaveGameActor, 0x0468);
		}

		// Class ShooterGame.SaveGameActorTickable
		TEST_METHOD(Class__ShooterGame__SaveGameActorTickable)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASaveGameActorTickable, 0x0468);
		}

		// Class ShooterGame.ShooterCharacterMovement
		TEST_METHOD(Class__ShooterGame__ShooterCharacterMovement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterCharacterMovement, UnknownData_0XKB, 0x0541);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShooterCharacterMovement, 0x0570);
		}

		// Class ShooterGame.ShooterCheatManager
		TEST_METHOD(Class__ShooterGame__ShooterCheatManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterCheatManager, bIsRCONCheatManager, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterCheatManager, UnknownData_U6PI, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShooterCheatManager, 0x0098);
		}

		// Class ShooterGame.ShooterDamageType
		TEST_METHOD(Class__ShooterGame__ShooterDamageType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, HitTargetableActorImpactEffects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, DamageTorpidityIncreaseMultiplier, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, UnknownData_416S, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, KillIcon, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, HitForceFeedback, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, KilledForceFeedback, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, DamageCharacterStatusValueModifiers, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, DamageInstigatorPercentage, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, UnknownData_P1BL, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, UseSpecialDamageInterval, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, WildDinoForcedAggroDuration, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, UnknownData_23XZ, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, BuffToGiveVictimCharacter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, MassScaleDamageImpulseExponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, UnknownData_SP6R, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, DamageIgnoreActorClasses, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, DamageOnlyActorClasses, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, OverrideDamageHarvestEntries, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, InvalidHarvestOverrideDamageType, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, TargetClassDamageScalers, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, OverrideDamageForResourceHarvestingItems, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterDamageType, OverrideDamageForResourceHarvestingDamageTypes, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShooterDamageType, 0x0128);
		}

		// Class ShooterGame.ShooterEngine
		TEST_METHOD(Class__ShooterGame__ShooterEngine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterEngine, UnknownData_6ZES, 0x0990);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShooterEngine, 0x09B0);
		}

		// Class ShooterGame.ShooterGame_Menu
		TEST_METHOD(Class__ShooterGame__ShooterGame_Menu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGame_Menu, MenuMusic, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGame_Menu, SponsoredModsMenu, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGame_Menu, ActiveEvent, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGame_Menu, ActiveEventMainMenuOverrides, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGame_Menu, BackgroundTextureOverrides, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGame_Menu, UnknownData_TL6X, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterGame_Menu, 0x05A8);
		}

		// Class ShooterGame.ShooterGameInstance
		TEST_METHOD(Class__ShooterGame__ShooterGameInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameInstance, UnknownData_NMZN, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameInstance, OnAsyncAssetLoaded, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameInstance, AsyncLoadededAssetReferences, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameInstance, WorldModifiersContainer, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameInstance, WelcomeScreenMap, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameInstance, MainMenuMap, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameInstance, AutoPgoSweepInterval, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameInstance, UnknownData_7M0U, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameInstance, ActiveEvent, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameInstance, WorldModifierConfigOverride, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameInstance, UnknownData_UJ1L, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShooterGameInstance, 0x0370);
		}

		// Class ShooterGame.TerrainActor
		TEST_METHOD(Class__ShooterGame__TerrainActor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATerrainActor, TerrainComponent, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATerrainActor, FoliageActor, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATerrainActor, HierarchicalInstancedStaticMeshComponents, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATerrainActor, 0x0488);
		}

		// Class ShooterGame.TerrainComponent
		TEST_METHOD(Class__ShooterGame__TerrainComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, TerrainGeneratorTemplete, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, BlockingVolumeActorTemplate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, BlockingVolumeAreaRatioOfTerrain, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, UnknownData_NV0S, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, PreviewSize, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, UnknownData_0AY0, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, GeneratedTextures, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, TerrainGenerator, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, UnknownData_QCJ5, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, SectionsPerComponent, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, QuadsPerSection, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, UnknownData_59G5, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, ReplicatedTerrainInfo, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, TerrainMapSizeX, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, TerrainMapSizeY, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, MapSeed, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, NumberOfThreads, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, LandscapeScale, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, LandscapeRadius, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, BiomeGridSize, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, NPCGridSize, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, BiomeHeight, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, NPCZoneHeight, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, SupplyDropsGridSize, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, UnknownData_X4E8, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, Landscape, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, SpawnedActors, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, UnknownData_3VEH, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, FoliageActor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrainComponent, UnknownData_OJ4S, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTerrainComponent, 0x02F8);
		}

		// Class ShooterGame.ShooterGameMode
		TEST_METHOD(Class__ShooterGame__ShooterGameMode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_E7H9, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, BanFileName, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_S2MR, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, RCONSocket, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PlayersJoinNoCheckFilename, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PlayersExclusiveCheckFilename, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, GlobalCommandsCheatManager, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_7ZW8, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, CheckGlobalEnablesURL, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, Database_LoginDataRef, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PubSub_GeneralNotificationsRef, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TerrainActor, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_D5XN, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bGlobalDisableLoginLockCheck, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bTempDisableLoginLockCheck, 0x0931);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_39O8, 0x0932);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MyServerId, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_TTPT, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TribesData, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ActivelyTamingDinos, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TerrainActorTemplate, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TerrainActorClassName, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PGMapName, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PGTerrainPropertiesString, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_CFCE, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAutoCreateNewPlayerData, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_D09D, 0x0A61);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, DifficultyValue, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, DifficultyValueMin, 0x0A6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, DifficultyValueMax, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ProximityRadius, 0x0A74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ProximityRadiusUnconsiousScale, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, YellingRadius, 0x0A7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, WhisperRadius, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, VivoxAttenuationModel, 0x0A84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, VivoxMinDistance, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, VivoxRolloff, 0x0A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, CheatClass, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bIsOfficialServer, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bIsConsoleUnOfficialPCServer, 0x0A99);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bServerAllowArkDownload, 0x0A9A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_9KB5, 0x0A9B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAlwaysNotifyPlayerLeft, 0x0A9D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAlwaysNotifyPlayerJoined, 0x0A9E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bServerHardcore, 0x0A9F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_247U, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bEnableCryoSicknessPVE, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_CIAX, 0x0AD5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, CryopodNerfDamageMult, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, CryopodNerfDuration, 0x0ADC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bEnableMeshBitingProtection, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_4H14, 0x0AE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, CryopodNerfIncomingDamageMultPercent, 0x0AE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_CPUO, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ResourcesRespawnPeriodMultiplier, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, KickIdlePlayersPeriod, 0x0B2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MateBoostEffectMultiplier, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_RFOT, 0x0B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, XPMultiplier, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ActiveEvent, 0x0B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TribeNameChangeCooldown, 0x0B44);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PlatformSaddleBuildAreaBoundsMultiplier, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAlwaysAllowStructurePickup, 0x0B4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_HVB8, 0x0B4D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, StructurePickupTimeAfterPlacement, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, StructurePickupHoldDuration, 0x0B54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAllowIntegratedSPlusStructures, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAllowHideDamageSourceFromLogs, 0x0B59);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_HR7V, 0x0B5A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, KillXPMultiplier, 0x0B5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, HarvestXPMultiplier, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, CraftXPMultiplier, 0x0B64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, GenericXPMultiplier, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, SpecialXPMultiplier, 0x0B6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_7GYF, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PlayerDatas, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_7LR3, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OnCharacterPossessedByPlayer, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OnCharacterUnpossessedByPlayer, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OnShooterCharacterSpawned, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OnShooterCharacterDied, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OnMissionTriggerBeginOverlap, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OnMissionTriggerEndOverlap, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TamedDinoDamageMultiplier, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, DinoDamageMultiplier, 0x0C84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PlayerDamageMultiplier, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, StructureDamageMultiplier, 0x0C8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PlayerResistanceMultiplier, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, DinoResistanceMultiplier, 0x0C94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TamedDinoResistanceMultiplier, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, StructureResistanceMultiplier, 0x0C9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bJoinInProgressGamesAsSpectator, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_2C8S, 0x0CA1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TamingSpeedMultiplier, 0x0CA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, HarvestAmountMultiplier, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, HarvestHealthMultiplier, 0x0CAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PlayerCharacterWaterDrainMultiplier, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PlayerCharacterFoodDrainMultiplier, 0x0CB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, DinoCharacterFoodDrainMultiplier, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, RaidDinoCharacterFoodDrainMultiplier, 0x0CBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PlayerCharacterStaminaDrainMultiplier, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, DinoCharacterStaminaDrainMultiplier, 0x0CC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PlayerCharacterHealthRecoveryMultiplier, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, DinoCharacterHealthRecoveryMultiplier, 0x0CCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, CarnivoreNaturalTargetingRangeMultiplier, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, CarnivorePlayerAggroMultiplier, 0x0CD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, HerbivoreNaturalTargetingRangeMultiplier, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, HerbivorePlayerAggroMultiplier, 0x0CDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, AIForceTargetPlayers, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, AIForceOverlapCheck, 0x0CE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_OQLW, 0x0CE2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bDisableSaveLoad, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bDisableXP, 0x0CE9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bDisableDynamicMusic, 0x0CEA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_LHON, 0x0CEB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PlayerDeathReasons, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, LevelExperienceRampOverrides, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OverridePlayerLevelEngramPoints, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ExcludeItemIndices, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OverrideEngramEntries, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OverrideNamedEngramEntries, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, EngramEntryAutoUnlocks, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PreventDinoTameClassNames, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, DinoSpawnWeightMultipliers, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, DinoClassResistanceMultipliers, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TamedDinoClassResistanceMultipliers, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, DinoClassDamageMultipliers, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TamedDinoClassDamageMultipliers, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, HarvestResourceItemAmountClassMultipliers, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, NPCReplacements, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PvPZoneStructureDamageMultiplier, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bOnlyAllowSpecifiedEngrams, 0x0DE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_T8FZ, 0x0DE5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OverrideMaxExperiencePointsPlayer, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OverrideMaxExperiencePointsDino, 0x0DEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, GlobalSpoilingTimeMultiplier, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, GlobalItemDecompositionTimeMultiplier, 0x0DF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, GlobalCorpseDecompositionTimeMultiplier, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MaxFallSpeedMultiplier, 0x0DFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAutoPvETimer, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAutoPvEUseSystemTime, 0x0E01);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_DU4I, 0x0E02);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, AutoPvEStartTimeSeconds, 0x0E0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, AutoPvEStopTimeSeconds, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_RDU3, 0x0E14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, HibernationManager, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TributeItemExpirationSeconds, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TributeDinoExpirationSeconds, 0x0E24);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TributeCharacterExpirationSeconds, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_49Q2, 0x0E2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MaxTributeItems, 0x0E34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MaxTributeDinos, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MaxTributeCharacters, 0x0E3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bIncreasePvPRespawnInterval, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_QLCE, 0x0E41);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, IncreasePvPRespawnIntervalCheckPeriod, 0x0E44);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, IncreasePvPRespawnIntervalMultiplier, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, IncreasePvPRespawnIntervalBaseAmount, 0x0E4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ResourceNoReplenishRadiusStructures, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ResourceNoReplenishRadiusPlayers, 0x0E54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, CropGrowthSpeedMultiplier, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, LayEggIntervalMultiplier, 0x0E5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PoopIntervalMultiplier, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, CropDecaySpeedMultiplier, 0x0E64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAllowChatFromDeadNonAdmins, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAllowDisablingSpectator, 0x0E69);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bPvEDisableFriendlyFire, 0x0E6A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bFlyerPlatformAllowUnalignedDinoBasing, 0x0E6B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAllowUnclaimDinos, 0x0E6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_NXH5, 0x0E6D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MaxPerTribePlatformSaddleStructureLimit, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MaxPlatformSaddleStructureLimit, 0x0E74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MaxDinoBaseLevel, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MaxNumberOfPlayersInTribe, 0x0E7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TribeSlotReuseCooldown, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MatingIntervalMultiplier, 0x0E84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, EggHatchSpeedMultiplier, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, BabyMatureSpeedMultiplier, 0x0E8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, BabyFoodConsumptionSpeedMultiplier, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_1Y7Y, 0x0E94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PerLevelStatsMultiplier_Player, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PerLevelStatsMultiplier_DinoTamed, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PerLevelStatsMultiplier_DinoTamed_Add, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PerLevelStatsMultiplier_DinoTamed_Affinity, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PerLevelStatsMultiplier_DinoWild, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MutagenLevelBoost, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MutagenLevelBoost_Bred, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ItemStatClamps, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MaxGateFrameOnSaddles, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MaxHexagonsPerCharacter, 0x100C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bCustomGameModeAllowSpectatorJoinAfterMatchStart, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_MRN4, 0x1011);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bGameplayLogEnabled, 0x2058);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bServerGameLogEnabled, 0x2059);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_YUWP, 0x205A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, BonusSupplyCrateItemClass, 0x2060);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, BonusSupplyCrateItemGiveInterval, 0x2068);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, StructureDamageRepairCooldown, 0x206C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, CustomRecipeEffectivenessMultiplier, 0x2070);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, CustomRecipeSkillMultiplier, 0x2074);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, BonusSupplyCrateItemString, 0x2078);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bPvEAllowTribeWar, 0x2088);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bPvEAllowTribeWarCancel, 0x2089);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAllowCustomRecipes, 0x208A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bPassiveDefensesDamageRiderlessDinos, 0x208B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_EKFY, 0x208C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bEnableDeathTeamSpectator, 0x2098);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bTribeStoreCharacterConfiguration, 0x2099);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_42JN, 0x209A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MaxTribeLogs, 0x2190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_4NGT, 0x2194);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bDisableFriendlyFire, 0x21B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAllowInactiveTribes, 0x21B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bForceMapPlayerLocation, 0x21B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_BMA6, 0x21B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, DinoHarvestingDamageMultiplier, 0x21B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PlayerHarvestingDamageMultiplier, 0x21B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, DinoTurretDamageMultiplier, 0x21BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bDisableLootCrates, 0x21C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_RB9C, 0x21C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ExtinctionEventTimeInterval, 0x21C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_40J0, 0x21C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, NextExtinctionEventUTC, 0x21CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_Q164, 0x21D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bShowFloatingDamageText, 0x21E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAllowTekSuitPowersInGenesis, 0x21E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_1D55, 0x21EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OverrideItemCraftingCosts, 0x2230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ConfigOverrideItemCraftingCosts, 0x2240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ConfigOverrideItemMaxQuantity, 0x2250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_RS1N, 0x2260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ConfigOverrideSupplyCrateItems, 0x22B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ConfigOverrideNPCSpawnEntriesContainer, 0x22C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ConfigAddNPCSpawnEntriesContainer, 0x22D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ConfigSubtractNPCSpawnEntriesContainer, 0x22E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, BabyImprintingStatScaleMultiplier, 0x22F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, BabyCuddleIntervalMultiplier, 0x22F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, BabyImprintAmountMultiplier, 0x22F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, BabyCuddleGracePeriodMultiplier, 0x22FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, BabyCuddleLoseImprintQualitySpeedMultiplier, 0x2300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, HairGrowthSpeedMultiplier, 0x2304);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bPreventDiseases, 0x2308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bNonPermanentDiseases, 0x2309);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_3S3P, 0x230A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, AllClustersInventory, 0x2310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, SaveForceRespawnDinosVersion, 0x2318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_YUG0, 0x231C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ServerID, 0x2320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_P1BS, 0x2328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, SupportedSpawnRegions, 0x2380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bServerUseDinoList, 0x2390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_MUNB, 0x2391);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MaxAllowedRespawnInterval, 0x2394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bUseDinoLevelUpAnimations, 0x2398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bDisableDinoTaming, 0x2399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bDisableDinoRiding, 0x239A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_N3AH, 0x239B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, SaveGameCustomVersion, 0x23A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_7IHM, 0x23A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PlayerBaseStatMultipliers, 0x2BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, NPCActiveCountTamed, 0x2BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, NPCActiveCount, 0x2BFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, NPCCount, 0x2C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, RTSModeNumSelectableDinosScale, 0x2C04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, RTSMaxRangeFromPlayerCharacterScale, 0x2C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, RTSProximityToEnemyStructureScale, 0x2C0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MatingSpeedMultiplier, 0x2C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, FastDecayInterval, 0x2C14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bUseSingleplayerSettings, 0x2C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bUseCorpseLocator, 0x2C19);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bDisableGenesisMissions, 0x2C1A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bDisableStructurePlacementCollision, 0x2C1B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bForceUseInventoryAppends, 0x2C1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_N6I9, 0x2C1D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, SupplyCrateLootQualityMultiplier, 0x2C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, FishingLootQualityMultiplier, 0x2C24);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ItemStackSizeMultiplier, 0x2C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, CraftingSkillBonusMultiplier, 0x2C2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAllowPlatformSaddleMultiFloors, 0x2C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAllowUnlimitedRespecs, 0x2C31);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_CRKH, 0x2C32);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, FuelConsumptionIntervalMultiplier, 0x2C34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, DestroyTamesOverLevelClamp, 0x2C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MaxAlliancesPerTribe, 0x2C3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MaxTribesPerAlliance, 0x2C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bDisableDinoDecayClaiming, 0x2C44);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bDisableNonTribePinAccess, 0x2C45);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bUseTameLimitForStructuresOnly, 0x2C46);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bLimitTurretsInRange, 0x2C47);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, LimitTurretsRange, 0x2C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, LimitTurretsNum, 0x2C4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bHardLimitTurretsInRange, 0x2C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAutoUnlockAllEngrams, 0x2C51);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_OC12, 0x2C52);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ServerLastForceRespawnWildDinosTime, 0x2C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UseStructurePreventionVolumeTagString, 0x2C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, BaseTemperatureMultiplier, 0x2C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bForceAllowAllStructures, 0x2C74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bForceAllowAscensionItemDownloads, 0x2C75);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bShowCreativeMode, 0x2C76);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_UECF, 0x2C77);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, LimitNonPlayerDroppedItemsRange, 0x2C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, LimitNonPlayerDroppedItemsCount, 0x2C7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, GlobalPoweredBatteryDurabilityDecreasePerSecond, 0x2C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, SingleplayerSettingsCorpseLifespanMultiplier, 0x2C84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UseCorpseLifeSpanMultiplier, 0x2C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TimePeriodToHideDisconnectedPlayers, 0x2C8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bUseBPPreSpawnedDino, 0x2C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_4BRL, 0x2C91);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PreventOfflinePvPConnectionInvincibleInterval, 0x2C94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TamedDinoCharacterFoodDrainMultiplier, 0x2C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, WildDinoCharacterFoodDrainMultiplier, 0x2C9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, WildDinoTorporDrainMultiplier, 0x2CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PassiveTameIntervalMultiplier, 0x2CA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TamedDinoTorporDrainMultiplier, 0x2CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bDisableWeatherFog, 0x2CAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_7A74, 0x2CAD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MeshCheckingRayDistance, 0x2CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MeshCheckingSubdivisons, 0x2CB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, MeshCheckingPercentageToFail, 0x2CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bIgnoreStructuresPreventionVolumes, 0x2CBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bGenesisUseStructuresPreventionVolumes, 0x2CBD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_ZBXE, 0x2CBE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, LiveTuningFileName, 0x2CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_2QAX, 0x2CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bLogChatMessages, 0x2D01);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_69LE, 0x2D02);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ChatLogFlushIntervalSeconds, 0x2D04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ChatLogFileSplitIntervalSeconds, 0x2D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, ChatLogMaxAgeInDays, 0x2D0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_RX1C, 0x2D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, LeaderboardContainer, 0x2D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_JE6K, 0x2D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bHasCovertedToStore, 0x2DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAllowStoredDatas, 0x2DD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_7JUQ, 0x2DD2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, AdditionalDefaultBuffs, 0x2EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bParseServerToJson, 0x2F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_3JVI, 0x2F09);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OnPreSpawnedDino, 0x2F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OnKilled, 0x2F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OnPostLogin, 0x2FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OnStartNewPlayer, 0x2FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OnAddNewTribe, 0x2FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OnRemoveTribe, 0x2FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OnRemovePlayerFromTribe, 0x2FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OnServerChatMessage, 0x2FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OnServerDirectMessage, 0x3008);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OnServerNotification, 0x3018);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OnNotifyDamage, 0x3028);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, OnSerializeForSaveFile, 0x3038);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_149C, 0x3048);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, BaseHexagonRewardMultiplier, 0x3068);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, HexagonRewardMultiplier, 0x306C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, HexagonCostMultiplier, 0x3070);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bDisableHexagonStore, 0x3074);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bHexStoreAllowOnlyEngramTradeOption, 0x3075);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_ZDX2, 0x3076);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, DynamicNPCReplacements, 0x3078);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, CollectiveNPCReplacements, 0x3088);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bAllowFlyerSpeedLeveling, 0x3098);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_SIH8, 0x3099);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PreventBreedingForClassNames, 0x30A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bDisableDinoBreeding, 0x30B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_TOR8, 0x30B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, PreventTransferForClassNames, 0x30B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bEnableWorldBuffScaling, 0x30C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_D3PN, 0x30C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, WorldBuffScalingEfficacy, 0x30CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bDisableWorldBuffs, 0x30D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_NGBX, 0x30D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TemporaryCrateModifiers, 0x30D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, TemporaryResourceModifiers, 0x30E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, AdjustableMutagenSpawnDelayMultiplier, 0x30F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, bDisableDefaultMapItemSets, 0x30FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_SJ93, 0x30FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, RedisTimeoutInMinutes, 0x3104);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, RestartedDueToRedisTimeout, 0x3108);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_29RG, 0x3109);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, DynamicDisabledWorldBuffs, 0x3110);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameMode, UnknownData_4420, 0x3120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterGameMode, 0x3130);
		}

		// Class ShooterGame.CustomGameMode
		TEST_METHOD(Class__ShooterGame__CustomGameMode)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACustomGameMode, 0x3130);
		}

		// Class ShooterGame.ShooterGameSession
		TEST_METHOD(Class__ShooterGame__ShooterGameSession)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameSession, UnknownData_FKTK, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterGameSession, 0x0648);
		}

		// Class ShooterGame.ShooterGameState
		TEST_METHOD(Class__ShooterGame__ShooterGameState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_FH02, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, NumNPC, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, NumHibernatedNPC, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, NumActiveNPC, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, NumDeadNPC, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, NumPlayerActors, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, NumPlayerConnected, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bServerUseLocalizedChat, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_L59W, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, LocalizedChatRadius, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, VoiceSuperRangeRadius, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, VoiceWhisperRangeRadius, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, LocalizedChatRadiusUnconsiousScale, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, VivoxAttenuationModel, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, VivoxMinDistance, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, VivoxRolloff, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, ServerFramerate, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_B8XS, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, NewStructureDestructionTag, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, DayNumber, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, DayTime, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, NetworkTime, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, TimeUTC, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bIsOfficialServer, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bIsListenServer, 0x059D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bIsDediServer, 0x059E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bIsServerRunningOnConsole, 0x059F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bIsArkTributeAvailable, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bIsArkDownloadsAllowed, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAllowThirdPersonPlayer, 0x05A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bServerHardcore, 0x05A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bServerPVE, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAutoPvE, 0x05A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bServerCrosshair, 0x05A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bServerForceNoHUD, 0x05A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bFlyerPlatformAllowUnalignedDinoBasing, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bMapPlayerLocation, 0x05A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bPvEDisableFriendlyFire, 0x05AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bPvEAllowTribeWar, 0x05AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bPvEAllowTribeWarCancel, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bEnablePvPGamma, 0x05AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bDisablePvEGamma, 0x05AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_C5JS, 0x05AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, NumTamedDinos, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, MaxStructuresInRange, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, DayCycleSpeedScale, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, DayTimeSpeedScale, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, NightTimeSpeedScale, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, PvEStructureDecayPeriodMultiplier, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, PvEDinoDecayPeriodMultiplier, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, PerPlatformMaxStructuresMultiplier, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bDisableStructureDecayPvE, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bDisableDinoDecayPvE, 0x05D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAllowCaveBuildingPvE, 0x05D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAllowCaveBuildingPvP, 0x05D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bPreventDownloadSurvivors, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bReachedPlatformStructureLimit, 0x05D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAdminLogging, 0x05D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bPvPStructureDecay, 0x05D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bPreventDownloadDinos, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bPreventDownloadItems, 0x05D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bPreventUploadDinos, 0x05DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bPreventUploadItems, 0x05DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bPreventUploadSurvivors, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bPreventMateBoost, 0x05DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bPreventStructurePainting, 0x05DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAllowCharacterCreation, 0x05DF);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAllowSpawnPointSelection, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_S7XE, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, MaxTamedDinos, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bDisableSpawnAnimations, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_6885, 0x05E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, PlayerListString, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, GlobalSpoilingTimeMultiplier, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, GlobalItemDecompositionTimeMultiplier, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, MaxNumberOfPlayersInTribe, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, TribeSlotReuseCooldown, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, GlobalCorpseDecompositionTimeMultiplier, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, EggHatchSpeedMultiplier, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, ActiveEvent, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAllowPaintingWithoutResources, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bEnableExtraStructurePreventionVolumes, 0x0621);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_1M1D, 0x0622);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, OverrideItemCraftingCosts, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, OverrideItemMaxQuantity, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_BT40, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, LastServerSaveTime, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, ServerSaveInterval, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, TribeNameChangeCooldown, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, PlatformSaddleBuildAreaBoundsMultiplier, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAlwaysAllowStructurePickup, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_R80H, 0x06AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, StructurePickupTimeAfterPlacement, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, StructurePickupHoldDuration, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAllowIntegratedSPlusStructures, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAllowHideDamageSourceFromLogs, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_7ICZ, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, DynamicMusicAudioComponent, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, DynamicMusicAudioComponent2, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_NCNZ, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, LevelExperienceRampOverrides, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, OverrideEngramEntries, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, CustomGameUITemplate, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, PreventDinoTameClassNames, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, ListenServerTetherDistanceMultiplier, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_2S07, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, PGMapName, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, SupportedSpawnRegions, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, PaintingCache, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, StaticOverrideMusic, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bEnableDeathTeamSpectator, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_X3EM, 0x0761);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, PlayerFloatingHUDOffset, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, PlayerFloatingHUDOffsetScreenY, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, StructureDamageRepairCooldown, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bForceAllStructureLocking, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAllowCustomRecipes, 0x0779);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAllowRaidDinoFeeding, 0x077A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_WBST, 0x077B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, CustomRecipeEffectivenessMultiplier, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, CustomRecipeSkillMultiplier, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_8LYL, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, OverrideAreaMusic, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, OverrideAreaMusicPosition, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, OverrideAreaMusicRange, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAllowUnclaimDinos, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_R1ZJ, 0x07A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, FloatingHUDRange, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, FloatingChatRange, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, ExtinctionEventTimeInterval, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, RTSModeNumSelectableDinosScale, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, RTSMaxRangeFromPlayerCharacterScale, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, ExtinctionEventPercent, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, ExtinctionEventSecondsRemaining, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bDoExtinctionEvent, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_V0OX, 0x07C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, DestroyTamesOverLevelClamp, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, InventoryComponentAppends, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bPreventOfflinePvP, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bPvPDinoDecay, 0x07D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAllowUnclaimDinosConfig, 0x07DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bForceUseInventoryAppends, 0x07DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bOverideStructurePlatformPrevention, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_5QE3, 0x07DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, ItemStackSizeMultiplier, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_33GE, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, PreventOfflinePvPLiveTeams, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, PreventOfflinePvPExpiringTeams, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, PreventOfflinePvPExpiringTimes, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_8CW8, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAllowAnyoneBabyImprintCuddle, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bDisableImprintDinoBuff, 0x08B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_M1ME, 0x08BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, MaxPersonalTamedDinos, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_72I2, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, ClusterId, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_WX8D, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, ServerSessionName, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bPreventTribeAlliances, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_MW4X, 0x0929);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bServerUseDinoList, 0x0942);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bPvEAllowStructuresAtSupplyDrops, 0x0943);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAllowForceNetUpdate, 0x0944);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_JM0X, 0x0945);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, MinimumDinoReuploadInterval, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, HairGrowthSpeedMultiplier, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, FastDecayInterval, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_LYM7, 0x0954);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, OnHTTPGetResponse, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, OnHTTPPostResponse, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAllowMultipleAttachedC4, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bCrossARKAllowForeignDinoDownloads, 0x0979);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_RNX5, 0x097A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bUseCorpseLocator, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bDisableStructurePlacementCollision, 0x0991);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bUseSingleplayerSettings, 0x0992);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAllowPlatformSaddleMultiFloors, 0x0993);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bPreventSpawnAnimations, 0x0994);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_YFV3, 0x0995);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, MaxAlliancesPerTribe, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, MaxTribesPerAlliance, 0x099C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bIsLegacyServer, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bDisableDinoDecayClaiming, 0x09A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_3SFJ, 0x09A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UseStructurePreventionVolumeTag, 0x09A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, MaxStructuresInSmallRadius, 0x09AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, RadiusStructuresInSmallRadius, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bUseTameLimitForStructuresOnly, 0x09B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bLimitTurretsInRange, 0x09B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_NAMD, 0x09B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, LimitTurretsRange, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, LimitTurretsNum, 0x09BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bForceAllowAllStructures, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bShowCreativeMode, 0x09C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_LQVU, 0x09C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, PassiveTameIntervalMultiplier, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_QF69, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UniqueDinos, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, ActiveMissionTags, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, MinimumUniqueDownloadInterval, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, MaximumUniqueDownloadInterval, 0x0A14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bIgnoreStructuresPreventionVolumes, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bPreventOutOfTribePinCodeUse, 0x0A19);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_OQJV, 0x0A1A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UniqueDownloads, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, GameDataSets, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, ActiveEventOverrides, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bIgnoreLimitMaxStructuresInRangeTypeFlag, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_USW4, 0x0A49);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, MassTeleportQueue, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_8R99, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAllowLowGravitySpin, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_Y0CB, 0x0A81);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, OnDinoDownloaded, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, OnDinoUploaded, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, WorldBuffPersistantDatas, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, TurretCopySettingsCooldown, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, BaseHexagonRewardMultiplier, 0x0ACC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, HexagonRewardMultiplier, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, HexagonCostMultiplier, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bDisableHexagonStore, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bHexStoreAllowOnlyEngramTradeOption, 0x0AD9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, bAllowFlyerSpeedLeveling, 0x0ADA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_7RXO, 0x0ADB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, PreventBreedingForClassNames, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, PreventTransferForClassNames, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, LiveTuningReplicatedChunkSize, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_EIUR, 0x0B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, LiveTuningOverloadChunks, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_3OIO, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, EnvironmentIndex, 0x0B1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, NextEnvironmentIndex, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, UnknownData_41NE, 0x0B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterGameState, NextMutagenTime, 0x0B28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterGameState, 0x0B30);
		}

		// Class ShooterGame.BattleGameState
		TEST_METHOD(Class__ShooterGame__BattleGameState)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABattleGameState, 0x0B30);
		}

		// Class ShooterGame.CustomGameState
		TEST_METHOD(Class__ShooterGame__CustomGameState)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACustomGameState, 0x0B30);
		}

		// Class ShooterGame.ShooterGameUserSettings
		TEST_METHOD(Class__ShooterGame__ShooterGameUserSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, MasterAudioVolume, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, MusicAudioVolume, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, SFXAudioVolume, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, VoiceAudioVolume, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, CharacterAudioVolume, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, UIScaling, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, UIQuickbarScaling, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, CameraShakeScale, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bFirstPersonRiding, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bThirdPersonPlayer, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bInventoryHideUnlearnedEngrams, 0x014A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bShowStatusNotificationMessages, 0x014B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, TrueSkyQuality, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, FOVMultiplier, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, GroundClutterDensity, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bFilmGrain, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bMotionBlur, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bUseDistanceFieldAmbientOcclusion, 0x015A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bUseSSAO, 0x015B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bShowChatBox, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bCameraViewBob, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bInvertLookY, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bFloatingNames, 0x015F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bChatBubbles, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bHideServerInfo, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bJoinNotifications, 0x0162);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bCraftablesShowAllItems, 0x0163);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bLocalInventoryItemsShowAllItems, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bLocalInventoryCraftingShowAllItems, 0x0165);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bRemoteInventoryItemsShowAllItems, 0x0166);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bRemoteInventoryCraftingShowAllItems, 0x0167);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bRemoteInventoryShowEngrams, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bForceDisableSuperDetailMode, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, UnknownData_3RTK, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, LookLeftRightSensitivity, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, LookUpDownSensitivity, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, GraphicsQuality, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, ActiveLingeringWorldTiles, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, ClientNetQuality, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, LastServerSearchType, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, LastServerSort, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, LastPVESearchType, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, LastDLCTypeSearchType, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, LastServerSortAsc, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, LastAutoFavorite, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, LastServerSearchHideFull, 0x0192);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, LastServerSearchProtected, 0x0193);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, LastServerSearchIncludeServersWithActiveMods, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, HideItemTextOverlay, 0x0195);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bQuickToggleItemNames, 0x0196);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bDistanceFieldShadowing, 0x0197);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, LODScalar, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bToggleToTalk, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, HighQualityMaterials, 0x019D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, HighQualitySurfaces, 0x019E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bTemperatureF, 0x019F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bDisableTorporEffect, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bChatShowSteamName, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bChatShowTribeName, 0x01A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bReverseTribeLogOrder, 0x01A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, EmoteKeyBind1, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, EmoteKeyBind2, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bNoBloodEffects, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bLowQualityVFX, 0x01AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bSpectatorManualFloatingNames, 0x01AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bSuppressAdminIcon, 0x01AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bUseSimpleDistanceMovement, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bDisableMeleeCameraSwingAnims, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bHighQualityAnisotropicFiltering, 0x01B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bUseLowQualityLevelStreaming, 0x01B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bPreventInventoryOpeningSounds, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bPreventItemCraftingSounds, 0x01B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bPreventHitMarkers, 0x01B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bPreventCrosshair, 0x01B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bPreventColorizedItemNames, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bHighQualityLODs, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bExtraLevelStreamingDistance, 0x01BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bEnableColorGrading, 0x01BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, DOFSettingInterpTime, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bDisableBloom, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bDisableLightShafts, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, UnknownData_XUJA, 0x01C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, DOFSettings, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, LastJoinedSessionPerCategory, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bDisableMenuTransitions, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bEnableInventoryItemTooltips, 0x01E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bRemoteInventoryShowCraftables, 0x01EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bNoTooltipDelay, 0x01EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, LocalItemSortType, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, LocalCraftingSortType, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, RemoteItemSortType, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, RemoteCraftingSortType, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, UnknownData_1TKU, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, VersionMetaTag, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, ShowExplorerNoteSubtitles, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, DisableMenuMusic, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, DisableDefaultCharacterItems, 0x0206);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bRequestDefaultCharacterItemsOnce, 0x0207);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bHasSeenGen2Intro, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bHideFloatingPlayerNames, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bHideGamepadItemSelectionModifier, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bToggleExtendedHUDInfo, 0x020B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, PlayActionWheelClickSound, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, UnknownData_2C8C, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, CompanionReactionVerbosity, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, EnableEnvironmentalReactions, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, EnableRespawnReactions, 0x0215);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, EnableDeathReactions, 0x0216);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, EnableSayHelloReactions, 0x0217);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, EnableEmoteReactions, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, EnableMovementSounds, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, DisableSubtitles, 0x021A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, UnknownData_10VL, 0x021B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, CompanionSubtitleVerbosityLevel, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, CompanionIsHiddenState, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, UnknownData_06W6, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, MaxAscensionLevel, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bHostSessionHasBeenOpened, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bForceTPVCameraOffset, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bDisableTPVCameraInterpolation, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bFPVClimbingGear, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bFPVGlidingGear, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, UnknownData_GAKV, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, Gamma1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, Gamma2, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, AmbientSoundVolume, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bAllowAnimationStaggering, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bUseOldThirdPersonCameraTrace, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bUseOldThirdPersonCameraOffset, 0x023E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bLowQualityAnimations, 0x023F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bShowedGenesisDLCBackground, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bShowedGenesis2DLCBackground, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bViewedAnimatedSeriesTrailer, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bViewedARK2Trailer, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bShowRTSKeyBinds, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, UnknownData_XGYY, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, TemporaryMusicStingerReductionMultiplier, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, bHasCompletedGen2, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameUserSettings, UnknownData_7S7R, 0x024D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShooterGameUserSettings, 0x0250);
		}

		// Class ShooterGame.ShooterGameViewportClient
		TEST_METHOD(Class__ShooterGame__ShooterGameViewportClient)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameViewportClient, LoadingMusic, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameViewportClient, InfoFont, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterGameViewportClient, UnknownData_DOXF, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShooterGameViewportClient, 0x01D8);
		}

		// Class ShooterGame.ShooterImpactEffect
		TEST_METHOD(Class__ShooterGame__ShooterImpactEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterImpactEffect, SurfaceImpactFX, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterImpactEffect, SurfaceImpactSound, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterImpactEffect, MaxDecalRange, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterImpactEffect, UnknownData_6RZE, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterImpactEffect, SurfaceDecalData, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterImpactEffect, SurfaceImpactSpawnActors, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterImpactEffect, UnknownData_YGV9, 0x07F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterImpactEffect, 0x0880);
		}

		// Class ShooterGame.ShooterLaserBeamComponent
		TEST_METHOD(Class__ShooterGame__ShooterLaserBeamComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterLaserBeamComponent, bIsOwnerWeapon, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterLaserBeamComponent, UnknownData_XRUS, 0x0831);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterLaserBeamComponent, LaserBeamRange, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterLaserBeamComponent, UnknownData_LZEY, 0x0838);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShooterLaserBeamComponent, 0x0840);
		}

		// Class ShooterGame.ShooterPersistentUser
		TEST_METHOD(Class__ShooterGame__ShooterPersistentUser)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterPersistentUser, Kills, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterPersistentUser, Deaths, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterPersistentUser, Wins, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterPersistentUser, Losses, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterPersistentUser, BulletsFired, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterPersistentUser, RocketsFired, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterPersistentUser, BotsCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterPersistentUser, Gamma, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterPersistentUser, AimSensitivity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterPersistentUser, bInvertedYAxis, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterPersistentUser, UnknownData_5KNQ, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShooterPersistentUser, 0x0068);
		}

		// Class ShooterGame.ShooterLocalPlayer
		TEST_METHOD(Class__ShooterGame__ShooterLocalPlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UShooterLocalPlayer, PersistentUser, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShooterLocalPlayer, 0x0230);
		}

		// Class ShooterGame.ShooterOnlineSessionClient
		TEST_METHOD(Class__ShooterGame__ShooterOnlineSessionClient)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShooterOnlineSessionClient, 0x0100);
		}

		// Class ShooterGame.ShooterPlayerCameraManager
		TEST_METHOD(Class__ShooterGame__ShooterPlayerCameraManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerCameraManager, NormalFOV, 0x1820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerCameraManager, TargetingFOV, 0x1824);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerCameraManager, TPVZOffsetInterpSpeed, 0x1828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerCameraManager, UnknownData_PFYE, 0x182C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerCameraManager, bHasCustomDepthStencil, 0x1838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerCameraManager, bCustomDepthStencilIgnoreHealth, 0x1839);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerCameraManager, bCompleteCustomDepthStencilOverride, 0x183A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerCameraManager, UnknownData_DOON, 0x183B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerCameraManager, LastActualCameraStyle, 0x1854);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerCameraManager, UnknownData_TXJB, 0x185C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerCameraManager, LastTPVCameraOffset, 0x1FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerCameraManager, LastTPVCollisionHeight, 0x1FBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerCameraManager, TPVCollisionHeightInterpSpeed, 0x1FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterPlayerCameraManager, UnknownData_437M, 0x1FC4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterPlayerCameraManager, 0x2010);
		}

		// Class ShooterGame.ShooterPlayerController_Menu
		TEST_METHOD(Class__ShooterGame__ShooterPlayerController_Menu)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterPlayerController_Menu, 0x0858);
		}

		// Class ShooterGame.ShooterWeapon
		TEST_METHOD(Class__ShooterGame__ShooterWeapon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, EquipTime, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_WZ3H, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, OverridePawnTPVAnimBlueprint, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, OverrideProneInAnim, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, OverrideProneOutAnim, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, OverrideJumpAnim, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, OverrideLandedAnim, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, OverrideRiderAnimSequenceFrom, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, OverrideRiderAnimSequenceTo, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, PrimaryIcon, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, SecondaryIcon, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, PrimaryClipIcon, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, SecondaryClipIcon, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, ItemDurabilityToConsumePerMeleeHit, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, AmmoIconsCount, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, TargetingTooltipCheckRange, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_TKJX, 0x0525);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, PrimaryClipIconOffset, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, SecondaryClipIconOffset, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, TargetingInfoToolTipWidget, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, TargetingInfoTooltipPadding, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, TargetingInfoTooltipScale, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bOnlyPassiveDurabilityWhenAccessoryActive, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bDisableShooterOnElectricStorm, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_25WO, 0x054A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, OverrideAttachPoint, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVRelativeLocation, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVRelativeRotation, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVRelativeLocation_Targeting, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVRelativeRotation_Targeting, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVEnterTargetingInterpSpeed, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVExitTargetingInterpSpeed, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, EndDoMeleeSwingTime, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVLookAtMaximumOffset, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVLookAtSpeedBase, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVLookAtInterpSpeed, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVLookAtMaximumOffset_Targeting, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVLookAtSpeedBase_Targeting, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVLookAtInterpSpeed_Targeting, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVImmobilizedLocationOffset, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVImmobilizedRotationOffset, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVImmobilizedInterpSpeed, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_1D45, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bUseBlueprintAnimNotifications, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_9513, 0x05F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MeleeSwingSockets, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, AllowMeleeTimeBeforeAnimationEnd, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_ESTM, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, AssociatedPrimalItem, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, AssociatedMission, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bCanBeUsedAsEquipment, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_E2II, 0x0629);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, AssociatedItemNetInfo, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, Mesh3P, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, WeaponAmmoItemTemplate, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, WeaponConfig, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_9FF4, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, AnimatedCamera, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_BCRK, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MyPawn, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, Mesh1P, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FireAC, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MuzzleAttachPoint, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MuzzleFX, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MuzzleFX_FPV, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, AltMuzzleFX, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, AltMuzzleFX_FPV, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MuzzlePSC, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MuzzlePSCSecondary, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FireCameraShake, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, ReloadCameraShake, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MeleeCameraShake, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FireForceFeedback, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FireSound, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, AltFireSound, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FireFinishSound, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, OutOfAmmoSound, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MeleeDamageAmount, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, TheMeleeSwingRadius, 0x0934);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MeleeDamageImpulse, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_Z7GD, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, ReloadAnim, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, PartialReloadAnim, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, WeaponMesh3PReloadAnim, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, HarvestAnim, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, WeaponBreakAnim, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, EquipSound, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, EquipAnim, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, EquipNoAmmoClipAnim, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnequipAnim, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnequipNoAmmoClipAnim, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, WeaponMesh3PFireAnim, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FireAnim, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MeleeAnim, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MeleeNoAmmoClipAnim, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MeleeAnimList, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_Y9S3, 0x0A19);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MeleeWithHitAnimList, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, ShieldHitAnim, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVMoveOffscreenWhenTurningMaxMoveWeaponSpeed, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVMoveOffscreenWhenTurningMinMoveWeaponSpeed, 0x0A44);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVMoveOffscreenWhenTurningMinViewRotSpeed, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVMoveOffscreenWhenTurningMaxViewRotSpeed, 0x0A4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVMoveOffscreenIdleRestoreInterval, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVMoveOffscreenIdleRestoreSpeed, 0x0A54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVMoveOffscreenWhenTurningMaxOffset, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_WS35, 0x0A5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, TargetingFireAnim, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_8L36, 0x0A7E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_W8O3, 0x0A81);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, ItemDestructionUnequipWeaponDelay, 0x0A84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, WeaponUnequipDelay, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_T5N5, 0x0A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, TargetingReloadAnim, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_MHIS, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, CurrentAmmo, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, CurrentAmmoInClip, 0x0AB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bReplicateCurrentAmmoInClipToNonOwners, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bUseBPAdjustAmmoPerShot, 0x0AB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVAccessoryToggleComponent, 0x0ABC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, TPVAccessoryToggleComponent, 0x0AC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_39XZ, 0x0ACE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_2LAH, 0x0AD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, TimeToAutoReload, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, ToggleAccessorySound, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FiredLastNoAmmoShot, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_VI24, 0x0AE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, LastNotifyShotTime, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_QSNY, 0x0AF1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MeleeDamageType, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_4CVE, 0x0B01);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_P5MJ, 0x0B05);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, VRTargetingModelOffset, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, VRTargetingAimOriginOffset, 0x0B14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, ScopeOverlayMI, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, ScopeCrosshairMI, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, ScopeCrosshairMID, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, ScopeCrosshairSize, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, ScopeCrosshairColorParameter, 0x0B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_WAAK, 0x0B45);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_XYI7, 0x0B49);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MinItemDurabilityPercentageForShot, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_J5O7, 0x0B55);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, OverrideTargetingFOV, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, TargetingDelayTime, 0x0B5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, TargetingFOVInterpSpeed, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, AimDriftYawAngle, 0x0B64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, AimDriftPitchAngle, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, AimDriftYawFrequency, 0x0B6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, AimDriftPitchFrequency, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_GJ4M, 0x0B74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, AlternateInventoryEquipAnim, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, OpenInventoryAnim, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MeleeHitRandomChanceToDestroyItem, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, GlobalFireCameraShakeScale, 0x0B94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, DurabilityCostToEquip, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, PassiveDurabilityCostPerInterval, 0x0B9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, PassiveDurabilityCostInterval, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, GlobalFireCameraShakeScaleTargeting, 0x0BA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MeleeCameraShakeSpeedScale, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, ReloadCameraShakeSpeedScale, 0x0BAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MeleeConsumesStamina, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_0OZS, 0x0BB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MeleeHitTargetCameraShake, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MeleeHitTargetCameraShakeMobile, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MeleeHitColorizeStructuresUI, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, HypoThermiaInsulation, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, HyperThermiaInsulation, 0x0BD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, InsulationRange, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_M4UW, 0x0BDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, TargetingSound, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UntargetingSound, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVMeleeTraceFXRange, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_99CF, 0x0C0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MeleeAttackUsableHarvestDamageType, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MeleeAttackHarvetUsableComponentsRadius, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, MeleeAttackUsableHarvestDamageMultiplier, 0x0C1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_9PEF, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, TPVForcePlayAnim, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bPreventOpeningInventory, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bAllowUseOnSeatingStructure, 0x0C81);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bOnlyUseOnSeatingStructure, 0x0C82);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_KKKF, 0x0C86);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_IA0Y, 0x0C89);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_G7Y5, 0x0C8D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_NCYB, 0x0C91);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bBPDoClientCheckCanFire, 0x0C94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bRestrictTPVCameraYaw, 0x0C95);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_3FQ7, 0x0C96);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, TPVCameraYawRange, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bFoceSimulatedTick, 0x0C9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bWasLastFireFromGamePad, 0x0C9D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bDisableWeaponCrosshair, 0x0C9E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_Q7YV, 0x0C9F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, DyePreviewMeshOverrideSK, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, DyePreviewMeshOverrideSM, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bBPOverrideAspectRatio, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bBPOverrideFPVMasterPoseComponent, 0x0CB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bForceAllowMountedWeaponry, 0x0CB2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_O33I, 0x0CB3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FireCameraShakeSpreadScaleExponent, 0x0CB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FireCameraShakeSpreadScaleExponentLessThan, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FireCameraShakeSpreadScaleMultiplierLessThan, 0x0CBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FireCameraShakeSpreadScaleMultiplier, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bUseFireCameraShakeScale, 0x0CC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bForceTickWithNoController, 0x0CC5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_VQ44, 0x0CC6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, InstantConfig, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, CurrentFiringSpread, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_X5C0, 0x0CFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, ScopedBuff, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_737H, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, OverrideTPVShieldAnimation, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bAllowTargetingDuringMeleeSwing, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_QXZE, 0x0D19);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVMuzzleLocationOffset, 0x0D1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, TPVMuzzleLocationOffset, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bForceTPV_EquippedWhileRiding, 0x0D34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bCutsEnemyGrapplingCable, 0x0D35);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_39GI, 0x0D36);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FPVInventoryReequipOffset, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_TU4Y, 0x0D44);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bForceTPVCameraOffset, 0x0D54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, bUseBPSpawnMeleeEffects, 0x0D55);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_6VB4, 0x0D56);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, StartBurstAnim, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, FinishBurstAnim, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon, UnknownData_MTAK, 0x0D78);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterWeapon, 0x0D80);
		}

		// Class ShooterGame.ShooterWeapon_Projectile
		TEST_METHOD(Class__ShooterGame__ShooterWeapon_Projectile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, bUseAmmoOnFireProjectile, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, UnknownData_FCZB, 0x0D81);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, ProjectileClass, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, FireProjectileSound, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, ProjectileMesh3P, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, ProjectileAttachPoint3P, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, bSpawnProjectileOnClient, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, bUseBPSelectProjectileToFire, 0x0DA9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, UnknownData_4FNF, 0x0DAA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, ProjectileSpreadYaw, 0x0DAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, ProjectileSpreadPitch, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, ServerMaxProjectileAngleError, 0x0DB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, ServerMaxProjectileOriginError, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, UnknownData_CANI, 0x0DBD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, Mesh1PProjectileBoneName, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, LockOnYScreenPercentage, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, bUseLockOn, 0x0DCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, UnknownData_J9IN, 0x0DCD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, LockOnTime, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, CurrentLockOnTime, 0x0DD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, LockOnMaxTraceDistance, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, LockOnTraceBoxExtent, 0x0DDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, ActorLockedMI, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, ActorLockedMID, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, ActorInLockedAreaMI, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, ActorInLockedAreaMID, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, bHasLockedTarget, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Projectile, UnknownData_EESC, 0x0E09);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterWeapon_Projectile, 0x0E30);
		}

		// Class ShooterGame.ShooterProjectile
		TEST_METHOD(Class__ShooterGame__ShooterProjectile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, MovementComp, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, bFragmentate, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, UnknownData_O8XG, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, FragmentOriginOffset, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, FragmentConeHalfAngle, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, NumberOfFragmentProjectiles, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, FragmentProjectileTemplate, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, bUseOwnerProjectileLife, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, UnknownData_LLM2, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, CollisionComp, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, ParticleComp, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, StaticMeshComp, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, ExplosionEmitter, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, ImpactEmitter, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, UnknownData_579O, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, ClientSideCollisionRadius, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, TraceForBlockingRadius, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, CustomColorDesaturation, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, UnknownData_A6IU, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, RotateMeshFactor, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, UnknownData_7V3T, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, ImpactTemplate, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, TornOffLifeSpan, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, PostExplosionKeepAliveLifeSpan, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, ExplosionNetworkTime, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, NudgedImpactDistance, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, bIgnoreDirectImpactRadialDamage, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, bForceNetUpdate, 0x050D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, UnknownData_SFYC, 0x050E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, ForceNetUpdateTimeInterval, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, weapon, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, ParticleColorIntensity, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, ClientFailsafeLifespan, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, UnknownData_FZWM, 0x0525);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, WeaponConfig, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, UnknownData_7T9B, 0x0552);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, CustomColor, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, DamageCauser, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, bHasImpacted, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, UnknownData_C141, 0x056D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, ReplicatedHitInfo, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, ProjectileBounceSound, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, UnknownData_XE1S, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, ImpactedActors, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, LastVelocity, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, UnknownData_ZO5B, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, IgnoreNonBlockingHitClasses, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, bForceIgnoreBlockingHitClasses, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile, UnknownData_DGP7, 0x065A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterProjectile, 0x0660);
		}

		// Class ShooterGame.PrimalProjectileArrow
		TEST_METHOD(Class__ShooterGame__PrimalProjectileArrow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileArrow, PickUpRadius, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileArrow, UnknownData_5ZC4, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileArrow, PickupItemClass, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileArrow, PickUpQuantity, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileArrow, PercentChanceToBreakOnImpact, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileArrow, PickItemClassApplySkin, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileArrow, ArrowPickedUpSound, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalProjectileArrow, 0x0688);
		}

		// Class ShooterGame.PrimalProjectileBoomerang
		TEST_METHOD(Class__ShooterGame__PrimalProjectileBoomerang)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileBoomerang, UnknownData_SJO6, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileBoomerang, MaxDistanceToTravel, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileBoomerang, UnknownData_NDRK, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileBoomerang, ReturnFirstPointTravelDistanceMultiplier, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileBoomerang, ReturnSecondPointTravelDistanceMultiplier, 0x070C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalProjectileBoomerang, 0x0710);
		}

		// Class ShooterGame.VictoryCoreHighest
		TEST_METHOD(Class__ShooterGame__VictoryCoreHighest)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVictoryCoreHighest, 0x0028);
		}

		// Class ShooterGame.VictoryCore
		TEST_METHOD(Class__ShooterGame__VictoryCore)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVictoryCore, 0x0028);
		}

		// Class ShooterGame.PrimalProjectileNetGun
		TEST_METHOD(Class__ShooterGame__PrimalProjectileNetGun)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileNetGun, SkeletalMeshComp, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileNetGun, BuffToApplyToLightCharacters, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileNetGun, BuffToApplyToHeavyCharacters, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileNetGun, MaxDinoMassToInmovilize, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileNetGun, UnknownData_04M6, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileNetGun, ManagedBones, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileNetGun, OnInpactMaxTraceDistance, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileNetGun, DissolveTime, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileNetGun, UnknownData_61JJ, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalProjectileNetGun, 0x0778);
		}

		// Class ShooterGame.PrimalProjectileDilo
		TEST_METHOD(Class__ShooterGame__PrimalProjectileDilo)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalProjectileDilo, 0x0660);
		}

		// Class ShooterGame.PrimalProjectileFlare
		TEST_METHOD(Class__ShooterGame__PrimalProjectileFlare)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileFlare, SecondParticleComp, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileFlare, TimeToActivateSecondParticleComp, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileFlare, RandomFallingMovementInterval, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileFlare, RandomFallingMovementStrength, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileFlare, UnknownData_J1BZ, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileFlare, SecondParticleSound, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileFlare, LightColorIntensity, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileFlare, UnknownData_HNQ3, 0x0684);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalProjectileFlare, 0x0688);
		}

		// Class ShooterGame.PrimalProjectileGrapplingHook
		TEST_METHOD(Class__ShooterGame__PrimalProjectileGrapplingHook)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileGrapplingHook, GrapHookEndPointOffset, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileGrapplingHook, MaximumRopeDistance, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileGrapplingHook, PullingStrength, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileGrapplingHook, ReleaseRopeSpeed, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileGrapplingHook, MaxPullMassOverride, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileGrapplingHook, DetachGrapHookLifespan, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileGrapplingHook, GrapHookDefaultOffset, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileGrapplingHook, UnknownData_ZW4W, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileGrapplingHook, GrapHookMaterial, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileGrapplingHook, GrapHookCableWidthOverride, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileGrapplingHook, bAllowPullSleeping, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileGrapplingHook, bAllowPullFleeing, 0x069D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalProjectileGrapplingHook, UnknownData_09GG, 0x069E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalProjectileGrapplingHook, 0x06A0);
		}

		// Class ShooterGame.PrimalProjectileSpiderAcid
		TEST_METHOD(Class__ShooterGame__PrimalProjectileSpiderAcid)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalProjectileSpiderAcid, 0x0660);
		}

		// Class ShooterGame.ShooterProjectile_Swarm
		TEST_METHOD(Class__ShooterGame__ShooterProjectile_Swarm)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmRoot, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmSize, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmLeaderCount, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, BoidCollisionRadius, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, UnknownData_IYM3, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmBehavior, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, DynamicAvoidanceDuration, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, UnknownData_AOON, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmPersistentData, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmParticleSystem, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmOpacityParticleParamName, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, bFadeOutSwarmOverProjectileLife, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, UnknownData_G01N, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmOpacityFadeTimeOnBoidImpact, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, LifespanAfterImpact, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmDelayedStartTime, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, BoidSpawnInterval, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, BoidInitialFollowProjectileTime, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, BoidInitialDisableCollisionTime, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmLifetimeAfterPrimaryProjectileDestruction, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmSpawnRadius, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmInitialSpeedRange, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmMaxSpeedRange, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmMaxForceRange, 0x073C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmTurnRateRange, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmTargetRadius, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmTargetHelixSpeed, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, UnknownData_J0ZN, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmData, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, SwarmComps, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, BoidSpawnTimes, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, BoidExplodeTimes, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, FlockingWhitelist, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, bUseCrazinessMultiplier, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, UnknownData_RF5I, 0x07A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, CrazinessMultiplier, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, bUseBPGetBoidSpawnLocationAndVelocity, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, UnknownData_Z49C, 0x07B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, LaunchArc, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, UnknownData_XMW3, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, ProjectileSpawnTime, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, ProjectilePeakTime, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, ProjectileImpactTime, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterProjectile_Swarm, UnknownData_1PWL, 0x07F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterProjectile_Swarm, 0x0820);
		}

		// Class ShooterGame.ShooterSpectatorPawn
		TEST_METHOD(Class__ShooterGame__ShooterSpectatorPawn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterSpectatorPawn, UnknownData_99C6, 0x0520);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterSpectatorPawn, 0x0570);
		}

		// Class ShooterGame.ShooterWeapon_Melee
		TEST_METHOD(Class__ShooterGame__ShooterWeapon_Melee)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Melee, bUseAltFireOnNormalFire, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Melee, UnknownData_H2EY, 0x0D81);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterWeapon_Melee, 0x0D88);
		}

		// Class ShooterGame.ShooterWeapon_ChainSaw
		TEST_METHOD(Class__ShooterGame__ShooterWeapon_ChainSaw)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_ChainSaw, ShootAnimList, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_ChainSaw, ShootWithHitAnimList, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_ChainSaw, IdleSound, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_ChainSaw, IdleAC, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_ChainSaw, UnknownData_ISLX, 0x0DB0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterWeapon_ChainSaw, 0x0DB8);
		}

		// Class ShooterGame.ShooterWeapon_Instant
		TEST_METHOD(Class__ShooterGame__ShooterWeapon_Instant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Instant, TrailFX, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Instant, TrailFX_Local, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Instant, TrailTargetParam, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Instant, OriginCheckDistance, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Instant, UnknownData_KY23, 0x0D9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Instant, NumTracesPerShot, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Instant, UnknownData_42TU, 0x0DB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Instant, UnknownData_OOAA, 0x0DBA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterWeapon_Instant, 0x0DC0);
		}

		// Class ShooterGame.ShooterWeapon_FlameThrower
		TEST_METHOD(Class__ShooterGame__ShooterWeapon_FlameThrower)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, InstantDamageAmount, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, DamageTestSphereRadius, 0x0D84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, DamageTestBoxExtentSide, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, DamageTestMuzzleOffset, 0x0D8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, FlameHurtMaxDistance, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, UnknownData_5DKC, 0x0D94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, DamageImpactPoints, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, MuzzleDirectionOffset, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, MuzzlePSCTickGroupOverride, 0x0DB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, UnknownData_MMT2, 0x0DB5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, UnknownData_VOJG, 0x0DB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, FlameThrowerFXDefaultColor, 0x0DBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, DamageType, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, FlameThrowerFX, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, FlameThrowerFX_FPV, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, OnFireFX, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, HarvestFX, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, UnknownData_PJRU, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, ShotDelay, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, UnknownData_BW6K, 0x0DFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, FXDelay, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, UnknownData_UD0A, 0x0E04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_FlameThrower, UnknownData_UBEQ, 0x0E11);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterWeapon_FlameThrower, 0x0E18);
		}

		// Class ShooterGame.ShooterWeapon_Activated
		TEST_METHOD(Class__ShooterGame__ShooterWeapon_Activated)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Activated, UnknownData_MP9Z, 0x0E19);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Activated, ActivateAnim, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Activated, DeactivateAnim, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Activated, StopFireAnim, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Activated, MovementFireAnim, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Activated, bDamagePawns, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Activated, UnknownData_621Y, 0x0E69);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Activated, ActivateCameraShake, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Activated, ActivateCameraShakeSpeedScale, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Activated, FireOrigin, 0x0E7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Activated, FireDirection, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Activated, TargetLocation, 0x0E94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Activated, BeamTargetParameterName, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Activated, FireLoopSound, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Activated, FireLoopAC, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Activated, IdleSound, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Activated, IdleAC, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Activated, EmptySound, 0x0EC8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterWeapon_Activated, 0x0ED0);
		}

		// Class ShooterGame.ShooterWeapon_InstantCharging
		TEST_METHOD(Class__ShooterGame__ShooterWeapon_InstantCharging)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_InstantCharging, UnknownData_T1QH, 0x0DC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_InstantCharging, ChargeStartTime, 0x0DC8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterWeapon_InstantCharging, 0x0DD0);
		}

		// Class ShooterGame.ShooterWeapon_InstantPenetrating
		TEST_METHOD(Class__ShooterGame__ShooterWeapon_InstantPenetrating)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_InstantPenetrating, MaxPenetrationTraceDistance, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_InstantPenetrating, PenaltyPerPenetration, 0x0DC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_InstantPenetrating, PenaltyPerUnrealUnit, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_InstantPenetrating, bUseBPStopPenetratingAtHit, 0x0DCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_InstantPenetrating, UnknownData_LAMG, 0x0DCD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_InstantPenetrating, UnknownData_Y6M7, 0x0DD1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterWeapon_InstantPenetrating, 0x0E28);
		}

		// Class ShooterGame.PrimalWeaponElectronicBinoculars
		TEST_METHOD(Class__ShooterGame__PrimalWeaponElectronicBinoculars)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, YPosDistance, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, XPosDistance, 0x0D8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, CompSize, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, DistanceX, 0x0D94);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, DistanceY, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, DistanceSize, 0x0D9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, NightVisionBuff, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, AudioListener, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, ScopeCompassMI, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, ScopeCompassMID, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, LatitudeMI, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, LatitudeMID, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, LongitudeMI, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, LongitudeMID, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, LatLongInterpSpeed, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, UnknownData_WRFM, 0x0DE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, CurrentCompassAngle, 0x0DEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, CompassNorthAngle, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, CompassInterpSpeed, 0x0DFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, LatitudeOrigin, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, LatitudeScale, 0x0E04);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, LongitudeOrigin, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, LongitudeScale, 0x0E0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, SoundFadeInSpeed, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, MinTargetingFOV, 0x0E14);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, MaxTargetingFOV, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponElectronicBinoculars, UnknownData_OIB5, 0x0E1C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalWeaponElectronicBinoculars, 0x0E38);
		}

		// Class ShooterGame.PrimalWeaponGPS
		TEST_METHOD(Class__ShooterGame__PrimalWeaponGPS)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, CompassMesh1P, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, CompassMesh3P, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, MapMesh3P, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, AssetSM_MarkerMesh, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, AssetSM_PlayerMarkerMesh, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, AssetSM_BalloonMarkerMesh, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, MarkerMapScaleX, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, MarkerMapScaleY, 0x0DBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, MarkerOffsetZ, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, MarkerRotationMin, 0x0DC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, MarkerRotationMax, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, MaxMapMarkers, 0x0DDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, MarkerTextColor, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, PlayerMarkerTextColor, 0x0DE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, MarkerComponents, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, UnknownData_V4S7, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, PlayerLocationMArkerComponent, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, ItemBalloonMarkerComponent, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, MapAttachPoint3P, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, CompassAttachPoint1P, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, GPSBoneName1P, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, ZoomInMapAnim, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, ZoomInGPSAnim, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, ZoomInCompassAnim, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, ZoomOutMapAnim, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, ZoomOutGPSAnim, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, ZoomOutCompassAnim, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, DisplayMapAnim, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, DisplayGPSAnim, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, DisplayCompassAnim, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, UnequipMapAnim, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, UnequipGPSAnim, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, UnequipCompassAnim, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, UnequipCompassAndMapAnim, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, MeleeMapAnim, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, MeleeGPSAnim, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, MeleeCompassAnim, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, MeleeCompassMapAnim, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, TPV_MapOnlyIdle, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, TPV_GPSOnlyIdle, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, TPV_MapAndGPSIdle, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, DigitParameterName, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, LatitudeMaterialIndex1, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, LatitudeMaterialIndex2, 0x0F64);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, LatitudeMaterialIndex3, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, LongitudeMaterialIndex1, 0x0F6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, LongitudeMaterialIndex2, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, LongitudeMaterialIndex3, 0x0F74);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, MapMaterialIndex, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, LatitudeOrigin, 0x0F7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, LatitudeScale, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, LongitudeOrigin, 0x0F84);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, LongitudeScale, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, GPSCompassMaterialIndex, 0x0F8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, CompassCenterParameterName, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, FogOfWarTextureParameterName, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, CompassNorthAngle, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, CompassInterpSpeed, 0x0FA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, SwingSpeed, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, MaxSwingAngle, 0x0FAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, ItemBalloonLocation, 0x0FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, UnknownData_XSI0, 0x0FBD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, CurrentCompassAngle, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, CurrentSwingAngle, 0x0FCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, CurrentSwingFactor, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, CurrentSwingTime, 0x0FD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, PreviousPawnYaw, 0x0FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, UnknownData_VTMT, 0x0FDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, GPSCompassMaterialInstance, 0x0FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, PreviousLatitudeNumber, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, PreviousLongitudeNumber, 0x0FEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, PreviousBalloonLatitudeNumber, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, PreviousBalloonLongitudeNumber, 0x0FF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, LatitudeDigit1_MI, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, LatitudeDigit2_MI, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, LatitudeDigit3_MI, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, LongitudeDigit1_MI, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, LongitudeDigit2_MI, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, LongitudeDigit3_MI, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGPS, Map_MI, 0x1028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalWeaponGPS, 0x1030);
		}

		// Class ShooterGame.ShooterWeapon_Climb
		TEST_METHOD(Class__ShooterGame__ShooterWeapon_Climb)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, MinStaminaToClimb, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ClimbingMode, 0x0D8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, PreviousClimbingMode, 0x0D8D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ClimbingType, 0x0D8E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, CurrentClimbingMovementType, 0x0D8F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, UnknownData_DSN7, 0x0D91);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ClimbingAnchorPosition, 0x0D94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ClimbingAnchorNormal, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, UnknownData_UA7E, 0x0DAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, PreviousClimbingAnchorPosition, 0x0DB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, PreviousClimbingAnchorNormal, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ClimbingDirection, 0x0DCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ClimbingAnchorDirection, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ClimbingOvershootTime, 0x0DE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ClimbingLookingToSide, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, UnknownData_1G5U, 0x0DEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ClimbLowStaminaLoopSC, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ClimbLowStaminaLoopAC, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ClimbLowStaminaPercentagePlaySound, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, UnknownData_M681, 0x0E04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ClimbAnims, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, TurnLeftAnim, 0x1208);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, TurnRightAnim, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, TurnLeftAnimHanging, 0x1228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, TurnRightAnimHanging, 0x1238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, RightClimbingAnimation, 0x1248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, LeftClimbingAnimation, 0x1250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, RightClimbingHangAnimation, 0x1258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, LeftClimbingHangAnimation, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, InventoryRightClimbAnimation, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, InventoryLeftClimbAnimation, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, InventoryRightClimbHangAnimation, 0x1278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, InventoryLeftClimbHangAnimation, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, SlideDownLeftAnim, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, SlideDownRightAnim, 0x1298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, LeftMesh1PComponentName, 0x12A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, RightMesh1PComponentName, 0x12B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, LeftMesh3PComponentName, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, RightMesh3PComponentName, 0x12C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, LeftPickAttachPoint3P, 0x12C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, LeftMesh1P, 0x12D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, RightMesh1P, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, LeftMesh3P, 0x12E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, RightMesh3P, 0x12E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ClimbPickHitCameraShake, 0x12F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, LeftClimbImpactEffects, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, RightClimbImpactEffects, 0x1378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ImpactSocketName, 0x13F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, MaxSpawnedImpactEffects, 0x1400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ServerCurrentClimbingType, 0x1404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, UnknownData_SCXV, 0x1405);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ServerCurrentClimbingDirection, 0x1408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, UpdatingDirectionTime, 0x1414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ActiveImpactEffects, 0x1418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ClimbingSettingsClass, 0x1428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ActiveCameraModifer, 0x1430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ClimbingMinAttachedDurationBeforeAllowingDetach, 0x1438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, UnknownData_JBTW, 0x143C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, ClimbingLastAttachedStartedTime, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, UnknownData_4UBJ, 0x1448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, bHasAValidClimbingTarget, 0x144C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Climb, UnknownData_XER4, 0x144D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterWeapon_Climb, 0x1460);
		}

		// Class ShooterGame.ShooterWeapon_MeleeLock
		TEST_METHOD(Class__ShooterGame__ShooterWeapon_MeleeLock)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, LockValue, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, LockVFXValue, 0x0D8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, LastAttackTime, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, LastHitTime, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, HitThisAttack, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, UnknownData_CU3P, 0x0DA1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, LockDecayValue, 0x0DA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, LockHitIncrement, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, LockMissDecrement, 0x0DAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, AnimationRateCurve, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, UnknownData_3WK2, 0x0DB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, MinAnimationRate, 0x0DB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, MaxAnimationRate, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, DamageCurve, 0x0DBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, UnknownData_H6IJ, 0x0DBD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, MinDamageMultiplier, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, MaxDamageMultiplier, 0x0DC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, TargetBuff_MaxDamage, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, OwnerBuff_MaxDamage, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, LockTurnRate, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, MinPullDistance, 0x0DDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, MaxPullDistance, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, MaxTargetDistance, 0x0DE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, TargetAngle, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, MaxLockTime, 0x0DEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, AttackMoveSpeed, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, AttackAirImpulse, 0x0DF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, AttackMoveDuration, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, MaxPowerThreshold, 0x0DFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, UnknownData_EHOE, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, bSteppingEnabled, 0x0E14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_MeleeLock, UnknownData_4Y45, 0x0E15);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterWeapon_MeleeLock, 0x0E18);
		}

		// Class ShooterGame.ShooterWeapon_Whip
		TEST_METHOD(Class__ShooterGame__ShooterWeapon_Whip)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Whip, StunBuff, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Whip, BlockedByShieldBuff, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Whip, HerdDinoBuff, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Whip, HarvestingBoxExtent, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Whip, HarvestingWhipTipOffset, 0x0DAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Whip, MaxDinoDragWeightToApplyBuff, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Whip, MaxFlyerDinoDragWeightToApplyBuff, 0x0DBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Whip, DurabilityMultiplierForFriendDinos, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Whip, DurabilityMultiplierForHarvesting, 0x0DC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Whip, UnknownData_AW85, 0x0DC8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterWeapon_Whip, 0x0DD0);
		}

		// Class ShooterGame.ShooterWeapon_Placer
		TEST_METHOD(Class__ShooterGame__ShooterWeapon_Placer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, StructureToPlace, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, SecondaryActionAnim, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, UnableToPlaceAnim, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, PlaceOnSelfAnim, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, EquipItemAnim, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, UnknownData_5SUD, 0x0DCA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, TimeToHideLeftArmFPV, 0x0DCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, ExplosiveBoneName, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, ItemToPlace3P, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, ItemAttachPoint3P, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, DetonateExplosivesMaxRadius, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, ChangeMaterialDiffrentBehaviour, 0x0DEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, bHiddenExplosive, 0x0DED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, bWaitingForPlacement, 0x0DEE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, UnknownData_RNLO, 0x0DEF);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, PlacementWaitTimeFromEquip, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, MinimumTimeBetweenPlacements, 0x0DF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, LastFireTime, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_Placer, UnknownData_SAPP, 0x0DFC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterWeapon_Placer, 0x0E00);
		}

		// Class ShooterGame.ShooterWeapon_PlacerTransGPS
		TEST_METHOD(Class__ShooterGame__ShooterWeapon_PlacerTransGPS)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_PlacerTransGPS, DeviceMesh1P, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_PlacerTransGPS, DeviceAttachPoint1P, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_PlacerTransGPS, DetonateTransponderMaxRadius, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_PlacerTransGPS, ShowTranspondersCoolDown, 0x0E14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_PlacerTransGPS, FPVBoneNameToHide, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShooterWeapon_PlacerTransGPS, UnknownData_UR6P, 0x0E20);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShooterWeapon_PlacerTransGPS, 0x0E40);
		}

		// Class ShooterGame.PrimalWeaponBow
		TEST_METHOD(Class__ShooterGame__PrimalWeaponBow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, MinimumInitialSpeed, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, MaximumInitialSpeed, 0x0E34);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, PullingTimeForMaximumSpeed, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, DamageFactorForSlowArrows, 0x0E3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, DamageFactorForFastArrows, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, MinimumPullingTimeToFire, 0x0E44);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, UnknownData_ARXN, 0x0E49);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, MaxPullCameraShake, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, ArrowBoneName, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, PullStringAnim, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, UnknownData_9T7S, 0x0E71);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, ArrowOnWeaponAttachPoint3P, 0x0E74);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, UnknownData_N3NB, 0x0E7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, ArrowMesh3P, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, ArrowAttachPoint3P, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, ArrowMesh1P, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, ArrowAttachPoint1P, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, UnknownData_9N7S, 0x0EA2);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, PullingTime, 0x0EA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, ProjectileSpeed, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBow, UnknownData_Z94U, 0x0EAC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalWeaponBow, 0x0EB0);
		}

		// Class ShooterGame.PrimalWeaponBoomerang
		TEST_METHOD(Class__ShooterGame__PrimalWeaponBoomerang)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBoomerang, chanceToBreak, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponBoomerang, UnknownData_X0HX, 0x0EB5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalWeaponBoomerang, 0x0EB8);
		}

		// Class ShooterGame.PrimalWeaponGrapplingHook
		TEST_METHOD(Class__ShooterGame__PrimalWeaponGrapplingHook)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrapplingHook, bDetachGrapHookOnUnequip, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrapplingHook, bPreventReeling, 0x0E31);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrapplingHook, bPullingRope, 0x0E32);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrapplingHook, UnknownData_HQWU, 0x0E33);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrapplingHook, LastTimeWithGrapHook, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrapplingHook, CableAttach1P, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrapplingHook, CableAttach3P, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrapplingHook, ReelInSoundCue, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrapplingHook, ReelOutSoundCue, 0x0E58);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalWeaponGrapplingHook, 0x0E60);
		}

		// Class ShooterGame.PrimalWeaponGrenade
		TEST_METHOD(Class__ShooterGame__PrimalWeaponGrenade)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrenade, PrepareThrowAnim, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrenade, QuickThrowAnim, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrenade, OvercookHurtAnim, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrenade, GrenadeBoneName, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrenade, GrenadePinBoneName, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrenade, MaxGrenadeLife, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrenade, bIsThrowingGrenade, 0x0E75);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrenade, bIsCookingGrenade, 0x0E76);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrenade, bUseBlueprintSpeed, 0x0E77);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrenade, bHideSkeletalMesh, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrenade, UnknownData_7YYO, 0x0E79);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrenade, CookingTime, 0x0E7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrenade, ProjectileOrigin, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrenade, ProjectileShootDir, 0x0E8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrimalWeaponGrenade, UnknownData_1LBQ, 0x0E98);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalWeaponGrenade, 0x0EA0);
		}

		// Class ShooterGame.PrimalWeaponUncookGrenade
		TEST_METHOD(Class__ShooterGame__PrimalWeaponUncookGrenade)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrimalWeaponUncookGrenade, 0x0EA0);
		}

		// Class ShooterGame.SilentDamageType
		TEST_METHOD(Class__ShooterGame__SilentDamageType)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USilentDamageType, 0x0050);
		}

		// Class ShooterGame.SkyBoxLoader
		TEST_METHOD(Class__ShooterGame__SkyBoxLoader)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyBoxLoader, SkyBoxStringReferences, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyBoxLoader, FogScatterStringReferences, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyBoxLoader, FogLossStringReferences, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyBoxLoader, LoadedStatus, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyBoxLoader, LoadedSkyTextures, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyBoxLoader, LoadedFogScatterTextures, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyBoxLoader, LoadedFogLossTextures, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyBoxLoader, UnknownData_26DA, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyBoxLoader, 0x04E0);
		}

		// Class ShooterGame.SOTFNotification
		TEST_METHOD(Class__ShooterGame__SOTFNotification)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, NightBloomMultiplier, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, EffectScale, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, BackgroundOffset, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, UnknownData_4K94, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, BackgroundMesh, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, BackgroundRotation, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, BackgroundMeshScale, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, BackgroundMeshDoubleScale, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, PreviewImageBloom, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, FadeOutInterval, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, FadeInInterval, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, UnknownData_AMED, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, LightBrightness, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, LightRotation, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, GapBetweenPlayerImages, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, BannerEliminationTextColor, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, BannerVictoryTextColor, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, BannerTextBloom, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, BannerTextFontScale, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, BannerTextOffset, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, UnknownData_Q5BG, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, EliminationText, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, VictoryText, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, ScrollingTextFadePower, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, ScrollingTextSpeed, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, ScrollingTextBloom, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, ScrollingTextInterval, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, ScrollingTextOffset, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, ScrollingTextLifeTime, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, ScrollingTextDoubleMultiplier, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, ScrollingTextScale, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, ScrollingTextCount, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, ScrollingTextColor, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, PreviewCameraLocation, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, PreviewCameraRotation, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, PreviewCameraFOV, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, PreviewMeshRotation, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, AmbientSourceType, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, UnknownData_POE6, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, AmbientCubemap, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, AmbientLightColor, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, AmbientBrightness, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, TextFont, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, TextMaterial, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, TextRotation, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, PlayerNameFontSize, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, PlayerNameOffset, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, PlayerNameTextBloom, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, DeathReasonOffset, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, DeathReasonFontSize, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, DeathReasonTextColor, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, DeathReasonTextBloom, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, PlayerNameTextColor, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, UnknownData_JXZ0, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, PlayerImageMesh, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, DeathSound, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, TribeEliminatedSound, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, PlayerDeathMusic1, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, PlayerDeathMusic2, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, TribeEliminationMusic, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, VictoryMusic, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, DefaultNotificationInterval, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, UnknownData_5BVP, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, NotificationsQueue, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, CurrentNotification, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, PreviewCharacter, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, PreviewImages, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotification, UnknownData_V2WI, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASOTFNotification, 0x06B0);
		}

		// Class ShooterGame.SOTFNotificationDisplay
		TEST_METHOD(Class__ShooterGame__SOTFNotificationDisplay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotificationDisplay, NotificationSystem, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotificationDisplay, ScrollableTexts, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotificationDisplay, CachedPlayerImages, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotificationDisplay, BannerText, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotificationDisplay, LastScrollingTextActivationTime, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASOTFNotificationDisplay, UnknownData_C1B2, 0x04B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASOTFNotificationDisplay, 0x04C0);
		}

		// Class ShooterGame.SoundNodeLocalPlayer
		TEST_METHOD(Class__ShooterGame__SoundNodeLocalPlayer)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeLocalPlayer, 0x0038);
		}

		// Class ShooterGame.SoundNodeVehicleEngine
		TEST_METHOD(Class__ShooterGame__SoundNodeVehicleEngine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeVehicleEngine, EngineSamples, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeVehicleEngine, UnknownData_OXRD, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeVehicleEngine, CurrentRPM, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeVehicleEngine, UnknownData_K2LI, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeVehicleEngine, 0x0058);
		}

		// Class ShooterGame.StatWidget
		TEST_METHOD(Class__ShooterGame__StatWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatWidget, StatName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatWidget, UnknownData_QB9M, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatWidget, StatIcon, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatWidget, UnknownData_8VS8, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatWidget, StatTextBlockName, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatWidget, StatValueBlockName, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatWidget, StatImageName, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatWidget, StatBarName, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatWidget, StatButtonName, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatWidget, UnknownData_SKZL, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatWidget, StatUpgradeButton, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatWidget, PulsatingSwitcher, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatWidget, 0x02E0);
		}

		// Class ShooterGame.StructurePaintingComponent
		TEST_METHOD(Class__ShooterGame__StructurePaintingComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructurePaintingComponent, UnknownData_76VK, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructurePaintingComponent, PaintingSizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructurePaintingComponent, PaintingSizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructurePaintingComponent, ColorTable, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructurePaintingComponent, PaintingTextureUVIndex, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructurePaintingComponent, PaintingRevision, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructurePaintingComponent, UniquePaintingId, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructurePaintingComponent, PreviewCameraRotation, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructurePaintingComponent, PreviewCameraPivotOffset, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructurePaintingComponent, PreviewCameraDistanceScaleFactor, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructurePaintingComponent, PreviewCameraDefaultZoomMultiplier, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructurePaintingComponent, PreviewCameraMaxZoomMultiplier, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructurePaintingComponent, UnknownData_MXM8, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructurePaintingComponent, OnPaintingTextureSet, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructurePaintingComponent, UnknownData_G9VV, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructurePaintingComponent, 0x0178);
		}

		// Class ShooterGame.StructurePreventionZoneVolume
		TEST_METHOD(Class__ShooterGame__StructurePreventionZoneVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AStructurePreventionZoneVolume, UnknownData_27OC, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStructurePreventionZoneVolume, OnlyAllowStructuresOfType, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStructurePreventionZoneVolume, UnknownData_U98N, 0x04BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStructurePreventionZoneVolume, StructureDamageMultiplier, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStructurePreventionZoneVolume, ForcePreventStructuresWithTheseTags, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStructurePreventionZoneVolume, PreventUsingWeapons, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStructurePreventionZoneVolume, 0x04E0);
		}

		// Class ShooterGame.StructuresPlus
		TEST_METHOD(Class__ShooterGame__StructuresPlus)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructuresPlus, 0x0028);
		}

		// Class ShooterGame.SupplyCrateSpawningVolume
		TEST_METHOD(Class__ShooterGame__SupplyCrateSpawningVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, LinkedSupplyCrateEntries, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, UnknownData_FI5Q, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, LinkedSpawnPointEntries, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, UnknownData_D9FW, 0x04D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, MaxNumCrates, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, DelayBeforeFirstCrate, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, MaxDelayBeforeFirstCrate, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, ZoneVolumeMaxNumberOfNPCBuffer, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, IntervalBetweenCrateSpawns, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, MaxIntervalBetweenCrateSpawns, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, IntervalBetweenMaxedCrateSpawns, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, MaxIntervalBetweenMaxedCrateSpawns, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, SP_IntervalBetweenCrateSpawns, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, SP_MaxIntervalBetweenCrateSpawns, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, SP_IntervalBetweenMaxedCrateSpawns, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, SP_MaxIntervalBetweenMaxedCrateSpawns, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, SP_NoValidSpawnRecheckInterval, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, SP_DelayBeforeFirstCrate, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, SP_MaxDelayBeforeFirstCrate, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, MinCrateDistanceFromPlayer, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, MinCrateDistanceFromStructure, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, NoValidSpawnReCheckInterval, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, MinTimeBetweenCrateSpawnsAtSamePoint, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, MinDistanceFromOtherCrate, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, CrateSpawningRequiresLoadedSublevel, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, bForceRandomSupplyCratePoints, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, UnknownData_KO50, 0x052D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningVolume, MyCrates, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASupplyCrateSpawningVolume, 0x0540);
		}

		// Class ShooterGame.SupplyCrateSpawningSettings
		TEST_METHOD(Class__ShooterGame__SupplyCrateSpawningSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningSettings, LinkedSupplyCrateEntries, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningSettings, UnknownData_6C5J, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningSettings, MaxNumCrates, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningSettings, DelayBeforeFirstCrate, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningSettings, MaxDelayBeforeFirstCrate, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningSettings, ZoneVolumeMaxNumberOfNPCBuffer, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningSettings, IntervalBetweenCrateSpawns, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningSettings, MaxIntervalBetweenCrateSpawns, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningSettings, IntervalBetweenMaxedCrateSpawns, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningSettings, MaxIntervalBetweenMaxedCrateSpawns, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningSettings, MinCrateDistanceFromPlayer, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningSettings, MinCrateDistanceFromStructure, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningSettings, NoValidSpawnReCheckInterval, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningSettings, MinTimeBetweenCrateSpawnsAtSamePoint, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupplyCrateSpawningSettings, UnknownData_2UZ6, 0x04AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASupplyCrateSpawningSettings, 0x04B0);
		}

		// Class ShooterGame.TargetArea
		TEST_METHOD(Class__ShooterGame__TargetArea)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATargetArea, Radius, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATargetArea, UnknownData_95DU, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATargetArea, MySphereComponent, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATargetArea, 0x0478);
		}

		// Class ShooterGame.TestItemWidget
		TEST_METHOD(Class__ShooterGame__TestItemWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestItemWidget, ItemLabelName, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestItemWidget, 0x0250);
		}

		// Class ShooterGame.TickingHelperComponent
		TEST_METHOD(Class__ShooterGame__TickingHelperComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTickingHelperComponent, ThrottledTickTimeRange, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTickingHelperComponent, InitWithTickGroup, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTickingHelperComponent, bUsePerFrameTickEvents, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTickingHelperComponent, bUseThrottledTickEvents, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTickingHelperComponent, UnknownData_1B8D, 0x00E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTickingHelperComponent, OnPerFrameTickEvent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTickingHelperComponent, OnThrottledTickEvent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTickingHelperComponent, UnknownData_BIY6, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTickingHelperComponent, 0x0118);
		}

		// Class ShooterGame.TogglePainVolume
		TEST_METHOD(Class__ShooterGame__TogglePainVolume)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, UnknownData_F1Q9, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, bEnabled, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, UnknownData_94HM, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, ActorClassesToExclude, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, ActorClassesToInclude, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, ToggleEmitters, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, StructureDamageOverlapPoints, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, StructureDamageOverlapRadius, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, UnknownData_2MY8, 0x053D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, DamagePerSec, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, StructureDamagePerSec, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, DamageType, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, StructureDamageType, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, PainInterval, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, UnknownData_71JV, 0x055D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, DamageInstigator, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, BeginOverlapEvent, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, EndOverlapEvent, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, CausedPainEvent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, DelayTogglePainActive, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATogglePainVolume, UnknownData_ZXCX, 0x059C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATogglePainVolume, 0x05A0);
		}

		// Class ShooterGame.ToolTipWidget
		TEST_METHOD(Class__ShooterGame__ToolTipWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidget, ToolTipLabelName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidget, WidgetWidth, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidget, WidgetHeight, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidget, UnknownData_ETIG, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidget, bUseBPInitToolTip, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidget, bUseBPUpdateToolTip, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidget, UnknownData_86RK, 0x0266);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolTipWidget, 0x02A8);
		}

		// Class ShooterGame.MissionDispatcherToolTipWidget
		TEST_METHOD(Class__ShooterGame__MissionDispatcherToolTipWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionDispatcherToolTipWidget, MissionNameLabelName, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionDispatcherToolTipWidget, TitleLabelName, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionDispatcherToolTipWidget, MissionStatusLabelName, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMissionDispatcherToolTipWidget, UnknownData_1GZA, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMissionDispatcherToolTipWidget, 0x0300);
		}

		// Class ShooterGame.PrimalDinoToolTipWidget
		TEST_METHOD(Class__ShooterGame__PrimalDinoToolTipWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, DinoNameLabelName, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, TamedLabelName, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, GenderLabelName, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, InfoLabelName, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, InfoLabel2Name, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, DinoIconImageName, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, DinoUnconsciousPanelName, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, DinoTamingPanelName, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, TorpidityProgressBarName, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, CustomProgressBarName, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, TamingProgressBarName, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, HealthBarName, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, StaminaBarName, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, FoodBarName, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, WeightBarName, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, XPBarName, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, TorpidityBarName, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, OxygenBarName, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, DamageBarName, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, SpeedBarName, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, bShowExtendedInfo, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, UnknownData_2QUQ, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, FemaleColor, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, MaleColor, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, NoGenderColor, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, UnknownData_2Y9J, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, FoodBarDefaultBackground, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalDinoToolTipWidget, FoodBarDefaultForeground, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalDinoToolTipWidget, 0x04A0);
		}

		// Class ShooterGame.PrimalEggToolTipWidget
		TEST_METHOD(Class__ShooterGame__PrimalEggToolTipWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEggToolTipWidget, TemperatureColor_Perfect, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEggToolTipWidget, TemperatureColor_Boosted, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEggToolTipWidget, TemperatureColor_Cool, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEggToolTipWidget, TemperatureColor_TooCold, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEggToolTipWidget, TemperatureColor_Warm, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEggToolTipWidget, TemperatureColor_TooHot, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEggToolTipWidget, GenderColor_Female, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEggToolTipWidget, GenderColor_Male, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEggToolTipWidget, GenderColor_Unknown, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEggToolTipWidget, GenderIcon_Female, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEggToolTipWidget, GenderIcon_Male, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEggToolTipWidget, GenderIcon_Unknown, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEggToolTipWidget, RightColumnWidth, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEggToolTipWidget, TemperatureGaugeTotalDegreesToDisplay, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEggToolTipWidget, TemperatureGaugeIndicatorHorizontalOffset, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalEggToolTipWidget, UnknownData_1WNR, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalEggToolTipWidget, 0x0510);
		}

		// Class ShooterGame.PrimalItemToolTipWidget
		TEST_METHOD(Class__ShooterGame__PrimalItemToolTipWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemNameLabelName, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemQuantityLabelName, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemDescriptionLabelName, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemTypeLabelName, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemSubTypeLabelName, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemIconImageName, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemWeightLabelName, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemStatsLabelName, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemDurabilityLabelName, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemQualityImageName, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemSubtypePanelName, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemStatsPanelName, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemCraftingPanelName, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemCraftingRequirementsLabelName, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemCraftingTitleLabelName, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemCraftingQueueLabelName, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemCraftingProgressBarName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemCraftRepairInvReqLabelName, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, SpoilIntoItemPanelName, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, SpoilIntoItemNameLabelName, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, SpoilIntoItemTimeLabelName, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, SpoilIntoItemIconName, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, EngramBg, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, BlueprintBg, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, TekgramBg, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, ItemQualityOverlay, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemToolTipWidget, UnknownData_9ODF, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalItemToolTipWidget, 0x04F0);
		}

		// Class ShooterGame.ToolTipWidgetPrimalStructureModuleItemsToDisplayListItem
		TEST_METHOD(Class__ShooterGame__ToolTipWidgetPrimalStructureModuleItemsToDisplayListItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalStructureModuleItemsToDisplayListItem, UnknownData_934P, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolTipWidgetPrimalStructureModuleItemsToDisplayListItem, 0x0250);
		}

		// Class ShooterGame.ToolTipWidgetPrimalStructureModuleItemsToDisplay
		TEST_METHOD(Class__ShooterGame__ToolTipWidgetPrimalStructureModuleItemsToDisplay)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalStructureModuleItemsToDisplay, DisplayItemListEntryTemplate, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipWidgetPrimalStructureModuleItemsToDisplay, UnknownData_5S0Q, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolTipWidgetPrimalStructureModuleItemsToDisplay, 0x0258);
		}

		// Class ShooterGame.PrimalStructureToolTipWidget
		TEST_METHOD(Class__ShooterGame__PrimalStructureToolTipWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalStructureToolTipWidget, ItemsToDisplayModuleTemplate, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalStructureToolTipWidget, UnknownData_BGM6, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalStructureToolTipWidget, 0x0308);
		}

		// Class ShooterGame.TargetingInfoToolTipWidget
		TEST_METHOD(Class__ShooterGame__TargetingInfoToolTipWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetingInfoToolTipWidget, UnknownData_JNZK, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTargetingInfoToolTipWidget, 0x02F8);
		}

		// Class ShooterGame.TooltipSmartLayoutWidget
		TEST_METHOD(Class__ShooterGame__TooltipSmartLayoutWidget)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTooltipSmartLayoutWidget, 0x02A8);
		}

		// Class ShooterGame.DinoListItemTooltip
		TEST_METHOD(Class__ShooterGame__DinoListItemTooltip)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UDinoListItemTooltip, fnameTitleBar_NameLabel, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDinoListItemTooltip, fnameTitleBar_LevelLabel, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDinoListItemTooltip, fnameInfo_ImageName, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDinoListItemTooltip, fnameInfo_LabelNames, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDinoListItemTooltip, fnameInfo_GroupNames, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDinoListItemTooltip, Info_GroupFreq, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDinoListItemTooltip, UnknownData_4GL8, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDinoListItemTooltip, EnabledDinoTexture, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDinoListItemTooltip, EnabledDinoMaterial, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDinoListItemTooltip, 0x0458);
		}

		// Class ShooterGame.PrimalCryopodTooltipWidget
		TEST_METHOD(Class__ShooterGame__PrimalCryopodTooltipWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCryopodTooltipWidget, FemaleIcon, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCryopodTooltipWidget, MaleIcon, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCryopodTooltipWidget, FemaleColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCryopodTooltipWidget, MaleColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalCryopodTooltipWidget, UnknownData_UE9G, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalCryopodTooltipWidget, 0x0430);
		}

		// Class ShooterGame.PrimalItemInventoryToolTipWidget
		TEST_METHOD(Class__ShooterGame__PrimalItemInventoryToolTipWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameTitleBar_EngramTypeLabel, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameTitleBar_EngramTypeSeparator, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameTitleBar_ItemNameLabel, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameTitleBar_ItemTypeSeparator, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameTitleBar_ItemTypeLabel, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameTitleBar_ItemQualitySeparator, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameTitleBar_ItemQualityLabel, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameMainInfo_Switcher, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameMainInfo_Full_Icon, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameMainInfo_Full_DescriptionLabel, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameMainInfo_DescOnly_DescriptionLabel, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameGeneral_LabelNames, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameGeneral_GroupNames, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, General_GroupFreq, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, UnknownData_IAP1, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameStat_LabelNames, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameStat_GroupNames, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, Stat_GroupFreq, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameCraftPanel, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameCraftTitleLabel, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, UnknownData_RCBN, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameCraft_RequirementLabels, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameCraft_RequirementIcons, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, fnameCraft_GroupNames, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, Craft_GroupFreq, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, UnknownData_KAHU, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, Craft_RequirementsMet, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, Craft_RequirementsUnmet, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, NormalTextColor, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, EngramBg, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, BlueprintBg, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, TekgramBg, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, ItemQualityOverlay, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimalItemInventoryToolTipWidget, UnknownData_X5FY, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimalItemInventoryToolTipWidget, 0x0540);
		}

		// Class ShooterGame.UI_Compass
		TEST_METHOD(Class__ShooterGame__UI_Compass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, UnknownData_HZHA, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, LatitudeOrigin, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, LatitudeScale, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, LongitudeOrigin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, LongitudeScale, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, CompassNorthAngle, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, CompassInterpSpeed, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, SwingSpeed, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, MaxSwingAngle, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, CurrentCompassAngle, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, CurrentSwingAngle, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, CurrentSwingFactor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, CurrentSwingTime, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, CompassCenterParameterName, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, PreviousPawnYaw, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, UnknownData_D3VK, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, CompassMI, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, CompassMID, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, buffRequiredForVisibility, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, longitudeText, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, latitudeText, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass, UnknownData_UMNO, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Compass, 0x02D0);
		}

		// Class ShooterGame.VRBattleGroupDataAsset
		TEST_METHOD(Class__ShooterGame__VRBattleGroupDataAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRBattleGroupDataAsset, Units, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRBattleGroupDataAsset, bForceSpawnEntireGroup, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRBattleGroupDataAsset, UnknownData_E7RI, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRBattleGroupDataAsset, 0x0040);
		}

		// Class ShooterGame.WaterVolumeWithFlow
		TEST_METHOD(Class__ShooterGame__WaterVolumeWithFlow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterVolumeWithFlow, CellSize, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterVolumeWithFlow, FlowMagnitudeMinMax, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterVolumeWithFlow, UnknownData_PGX5, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterVolumeWithFlow, GridIDs, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterVolumeWithFlow, FlowVectors, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterVolumeWithFlow, bHasValidGridSize, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterVolumeWithFlow, UnknownData_2J4D, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterVolumeWithFlow, CachedGridSize, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterVolumeWithFlow, UnknownData_AHEF, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterVolumeWithFlow, BuffsToApply, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterVolumeWithFlow, UnknownData_QHGS, 0x0561);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWaterVolumeWithFlow, 0x0568);
		}

		// Class ShooterGame.WorldBuffEntryWidget
		TEST_METHOD(Class__ShooterGame__WorldBuffEntryWidget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldBuffEntryWidget, DefaultDisplayTime, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldBuffEntryWidget, ExpiringSoonDisplayTime, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldBuffEntryWidget, UnknownData_1HGA, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldBuffEntryWidget, 0x0300);
		}

		// Class ShooterGame.WorldModifiersContainer
		TEST_METHOD(Class__ShooterGame__WorldModifiersContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldModifiersContainer, WorldModifiers, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldModifiersContainer, 0x0038);
		}

		// Class AIModule.AIController
		TEST_METHOD(Class__AIModule__AIController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_E6EZ, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_CYFW, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, BrainComponent, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PerceptionComponent, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, MoveTowardTargetOffset, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, TargetFocalPositionOffset, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ReachedDestinationThresholdOffset, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, MovementGoalHeight, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ReceiveMoveCompleted, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_8BS3, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_TS99, 0x0591);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController, 0x0598);
		}

		// Class AIModule.BTNode
		TEST_METHOD(Class__AIModule__BTNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, NodeName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, TreeAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, ParentNode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_3GQT, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTNode, 0x0050);
		}

		// Class AIModule.BTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTAuxiliaryNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTAuxiliaryNode, UnknownData_DYKH, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTAuxiliaryNode, 0x0058);
		}

		// Class AIModule.BTService
		TEST_METHOD(Class__AIModule__BTService)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, Interval, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, RandomDeviation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, UnknownData_JFPC, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService, 0x0068);
		}

		// Class AIModule.BehaviorTreeTypes
		TEST_METHOD(Class__AIModule__BehaviorTreeTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeTypes, 0x0028);
		}

		// Class AIModule.BTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_BlackboardBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlackboardBase, BlackboardKey, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlackboardBase, 0x0090);
		}

		// Class AIModule.BTTaskNode
		TEST_METHOD(Class__AIModule__BTTaskNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, UnknownData_QZ97, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTaskNode, 0x0058);
		}

		// Class AIModule.BTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_BlackboardBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlackboardBase, BlackboardKey, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlackboardBase, 0x0080);
		}

		// Class AIModule.AIResourceInterface
		TEST_METHOD(Class__AIModule__AIResourceInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResourceInterface, 0x0028);
		}

		// Class AIModule.AIAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AIModule__AIAsyncTaskBlueprintProxy)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnFail, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, UnknownData_10LJ, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIAsyncTaskBlueprintProxy, 0x0060);
		}

		// Class AIModule.AIBlueprintHelperLibrary
		TEST_METHOD(Class__AIModule__AIBlueprintHelperLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIBlueprintHelperLibrary, 0x0028);
		}

		// Class AIModule.PawnActionsComponent
		TEST_METHOD(Class__AIModule__PawnActionsComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ControlledPawn, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionStacks, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionEvents, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, CurrentAction, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, UnknownData_OLFG, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnActionsComponent, 0x0110);
		}

		// Class AIModule.AIPerceptionListenerInterface
		TEST_METHOD(Class__AIModule__AIPerceptionListenerInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionListenerInterface, 0x0028);
		}

		// Class AIModule.AISystem
		TEST_METHOD(Class__AIModule__AISystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, BehaviorTreeManager, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, EnvironmentQueryManager, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystem, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AllProxyObjects, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystem, 0x0068);
		}

		// Class AIModule.AIPerceptionSystem
		TEST_METHOD(Class__AIModule__AIPerceptionSystem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_CX15, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, Senses, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, PerceptionAgingRate, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_815X, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionSystem, 0x00B8);
		}

		// Class AIModule.AIPerceptionComponent
		TEST_METHOD(Class__AIModule__AIPerceptionComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, HearingRange, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, LOSHearingRange, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, SightRadius, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, LoseSightRadius, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, PeripheralVisionAngle, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_51WJ, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, AIOwner, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_5MS8, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, DominantSense, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_P0N5, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionComponent, 0x0188);
		}

		// Class AIModule.AISense
		TEST_METHOD(Class__AIModule__AISense)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, PerceptionSystemInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_CIRT, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense, 0x0050);
		}

		// Class AIModule.AISense_Damage
		TEST_METHOD(Class__AIModule__AISense_Damage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Damage, RegisteredEvents, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Damage, 0x0060);
		}

		// Class AIModule.AISense_Hearing
		TEST_METHOD(Class__AIModule__AISense_Hearing)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, NoiseEvents, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Hearing, 0x0060);
		}

		// Class AIModule.AISense_Prediction
		TEST_METHOD(Class__AIModule__AISense_Prediction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Prediction, RegisteredEvents, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Prediction, 0x0060);
		}

		// Class AIModule.AISense_Sight
		TEST_METHOD(Class__AIModule__AISense_Sight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_NG7Q, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTracesPerTick, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, HighImportanceQueryDistanceThreshold, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_NP3F, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxQueryImportance, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, SightLimitQueryImportance, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_EIJM, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Sight, 0x00C8);
		}

		// Class AIModule.AISense_Team
		TEST_METHOD(Class__AIModule__AISense_Team)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Team, RegisteredEvents, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Team, 0x0060);
		}

		// Class AIModule.AISense_Touch
		TEST_METHOD(Class__AIModule__AISense_Touch)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Touch, RegisteredEvents, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Touch, 0x0060);
		}

		// Class AIModule.AISightTargetInterface
		TEST_METHOD(Class__AIModule__AISightTargetInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISightTargetInterface, 0x0028);
		}

		// Class AIModule.BrainComponent
		TEST_METHOD(Class__AIModule__BrainComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_RYT2, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, BlackboardComp, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, AIOwner, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_6U53, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrainComponent, 0x0118);
		}

		// Class AIModule.BehaviorTreeComponent
		TEST_METHOD(Class__AIModule__BehaviorTreeComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_Y2PD, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, NodeInstances, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_0GKQ, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeComponent, 0x01F0);
		}

		// Class AIModule.BTCompositeNode
		TEST_METHOD(Class__AIModule__BTCompositeNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Children, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Services, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_BH37, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTCompositeNode, 0x0080);
		}

		// Class AIModule.BehaviorTree
		TEST_METHOD(Class__AIModule__BehaviorTree)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootNode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, BlackboardAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecorators, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecoratorOps, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_4KP7, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTree, 0x0060);
		}

		// Class AIModule.BehaviorTreeManager
		TEST_METHOD(Class__AIModule__BehaviorTreeManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, MaxDebuggerSteps, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, UnknownData_JYM8, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, LoadedTemplates, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, ActiveComponents, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeManager, 0x0050);
		}

		// Class AIModule.BlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType, UnknownData_UDOA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType, 0x0030);
		}

		// Class AIModule.BlackboardData
		TEST_METHOD(Class__AIModule__BlackboardData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Parent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Keys, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, UnknownData_9TW0, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardData, 0x0048);
		}

		// Class AIModule.BlackboardComponent
		TEST_METHOD(Class__AIModule__BlackboardComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BrainComp, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BlackboardAsset, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_IFSX, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardComponent, 0x0170);
		}

		// Class AIModule.BlackboardKeyType_Bool
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Bool)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Bool, 0x0030);
		}

		// Class AIModule.BlackboardKeyType_Class
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Class)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Class, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Class, 0x0038);
		}

		// Class AIModule.BlackboardKeyType_Enum
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Enum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumType, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Enum, 0x0038);
		}

		// Class AIModule.BlackboardKeyType_Float
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Float)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Float, 0x0030);
		}

		// Class AIModule.BlackboardKeyType_Int
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Int)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Int, 0x0030);
		}

		// Class AIModule.BlackboardKeyType_Name
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Name)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Name, 0x0030);
		}

		// Class AIModule.BlackboardKeyType_NativeEnum
		TEST_METHOD(Class__AIModule__BlackboardKeyType_NativeEnum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, bIsEnumNameValid, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, UnknownData_8JG8, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumType, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_NativeEnum, 0x0050);
		}

		// Class AIModule.BlackboardKeyType_Object
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Object)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Object, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Object, 0x0038);
		}

		// Class AIModule.BlackboardKeyType_Rotator
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Rotator)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Rotator, 0x0030);
		}

		// Class AIModule.BlackboardKeyType_String
		TEST_METHOD(Class__AIModule__BlackboardKeyType_String)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_String, 0x0030);
		}

		// Class AIModule.BlackboardKeyType_Vector
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Vector)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Vector, 0x0030);
		}

		// Class AIModule.BTFunctionLibrary
		TEST_METHOD(Class__AIModule__BTFunctionLibrary)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTFunctionLibrary, 0x0028);
		}

		// Class AIModule.BTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_LZGR, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, FlowAbortMode, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_L9ND, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator, 0x0060);
		}

		// Class AIModule.BTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_BlackboardBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlackboardBase, BlackboardKey, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlackboardBase, UnknownData_XM5E, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlackboardBase, 0x0090);
		}

		// Class AIModule.BTDecorator_Blackboard
		TEST_METHOD(Class__AIModule__BTDecorator_Blackboard)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, IntValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, FloatValue, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, StringValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, CachedDescription, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, OperationType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, NotifyObserver, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, UnknownData_Q3WP, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Blackboard, 0x00C0);
		}

		// Class AIModule.BTDecorator_ConditionalLoop
		TEST_METHOD(Class__AIModule__BTDecorator_ConditionalLoop)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConditionalLoop, 0x00C0);
		}

		// Class AIModule.BTDecorator_BlueprintBase
		TEST_METHOD(Class__AIModule__BTDecorator_BlueprintBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_DCWI, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_6BN9, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlueprintBase, 0x0090);
		}

		// Class AIModule.BTDecorator_CompareBBEntries
		TEST_METHOD(Class__AIModule__BTDecorator_CompareBBEntries)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, Operator, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, UnknownData_Q6U6, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, UnknownData_9C7T, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CompareBBEntries, 0x00C0);
		}

		// Class AIModule.BTDecorator_ConeCheck
		TEST_METHOD(Class__AIModule__BTDecorator_ConeCheck)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeHalfAngle, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_UJNE, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeOrigin, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeDirection, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, Observed, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_XPL8, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConeCheck, 0x00E8);
		}

		// Class AIModule.BTDecorator_Cooldown
		TEST_METHOD(Class__AIModule__BTDecorator_Cooldown)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, CoolDownTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, UnknownData_QIZ8, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, CoolDownTimeKey, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Cooldown, 0x0090);
		}

		// Class AIModule.BTDecorator_DoesPathExist
		TEST_METHOD(Class__AIModule__BTDecorator_DoesPathExist)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyA, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyB, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_W73N, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, PathQueryType, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_6C89, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, FilterClass, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_DoesPathExist, 0x00C0);
		}

		// Class AIModule.BTDecorator_ForceSuccess
		TEST_METHOD(Class__AIModule__BTDecorator_ForceSuccess)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ForceSuccess, 0x0060);
		}

		// Class AIModule.BTDecorator_KeepInCone
		TEST_METHOD(Class__AIModule__BTDecorator_KeepInCone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeHalfAngle, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_35ZL, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeOrigin, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, Observed, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_Y8AB, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_KeepInCone, 0x00C0);
		}

		// Class AIModule.BTDecorator_Loop
		TEST_METHOD(Class__AIModule__BTDecorator_Loop)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, NumLoops, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, bInfiniteLoop, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_6NO1, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Loop, 0x0068);
		}

		// Class AIModule.BTDecorator_ReachedMoveGoal
		TEST_METHOD(Class__AIModule__BTDecorator_ReachedMoveGoal)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ReachedMoveGoal, 0x0060);
		}

		// Class AIModule.BTDecorator_TimeLimit
		TEST_METHOD(Class__AIModule__BTDecorator_TimeLimit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, TimeLimit, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, UnknownData_LF0J, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, TimeLimitKey, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TimeLimit, 0x0090);
		}

		// Class AIModule.BTService_DefaultFocus
		TEST_METHOD(Class__AIModule__BTService_DefaultFocus)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_DefaultFocus, 0x0090);
		}

		// Class AIModule.BTService_BlueprintBase
		TEST_METHOD(Class__AIModule__BTService_BlueprintBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_20DS, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_NLAW, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlueprintBase, 0x0080);
		}

		// Class AIModule.BTComposite_Selector
		TEST_METHOD(Class__AIModule__BTComposite_Selector)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Selector, 0x0080);
		}

		// Class AIModule.BTComposite_Sequence
		TEST_METHOD(Class__AIModule__BTComposite_Sequence)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Sequence, 0x0080);
		}

		// Class AIModule.BTComposite_SimpleParallel
		TEST_METHOD(Class__AIModule__BTComposite_SimpleParallel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, FinishMode, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, UnknownData_TTQM, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_SimpleParallel, 0x0088);
		}

		// Class AIModule.BTTask_MoveDirectlyToward
		TEST_METHOD(Class__AIModule__BTTask_MoveDirectlyToward)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveDirectlyToward, AcceptableRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveDirectlyToward, UnknownData_CZJW, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveDirectlyToward, AcceptableRadiusKey, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveDirectlyToward, 0x00B0);
		}

		// Class AIModule.BTTask_MoveTo
		TEST_METHOD(Class__AIModule__BTTask_MoveTo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, AcceptableRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_BLIZ, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, FilterClass, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_WJ5V, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveTo, 0x0098);
		}

		// Class AIModule.BTTask_RotateToFaceBBEntry
		TEST_METHOD(Class__AIModule__BTTask_RotateToFaceBBEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, Precision, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, UnknownData_H4DP, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, PrecisionKey, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, UnknownData_XKKP, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RotateToFaceBBEntry, 0x00B8);
		}

		// Class AIModule.EnvQueryItemType
		TEST_METHOD(Class__AIModule__EnvQueryItemType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryItemType, UnknownData_89T4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType, 0x0030);
		}

		// Class AIModule.EnvQueryTypes
		TEST_METHOD(Class__AIModule__EnvQueryTypes)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTypes, 0x0028);
		}

		// Class AIModule.BTTask_RunEQSQuery
		TEST_METHOD(Class__AIModule__BTTask_RunEQSQuery)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryTemplate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryParams, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunEQSQuery, 0x0098);
		}

		// Class AIModule.BTTask_BlueprintBase
		TEST_METHOD(Class__AIModule__BTTask_BlueprintBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_C8V2, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_08IP, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlueprintBase, 0x0078);
		}

		// Class AIModule.BTTask_MakeNoise
		TEST_METHOD(Class__AIModule__BTTask_MakeNoise)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, Loudnes, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, UnknownData_RO8W, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MakeNoise, 0x0060);
		}

		// Class AIModule.BTTask_PlaySound
		TEST_METHOD(Class__AIModule__BTTask_PlaySound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlaySound, SoundToPlay, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlaySound, 0x0060);
		}

		// Class AIModule.BTTask_RunBehavior
		TEST_METHOD(Class__AIModule__BTTask_RunBehavior)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehavior, BehaviorAsset, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehavior, ControllerProperty, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehavior, 0x0070);
		}

		// Class AIModule.BTTask_Wait
		TEST_METHOD(Class__AIModule__BTTask_Wait)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, WaitTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, UnknownData_OOTK, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Wait, 0x0060);
		}

		// Class AIModule.CrowdAgentInterface
		TEST_METHOD(Class__AIModule__CrowdAgentInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdAgentInterface, 0x0028);
		}

		// Class AIModule.EnvQuery
		TEST_METHOD(Class__AIModule__EnvQuery)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, Options, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQuery, 0x0038);
		}

		// Class AIModule.EnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext, 0x0028);
		}

		// Class AIModule.EnvQueryContext_BlueprintBase
		TEST_METHOD(Class__AIModule__EnvQueryContext_BlueprintBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryContext_BlueprintBase, UnknownData_NXUD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_BlueprintBase, 0x0030);
		}

		// Class AIModule.EnvQueryContext_Item
		TEST_METHOD(Class__AIModule__EnvQueryContext_Item)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Item, 0x0028);
		}

		// Class AIModule.EnvQueryContext_Querier
		TEST_METHOD(Class__AIModule__EnvQueryContext_Querier)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Querier, 0x0028);
		}

		// Class AIModule.VisualLoggerExtension
		TEST_METHOD(Class__AIModule__VisualLoggerExtension)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerExtension, 0x0028);
		}

		// Class AIModule.EnvQueryDebugHelpers
		TEST_METHOD(Class__AIModule__EnvQueryDebugHelpers)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryDebugHelpers, 0x0028);
		}

		// Class AIModule.EnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, OptionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, UnknownData_4XAM, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator, 0x0040);
		}

		// Class AIModule.EnvQueryGenerator_ActorsOfClass
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ActorsOfClass)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, Radius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, UnknownData_WDRY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchedActorClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchCenter, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ActorsOfClass, 0x0060);
		}

		// Class AIModule.EnvQueryGenerator_BlueprintBase
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_BlueprintBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, Radius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, UnknownData_CILS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratorsActionDescription, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, UnknownData_IJJ7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, Context, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratedItemType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, UnknownData_HNUH, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_BlueprintBase, 0x0090);
		}

		// Class AIModule.EnvQueryGenerator_Composite
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Composite)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, Generators, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Composite, 0x0050);
		}

		// Class AIModule.EnvQueryGenerator_PathingGrid
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_PathingGrid)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, MaxPathDistance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, Density, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, PathFromContext, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, UnknownData_366A, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, GenerateAround, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, TraceType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, UnknownData_6JOE, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, NavigationFilter, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_PathingGrid, 0x0080);
		}

		// Class AIModule.EnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ProjectedPoints)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ProjectedPoints, ProjectionData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ProjectedPoints, 0x0068);
		}

		// Class AIModule.EnvQueryGenerator_OnCircle
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_OnCircle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, Radius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ItemSpacing, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcDirection, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, Angle, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, AngleRadians, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, TraceData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_GBDV, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_OnCircle, 0x00E8);
		}

		// Class AIModule.EnvQueryGenerator_SimpleGrid
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_SimpleGrid)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, Radius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, Density, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GenerateAround, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_SimpleGrid, 0x0088);
		}

		// Class AIModule.EnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_VectorBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_VectorBase, 0x0030);
		}

		// Class AIModule.EnvQueryItemType_ActorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_ActorBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_ActorBase, 0x0030);
		}

		// Class AIModule.EnvQueryItemType_Actor
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Actor)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Actor, 0x0030);
		}

		// Class AIModule.EnvQueryItemType_Direction
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Direction)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Direction, 0x0030);
		}

		// Class AIModule.EnvQueryItemType_Point
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Point)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Point, 0x0030);
		}

		// Class AIModule.EnvQueryManager
		TEST_METHOD(Class__AIModule__EnvQueryManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_5H0U, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryManager, 0x0058);
		}

		// Class AIModule.EnvQueryOption
		TEST_METHOD(Class__AIModule__EnvQueryOption)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Tests, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryOption, 0x0040);
		}

		// Class AIModule.EnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestPurpose, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FilterType, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_YCVI, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, BoolFilter, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatFilter, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatFilterMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatFilterMax, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, bFormatUpdated, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, Condition, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, WeightModifier, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_S5T8, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMinType, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMaxType, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_JDKS, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampingMin, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampingMax, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringEquation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_C2ZN, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, Weight, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_EU8D, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_UGMH, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest, 0x00A0);
		}

		// Class AIModule.EnvQueryTest_Distance
		TEST_METHOD(Class__AIModule__EnvQueryTest_Distance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, TestMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, UnknownData_PG0B, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, DistanceTo, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Distance, 0x00B0);
		}

		// Class AIModule.EnvQueryTest_Dot
		TEST_METHOD(Class__AIModule__EnvQueryTest_Dot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineA, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineB, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Dot, 0x00E0);
		}

		// Class AIModule.EnvQueryTest_Pathfinding
		TEST_METHOD(Class__AIModule__EnvQueryTest_Pathfinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, TestMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, UnknownData_1540, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, Context, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, PathToItem, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, DiscardUnreachable, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, HierarchicalPathfinding, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, UnknownData_XMLA, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Pathfinding, 0x00D8);
		}

		// Class AIModule.EnvQueryTest_Trace
		TEST_METHOD(Class__AIModule__EnvQueryTest_Trace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceData, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceToItem, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ItemOffsetZ, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ContextOffsetZ, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, UnknownData_B212, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, Context, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Trace, 0x00F8);
		}

		// Class AIModule.EQSQueryResultSourceInterface
		TEST_METHOD(Class__AIModule__EQSQueryResultSourceInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSQueryResultSourceInterface, 0x0028);
		}

		// Class AIModule.EQSRenderingComponent
		TEST_METHOD(Class__AIModule__EQSRenderingComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSRenderingComponent, UnknownData_DHZZ, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSRenderingComponent, 0x0680);
		}

		// Class AIModule.EQSTestingPawn
		TEST_METHOD(Class__AIModule__EQSTestingPawn)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryTemplate, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryParams, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, TimeLimitPerStep, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, StepToDebugDraw, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_6CLP, 0x06E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryingMode, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_A4MO, 0x06E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEQSTestingPawn, 0x0710);
		}

		// Class AIModule.GenericTeamAgentInterface
		TEST_METHOD(Class__AIModule__GenericTeamAgentInterface)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericTeamAgentInterface, 0x0028);
		}

		// Class AIModule.NavigationComponent
		TEST_METHOD(Class__AIModule__NavigationComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationComponent, UnknownData_GSBW, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationComponent, GoalActor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationComponent, ControllerOwner, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationComponent, UnknownData_PH9S, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationComponent, UnknownData_ODBB, 0x0112);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationComponent, MyNavData, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationComponent, 0x01A0);
		}

		// Class AIModule.PawnAction
		TEST_METHOD(Class__AIModule__PawnAction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ChildAction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ParentAction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, OwnerComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, Instigator, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, BrainComp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_9M0L, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_CMYA, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction, 0x0088);
		}

		// Class AIModule.PawnAction_BlueprintBase
		TEST_METHOD(Class__AIModule__PawnAction_BlueprintBase)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_BlueprintBase, 0x0088);
		}

		// Class AIModule.PawnAction_Move
		TEST_METHOD(Class__AIModule__PawnAction_Move)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalActor, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalLocation, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, AcceptableRadius, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, FilterClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, UnknownData_BSNM, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Move, 0x00C8);
		}

		// Class AIModule.PawnAction_Repeat
		TEST_METHOD(Class__AIModule__PawnAction_Repeat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ActionToRepeat, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, RecentActionCopy, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ChildFailureHandlingMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, UnknownData_QT1H, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Repeat, 0x00A0);
		}

		// Class AIModule.PawnAction_Sequence
		TEST_METHOD(Class__AIModule__PawnAction_Sequence)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ActionSequence, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ChildFailureHandlingMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_XGYK, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, RecentActionCopy, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_R85V, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Sequence, 0x00B0);
		}

		// Class AIModule.PawnSensingComponent
		TEST_METHOD(Class__AIModule__PawnSensingComponent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingThreshold, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, LOSHearingThreshold, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SightRadius, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SensingInterval, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingMaxSoundAge, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, UnknownData_W1ZI, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnSeePawn, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnHearNoise, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionAngle, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionCosine, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnSensingComponent, 0x0118);
		}

		// Class EngineSettings.ConsoleSettings
		TEST_METHOD(Class__EngineSettings__ConsoleSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, MaxScrollbackSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_36SY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, ManualAutoCompleteList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteMapPaths, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleSettings, 0x0050);
		}

		// Class EngineSettings.GameMapsSettings
		TEST_METHOD(Class__EngineSettings__GameMapsSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, EditorStartupMap, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, LocalMapOptions, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TransitionMap, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bUseSplitscreen, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TwoPlayerSplitscreenLayout, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ThreePlayerSplitscreenLayout, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, UnknownData_ATEM, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameInstanceClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameDefaultMap, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ServerDefaultMap, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultGameMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultServerGameMode, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMapsSettings, 0x00B0);
		}

		// Class EngineSettings.GameNetworkManagerSettings
		TEST_METHOD(Class__EngineSettings__GameNetworkManagerSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MinDynamicBandwidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MaxDynamicBandwidth, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, TotalNetBandwidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, BadPingThreshold, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_AIDA, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyRxCheatTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyTxCheatTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForRxStandby, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForTxStandby, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentForBadPing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, JoinInProgressStandbyWaitTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_9QE3, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameNetworkManagerSettings, 0x0058);
		}

		// Class EngineSettings.GameSessionSettings
		TEST_METHOD(Class__EngineSettings__GameSessionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxSpectators, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxPlayers, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, UnknownData_BR7D, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSessionSettings, 0x0038);
		}

		// Class EngineSettings.GeneralEngineSettings
		TEST_METHOD(Class__EngineSettings__GeneralEngineSettings)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralEngineSettings, 0x0028);
		}

		// Class EngineSettings.GeneralProjectSettings
		TEST_METHOD(Class__EngineSettings__GeneralProjectSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CopyrightNotice, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Homepage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, LicensingTerms, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, PrivacyPolicy, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectID, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectVersion, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, SupportContact, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralProjectSettings, 0x00C8);
		}

		// Class EngineSettings.HudSettings
		TEST_METHOD(Class__EngineSettings__HudSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, UnknownData_1S44, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, DebugDisplay, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudSettings, 0x0040);
		}

		// Class OnlineSubsystem.NamedInterfaces
		TEST_METHOD(Class__OnlineSubsystem__NamedInterfaces)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaces, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaceDefs, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedInterfaces, 0x0048);
		}

		// Class MediaAssets.MediaPlayer
		TEST_METHOD(Class__MediaAssets__MediaPlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaClosed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpened, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_TFN5, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, AutoPlayRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_2OUK, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, StreamMode, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_J0KC, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, URL, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_IWSH, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlayer, 0x00A8);
		}

		// Class MediaAssets.MediaSoundWave
		TEST_METHOD(Class__MediaAssets__MediaSoundWave)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundWave, AudioTrackIndex, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundWave, UnknownData_ZQJB, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundWave, MediaPlayer, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundWave, UnknownData_MXII, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSoundWave, 0x0248);
		}

		// Class MediaAssets.MediaTexture
		TEST_METHOD(Class__MediaAssets__MediaTexture)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressX, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressY, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_N1Y4, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, ClearColor, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, VideoTrackIndex, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, MediaPlayer, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_7A0B, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTexture, 0x0108);
		}

		// ScriptStruct InputCore.InputCoreTypes.Key
		TEST_METHOD(ScriptStruct__InputCore__InputCoreTypes__Key)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, KeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, UnknownData_VPA2, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKey, 0x0018);
		}

		// ScriptStruct EngineMessages.EngineServiceMessages.EngineServiceNotification
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceMessages__EngineServiceNotification)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, TimeSeconds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceNotification, 0x0018);
		}

		// ScriptStruct EngineMessages.EngineServiceMessages.EngineServiceTerminate
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceMessages__EngineServiceTerminate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceTerminate, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceTerminate, 0x0010);
		}

		// ScriptStruct EngineMessages.EngineServiceMessages.EngineServiceExecuteCommand
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceMessages__EngineServiceExecuteCommand)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, UserName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceExecuteCommand, 0x0020);
		}

		// ScriptStruct EngineMessages.EngineServiceMessages.EngineServiceAuthGrant
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceMessages__EngineServiceAuthGrant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserToGrant, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthGrant, 0x0020);
		}

		// ScriptStruct EngineMessages.EngineServiceMessages.EngineServiceAuthDeny
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceMessages__EngineServiceAuthDeny)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserToDeny, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthDeny, 0x0020);
		}

		// ScriptStruct EngineMessages.EngineServiceMessages.EngineServicePong
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceMessages__EngineServicePong)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, CurrentLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, EngineVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, HasBegunPlay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_HBM8, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, SessionId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, WorldTimeSeconds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_FNHS, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePong, 0x0050);
		}

		// ScriptStruct EngineMessages.EngineServiceMessages.EngineServicePing
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceMessages__EngineServicePing)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePing, UnknownData_ORWL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePing, 0x0001);
		}

		// ScriptStruct Telemetry.TelemetryFunctionLibrary.TmAccumulator
		TEST_METHOD(ScriptStruct__Telemetry__TelemetryFunctionLibrary__TmAccumulator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTmAccumulator, Low, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTmAccumulator, High, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTmAccumulator, 0x0008);
		}

		// ScriptStruct MovieSceneCore.MovieScene.MovieSceneSpawnable
		TEST_METHOD(ScriptStruct__MovieSceneCore__MovieScene__MovieSceneSpawnable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_TWEL, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, GeneratedClass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_HXTY, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnable, 0x0048);
		}

		// ScriptStruct MovieSceneCore.MovieScene.MovieScenePossessable
		TEST_METHOD(ScriptStruct__MovieSceneCore__MovieScene__MovieScenePossessable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, UnknownData_MC6K, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, PossessedObjectClass, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePossessable, 0x0040);
		}

		// ScriptStruct MovieSceneCore.MovieScene.MovieSceneObjectBinding
		TEST_METHOD(ScriptStruct__MovieSceneCore__MovieScene__MovieSceneObjectBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBinding, ObjectGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBinding, BindingName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBinding, UnknownData_SKJC, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBinding, Tracks, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBinding, 0x0048);
		}

		// ScriptStruct MovieSceneCore.MovieSceneBindings.MovieSceneBoundObject
		TEST_METHOD(ScriptStruct__MovieSceneCore__MovieSceneBindings__MovieSceneBoundObject)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoundObject, PossessableGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoundObject, Objects, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoundObject, 0x0020);
		}

		// ScriptStruct MovieSceneCore.MovieScene.MovieSceneEditorData
		TEST_METHOD(ScriptStruct__MovieSceneCore__MovieScene__MovieSceneEditorData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, CollapsedSequencerNodes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEditorData, 0x0010);
		}

		// ScriptStruct SessionMessages.SessionServiceMessages.SessionServiceLogUnsubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceMessages__SessionServiceLogUnsubscribe)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogUnsubscribe, UnknownData_D0M4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogUnsubscribe, 0x0001);
		}

		// ScriptStruct SessionMessages.SessionServiceMessages.SessionServiceLogSubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceMessages__SessionServiceLogSubscribe)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogSubscribe, UnknownData_X03O, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogSubscribe, 0x0001);
		}

		// ScriptStruct SessionMessages.SessionServiceMessages.SessionServiceLog
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceMessages__SessionServiceLog)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, TimeSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Verbosity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, UnknownData_FBJ6, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLog, 0x0038);
		}

		// ScriptStruct SessionMessages.SessionServiceMessages.SessionServicePong
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceMessages__SessionServicePong)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, BuildDate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, DeviceName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, IsConsoleBuild, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_SB9G, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, PlatformName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Standalone, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_U6M8, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePong, 0x0090);
		}

		// ScriptStruct SessionMessages.SessionServiceMessages.SessionServicePing
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceMessages__SessionServicePing)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePing, UnknownData_F3VA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePing, 0x0001);
		}

		// ScriptStruct CustomMeshComponent.CustomMeshComponent.CustomMeshTriangle
		TEST_METHOD(ScriptStruct__CustomMeshComponent__CustomMeshComponent__CustomMeshTriangle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomMeshTriangle, 0x0024);
		}

		// ScriptStruct OculusLibrary.OculusFunctionLibrary.HmdUserProfileField
		TEST_METHOD(ScriptStruct__OculusLibrary__OculusFunctionLibrary__HmdUserProfileField)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfileField, FieldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfileField, FieldValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHmdUserProfileField, 0x0020);
		}

		// ScriptStruct OculusLibrary.OculusFunctionLibrary.HmdUserProfile
		TEST_METHOD(ScriptStruct__OculusLibrary__OculusFunctionLibrary__HmdUserProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, Gender, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, PlayerHeight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, EyeHeight, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, IPD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, NeckToEyeDistance, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, UnknownData_IK4A, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, ExtraFields, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHmdUserProfile, 0x0048);
		}

		// ScriptStruct GameLiveStreaming.QueryLiveStreamsCallbackProxy.BlueprintLiveStreamInfo
		TEST_METHOD(ScriptStruct__GameLiveStreaming__QueryLiveStreamsCallbackProxy__BlueprintLiveStreamInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintLiveStreamInfo, GameName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintLiveStreamInfo, StreamName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintLiveStreamInfo, URL, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintLiveStreamInfo, 0x0030);
		}

		// ScriptStruct Engine.EngineBaseTypes.TickFunction
		TEST_METHOD(ScriptStruct__Engine__EngineBaseTypes__TickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_4FGF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_66VP, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_DPDG, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickFunction, 0x0048);
		}

		// ScriptStruct Engine.EngineBaseTypes.ActorTickFunction
		TEST_METHOD(ScriptStruct__Engine__EngineBaseTypes__ActorTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTickFunction, UnknownData_V4E7, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTickFunction, UnknownData_D4ZZ, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorTickFunction, 0x0058);
		}

		// ScriptStruct Engine.Vector_NetQuantizeLow
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantizeLow)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantizeLow, 0x000C);
		}

		// ScriptStruct Engine.Vector_NetQuantize
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize, 0x000C);
		}

		// ScriptStruct Engine.EngineTypes.RepMovement
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__RepMovement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LinearVelocity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, AngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Location, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Rotation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, UnknownData_Y8F1, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepMovement, 0x0034);
		}

		// ScriptStruct Engine.Vector_NetQuantize100
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize100)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize100, 0x000C);
		}

		// ScriptStruct Engine.EngineTypes.RepAttachment
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__RepAttachment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, LocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RelativeScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RotationOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachSocket, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, UnknownData_DBVE, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachComponent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepAttachment, 0x0040);
		}

		// ScriptStruct Engine.Actor.BPNetExecParams
		TEST_METHOD(ScriptStruct__Engine__Actor__BPNetExecParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPNetExecParams, IntParam1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPNetExecParams, IntParam2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPNetExecParams, IntParam3, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPNetExecParams, FloatParam1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPNetExecParams, FloatParam2, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPNetExecParams, FloatParam3, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPNetExecParams, ObjParam1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPNetExecParams, ObjParam2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPNetExecParams, ObjParam3, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPNetExecParams, StringParam1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPNetExecParams, 0x0040);
		}

		// ScriptStruct Engine.Vector_NetQuantizeNormal
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantizeNormal)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantizeNormal, 0x000C);
		}

		// ScriptStruct Engine.EngineTypes.HitResult
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__HitResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_YQ1U, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Time, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Normal, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactPoint, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactNormal, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceStart, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceEnd, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PenetrationDepth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Item, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PhysMaterial, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Actor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Component, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_FIO5, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, BoneName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, FaceIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_RV2D, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitResult, 0x0088);
		}

		// ScriptStruct Engine.Actor.MultiUseEntry
		TEST_METHOD(ScriptStruct__Engine__Actor__MultiUseEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUseEntry, ForComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUseEntry, UseString, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUseEntry, UseIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUseEntry, Priority, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUseEntry, UnknownData_2M4E, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUseEntry, WheelCategory, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUseEntry, DisableUseColor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUseEntry, UseTextColor, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUseEntry, EntryActivationTimer, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUseEntry, DefaultEntryActivationTimer, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUseEntry, ActivationSound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUseEntry, UseInventoryButtonStyleOverrideIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiUseEntry, AdditionalButtonsIndex, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiUseEntry, 0x0048);
		}

		// ScriptStruct Engine.Actor.BPMapCheckEntry
		TEST_METHOD(ScriptStruct__Engine__Actor__BPMapCheckEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPMapCheckEntry, Severity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPMapCheckEntry, UnknownData_CLT8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPMapCheckEntry, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPMapCheckEntry, ActorLinks, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPMapCheckEntry, 0x0028);
		}

		// ScriptStruct Engine.AnimationAsset.AnimTickRecord
		TEST_METHOD(ScriptStruct__Engine__AnimationAsset__AnimTickRecord)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, UnknownData_2QDL, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTickRecord, 0x0040);
		}

		// ScriptStruct Engine.AnimationAsset.AnimGroupInstance
		TEST_METHOD(ScriptStruct__Engine__AnimationAsset__AnimGroupInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInstance, UnknownData_ECWL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInstance, 0x0018);
		}

		// ScriptStruct Engine.EngineBaseTypes.ActorComponentTickFunction
		TEST_METHOD(ScriptStruct__Engine__EngineBaseTypes__ActorComponentTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentTickFunction, UnknownData_EKN9, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentTickFunction, UnknownData_4OTW, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentTickFunction, 0x0058);
		}

		// ScriptStruct Engine.EngineTypes.CollisionResponseContainer
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__CollisionResponseContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldStatic, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldDynamic, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Visibility, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, PhysicsBody, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Destructible, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel1, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel2, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel3, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel4, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel6, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel7, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel8, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel9, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel10, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel11, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel12, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel13, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel14, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel15, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel16, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel17, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel18, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel19, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel20, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel21, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel22, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel23, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel24, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel25, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel26, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel27, 0x001F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseContainer, 0x0020);
		}

		// ScriptStruct Engine.EngineTypes.ResponseChannel
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__ResponseChannel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Response, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, UnknownData_CQKA, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResponseChannel, 0x000C);
		}

		// ScriptStruct Engine.CollisionResponse
		TEST_METHOD(ScriptStruct__Engine__CollisionResponse)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseToChannels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponse, 0x0030);
		}

		// ScriptStruct Engine.EngineTypes.WalkableSlopeOverride
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__WalkableSlopeOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeBehavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_H1YG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeAngle, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWalkableSlopeOverride, 0x0008);
		}

		// ScriptStruct Engine.BodyInstance
		TEST_METHOD(ScriptStruct__Engine__BodyInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_OLK2, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, Scale3D, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_2SZW, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_OM15, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, ResponseToChannels, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_2EOF, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionProfileName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionEnabled, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, ObjectType, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_OEYF, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionResponses, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_E3XF, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, LockedAxisMode, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_583M, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomLockedAxis, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_8ZZ6, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_RBMT, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, WalkableSlopeOverride, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_HT0K, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxDepenetrationVelocity, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_XRVL, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysMaterialOverride, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, COMNudge, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, SleepFamily, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, BodyArmorType, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_68CH, 0x00EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassScale, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, AngularDamping, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, LinearDamping, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxAngularVelocity, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysicsBlendWeight, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PositionSolverIterationCount, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, VelocitySolverIterationCount, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_WHA0, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstance, 0x0160);
		}

		// ScriptStruct Engine.EngineBaseTypes.PrimitiveComponentPostPhysicsTickFunction
		TEST_METHOD(ScriptStruct__Engine__EngineBaseTypes__PrimitiveComponentPostPhysicsTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentPostPhysicsTickFunction, UnknownData_TR38, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveComponentPostPhysicsTickFunction, 0x0050);
		}

		// ScriptStruct Engine.PrimitiveComponent.CollisionResponseSet
		TEST_METHOD(ScriptStruct__Engine__PrimitiveComponent__CollisionResponseSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseSet, Channels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseSet, Responses, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseSet, 0x0020);
		}

		// ScriptStruct Engine.SceneComponent.OverlapInfo
		TEST_METHOD(ScriptStruct__Engine__SceneComponent__OverlapInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapInfo, UnknownData_FQ6D, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlapInfo, 0x0098);
		}

		// ScriptStruct Engine.SkinnedMeshComponent.SkelMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkinnedMeshComponent__SkelMeshComponentLODInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, HiddenMaterials, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshComponentLODInfo, 0x0010);
		}

		// ScriptStruct Engine.EngineTypes.AnimUpdateRateParameters
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__AnimUpdateRateParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UpdateRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, EvaluationRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, bInterpolateSkippedFrames, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, bSkipUpdate, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, bSkipEvaluation, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_FDK5, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimUpdateRateParameters, 0x000C);
		}

		// ScriptStruct Engine.SkinnedMeshComponent.ActiveVertexAnim
		TEST_METHOD(ScriptStruct__Engine__SkinnedMeshComponent__ActiveVertexAnim)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveVertexAnim, VertAnim, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveVertexAnim, Weight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveVertexAnim, Time, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveVertexAnim, 0x0010);
		}

		// ScriptStruct Engine.CurveBase.KeyHandleMap
		TEST_METHOD(ScriptStruct__Engine__CurveBase__KeyHandleMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleMap, UnknownData_6WHA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleMap, 0x0050);
		}

		// ScriptStruct Engine.CurveBase.IndexedCurve
		TEST_METHOD(ScriptStruct__Engine__CurveBase__IndexedCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, UnknownData_5IP6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, KeyHandlesToIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIndexedCurve, 0x0058);
		}

		// ScriptStruct Engine.CurveBase.RichCurveKey
		TEST_METHOD(ScriptStruct__Engine__CurveBase__RichCurveKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, InterpMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentWeightMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, UnknownData_ZVCT, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Time, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangentWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangentWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurveKey, 0x001C);
		}

		// ScriptStruct Engine.CurveBase.RichCurve
		TEST_METHOD(ScriptStruct__Engine__CurveBase__RichCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, Keys, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurve, 0x0068);
		}

		// ScriptStruct Engine.CurveFloat.RuntimeFloatCurve
		TEST_METHOD(ScriptStruct__Engine__CurveFloat__RuntimeFloatCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, EditorCurveData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, ExternalCurve, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeFloatCurve, 0x0070);
		}

		// ScriptStruct Engine.ForceFeedbackEffect.ForceFeedbackChannelDetails
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackEffect__ForceFeedbackChannelDetails)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, UnknownData_Z9OD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, Curve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackChannelDetails, 0x0078);
		}

		// ScriptStruct Engine.ForceFeedbackEffect.ActiveForceFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackEffect__ActiveForceFeedbackEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, ForceFeedbackEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, UnknownData_GUKZ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveForceFeedbackEffect, 0x0018);
		}

		// ScriptStruct Engine.Scene.ClutterData
		TEST_METHOD(ScriptStruct__Engine__Scene__ClutterData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterData, Density, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterData, MinSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterData, MaxSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterData, GenerationSeed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterData, bAllowShadows, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterData, UnknownData_TGW1, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterData, StaticMesh, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterData, VisibilityTexture, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterData, TextureChannel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterData, UnknownData_UTJE, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClutterData, 0x0030);
		}

		// ScriptStruct Engine.Scene.OverrideClutterLayer
		TEST_METHOD(ScriptStruct__Engine__Scene__OverrideClutterLayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverrideClutterLayer, LayerID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverrideClutterLayer, UnknownData_MK7J, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverrideClutterLayer, ClutterLayers, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverrideClutterLayer, 0x0018);
		}

		// ScriptStruct Engine.Scene.ClutterPropertyOverride
		TEST_METHOD(ScriptStruct__Engine__Scene__ClutterPropertyOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, LayerID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, ArrayIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, OverrideDensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, UnknownData_BEQ8, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, Density, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, OverrideMinSize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, UnknownData_L9H3, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, MinSize, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, OverrideMaxSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, UnknownData_4A20, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, MaxSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, OverrideGenerationSeed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, UnknownData_H4O7, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, GenerationSeed, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, OverrideAllowShadows, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, bAllowShadows, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, OverrideStaticMesh, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, UnknownData_FFHB, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, StaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, OverrideVisibilityTexture, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, UnknownData_NW2C, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, VisibilityTexture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, OverrideTextureChannel, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, UnknownData_PZEX, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClutterPropertyOverride, TextureChannel, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClutterPropertyOverride, 0x0050);
		}

		// ScriptStruct Engine.Scene.PostProcessSettingsMaterialAdjuster
		TEST_METHOD(ScriptStruct__Engine__Scene__PostProcessSettingsMaterialAdjuster)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettingsMaterialAdjuster, PostProcessParentMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettingsMaterialAdjuster, MaterialParamCollecton, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettingsMaterialAdjuster, ScalarParameterNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettingsMaterialAdjuster, ScalarParameterValues, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettingsMaterialAdjuster, VectorParameterNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettingsMaterialAdjuster, VectorParameterValues, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostProcessSettingsMaterialAdjuster, 0x0050);
		}

		// ScriptStruct Engine.Scene.PostProcessSettings
		TEST_METHOD(ScriptStruct__Engine__Scene__PostProcessSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_QBPR, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, OverrideClutterLayers, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ClutterPropertyOverrides, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhitePoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTint, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintBlend, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintAmount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSaturation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerRed, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerGreen, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerBlue, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmContrast, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToeAmount, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmHealAmount, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmDynamicRange, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MinExposureFilmToeAmount, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MinFilmToeAmount, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MaxExposureFilmToeAmount, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MaxFilmToeAmount, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneColorTint, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneFringeIntensity, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneFringeSaturation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomIntensity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomThreshold, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Size, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Size, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Size, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Size, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Tint, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Tint, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Tint, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Tint, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Tint, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskIntensity, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskTint, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_KGQ5, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMask, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVIntensity, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVWarpIntensity, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVVplInjectionBias, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSize, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryOcclusionIntensity, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryBounceIntensity, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVGeometryVolumeBias, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVEmissiveInjectionIntensity, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVTransmissionIntensity, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapTint, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapIntensity, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemap, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureLowPercent, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureHighPercent, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMinBrightness, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMaxBrightness, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedUp, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedDown, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBias, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMin, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMax, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareIntensity, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTint, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehSize, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareThreshold, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehShape, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTints, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, VignetteIntensity, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, VignetteColor, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainJitter, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainIntensity, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionIntensity, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionStaticFraction, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionRadius, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_3BMT, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeDistance, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeRadius, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionDistance, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionPower, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionBias, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionQuality, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipBlend, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipScale, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipThreshold, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingColor, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingIntensity, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingIntensity, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingLUT, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMethod, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_OBBK, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalDistance, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalRegion, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearTransitionRegion, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarTransitionRegion, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldScale, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMaxBokehSize, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearBlurSize, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarBlurSize, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_YQPP, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBokehShape, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldOcclusion, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldColorThreshold, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSizeThreshold, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSkyFocusDistance, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurAmount, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurMax, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurPerObjectSize, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenPercentage, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AntiAliasingMethod, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_UV5X, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionIntensity, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionQuality, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionMaxRoughness, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_POC8, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AdditionalMaterialSetSkyLightMultiplier, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Blendables, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PostProcessSettingsMaterialAdjusters, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PostProcessAmbientSound, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostProcessSettings, 0x0358);
		}

		// ScriptStruct Engine.MinimalViewInfo
		TEST_METHOD(ScriptStruct__Engine__MinimalViewInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, AimRotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_B7T0, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, FOV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoWidth, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, AspectRatio, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_3P50, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, ProjectionMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_ZKC0, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessBlendWeight, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessSettings, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalViewInfo, 0x0398);
		}

		// ScriptStruct Engine.PlayerCameraManager.CameraCacheEntry
		TEST_METHOD(ScriptStruct__Engine__PlayerCameraManager__CameraCacheEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, TimeStamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, UnknownData_YPU9, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, POV, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCacheEntry, 0x03A0);
		}

		// ScriptStruct Engine.PlayerCameraManager.TViewTarget
		TEST_METHOD(ScriptStruct__Engine__PlayerCameraManager__TViewTarget)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, POV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, PlayerState, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTViewTarget, 0x03A8);
		}

		// ScriptStruct Engine.PlayerCameraManager.ViewTargetTransitionParams
		TEST_METHOD(ScriptStruct__Engine__PlayerCameraManager__ViewTargetTransitionParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendFunction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_4LFH, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendExp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_9ER8, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FViewTargetTransitionParams, 0x0010);
		}

		// ScriptStruct Engine.UniqueNetIdRepl
		TEST_METHOD(ScriptStruct__Engine__UniqueNetIdRepl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, UnknownData_CQ9Z, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdRepl, 0x0010);
		}

		// ScriptStruct Engine.LatentActionInfo
		TEST_METHOD(ScriptStruct__Engine__LatentActionInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, Linkage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, UUID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, ExecutionFunction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, CallbackTarget, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionInfo, 0x0018);
		}

		// ScriptStruct Engine.EngineTypes.Rotator_NetQuantize
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__Rotator_NetQuantize)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator_NetQuantize, 0x000C);
		}

		// ScriptStruct Engine.Actor.NetExecParams
		TEST_METHOD(ScriptStruct__Engine__Actor__NetExecParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetExecParams, IntParam1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetExecParams, IntParam2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetExecParams, FloatParam1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetExecParams, UnknownData_H1LL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetExecParams, ObjParam1, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetExecParams, 0x0018);
		}

		// ScriptStruct Engine.HUD.DebugTextInfo
		TEST_METHOD(ScriptStruct__Engine__HUD__DebugTextInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorDesiredOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, DebugText, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TimeRemaining, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Duration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TextColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_UA85, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, OrigActorLocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_4WQ1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Font, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, FontScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_VBC1, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugTextInfo, 0x0060);
		}

		// ScriptStruct Engine.Brush.GeomSelection
		TEST_METHOD(ScriptStruct__Engine__Brush__GeomSelection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, SelectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomSelection, 0x000C);
		}

		// ScriptStruct Engine.EngineTypes.DamageEvent
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__DamageEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, UnknownData_LS4D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, Impulse, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, OriginalDamage, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, InstanceBodyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, UnknownData_LM3B, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, DamageTypeClass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageEvent, 0x0020);
		}

		// ScriptStruct Engine.Character.BasedMovementInfo
		TEST_METHOD(ScriptStruct__Engine__Character__BasedMovementInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, MovementBase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasBaseComponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bRelativeRotation, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasVelocity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, UnknownData_KFZN, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedMovementInfo, 0x0030);
		}

		// ScriptStruct Engine.EngineTypes.Rotator_NetQuantizeSmartPitch
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__Rotator_NetQuantizeSmartPitch)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator_NetQuantizeSmartPitch, 0x000C);
		}

		// ScriptStruct Engine.AnimationAsset.RootMotionMovementParams
		TEST_METHOD(ScriptStruct__Engine__AnimationAsset__RootMotionMovementParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, bHasRootMotion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_1G5X, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, RootMotionTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionMovementParams, 0x0040);
		}

		// ScriptStruct Engine.Vector_NetQuantize10
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize10)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize10, 0x000C);
		}

		// ScriptStruct Engine.Character.RepRootMotionMontage
		TEST_METHOD(ScriptStruct__Engine__Character__RepRootMotionMontage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AnimMontage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Location, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_N79A, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBase, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBaseBoneName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativePosition, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativeRotation, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_CFA8, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepRootMotionMontage, 0x0040);
		}

		// ScriptStruct Engine.Character.SimulatedRootMotionReplicatedMove
		TEST_METHOD(ScriptStruct__Engine__Character__SimulatedRootMotionReplicatedMove)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, UnknownData_YYK1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, RootMotion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulatedRootMotionReplicatedMove, 0x0048);
		}

		// ScriptStruct Engine.WorldSettings.GameModePrefix
		TEST_METHOD(ScriptStruct__Engine__WorldSettings__GameModePrefix)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModePrefix, Prefix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModePrefix, GameMode, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameModePrefix, 0x0020);
		}

		// ScriptStruct Engine.WorldSettings.LightmassWorldInfoSettings
		TEST_METHOD(ScriptStruct__Engine__WorldSettings__LightmassWorldInfoSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, StaticLightingLevelScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumIndirectLightingBounces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingQuality, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingSmoothness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentColor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentIntensity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EmissiveBoost, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DiffuseBoost, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_XUJG, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DirectIlluminationOcclusionFraction, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectIlluminationOcclusionFraction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, OcclusionExponent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, FullyOccludedSamplesFraction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, MaxOcclusionDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_IJUN, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightSamplePlacementScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_VXUM, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassWorldInfoSettings, 0x0044);
		}

		// ScriptStruct Engine.ReverbVolume.InteriorSettings
		TEST_METHOD(ScriptStruct__Engine__ReverbVolume__InteriorSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, UnknownData_304S, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPFTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPFTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteriorSettings, 0x0024);
		}

		// ScriptStruct Engine.ReverbVolume.ReverbSettings
		TEST_METHOD(ScriptStruct__Engine__ReverbVolume__ReverbSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_AOXY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_86X3, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, Volume, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, FadeTime, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReverbSettings, 0x0018);
		}

		// ScriptStruct Engine.WorldSettings.ProxyMeshSettings
		TEST_METHOD(ScriptStruct__Engine__WorldSettings__ProxyMeshSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FProxyMeshSettings, MaxDrawDistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProxyMeshSettings, TransitionDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProxyMeshSettings, TrianglePercent, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProxyMeshSettings, 0x000C);
		}

		// ScriptStruct Engine.NavigationTypes.MovementProperties
		TEST_METHOD(ScriptStruct__Engine__NavigationTypes__MovementProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovementProperties, UnknownData_JITT, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementProperties, 0x0004);
		}

		// ScriptStruct Engine.NavigationTypes.NavAgentProperties
		TEST_METHOD(ScriptStruct__Engine__NavigationTypes__NavAgentProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentHeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentStepHeight, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentProperties, 0x0010);
		}

		// ScriptStruct Engine.CharacterMovementComponent.FindFloorResult
		TEST_METHOD(ScriptStruct__Engine__CharacterMovementComponent__FindFloorResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_UEF0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, FloorDist, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, LineDist, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_47ZA, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, HitResult, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFindFloorResult, 0x0098);
		}

		// ScriptStruct Engine.CharacterMovementComponent.CharacterMovementComponentPreClothTickFunction
		TEST_METHOD(ScriptStruct__Engine__CharacterMovementComponent__CharacterMovementComponentPreClothTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMovementComponentPreClothTickFunction, UnknownData_JBXN, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMovementComponentPreClothTickFunction, 0x0050);
		}

		// ScriptStruct Engine.CharacterMovementComponent.StoredMoveData
		TEST_METHOD(ScriptStruct__Engine__CharacterMovementComponent__StoredMoveData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoredMoveData, UnknownData_BICP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStoredMoveData, 0x0048);
		}

		// ScriptStruct Engine.Engine.StatColorMapEntry
		TEST_METHOD(ScriptStruct__Engine__Engine__StatColorMapEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, In, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, Out, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapEntry, 0x0008);
		}

		// ScriptStruct Engine.Engine.StatColorMapping
		TEST_METHOD(ScriptStruct__Engine__Engine__StatColorMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, StatName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, ColorMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, UnknownData_IGZH, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapping, 0x0028);
		}

		// ScriptStruct Engine.Engine.GameNameRedirect
		TEST_METHOD(ScriptStruct__Engine__Engine__GameNameRedirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, OldGameName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, NewGameName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameNameRedirect, 0x0020);
		}

		// ScriptStruct Engine.Engine.ClassRedirect
		TEST_METHOD(ScriptStruct__Engine__Engine__ClassRedirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldSubobjName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewSubobjName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, InstanceOnly, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, UnknownData_CTUC, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassRedirect, 0x0058);
		}

		// ScriptStruct Engine.Engine.PluginRedirect
		TEST_METHOD(ScriptStruct__Engine__Engine__PluginRedirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, OldPluginName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, NewPluginName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPluginRedirect, 0x0020);
		}

		// ScriptStruct Engine.Engine.StructRedirect
		TEST_METHOD(ScriptStruct__Engine__Engine__StructRedirect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, OldStructName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, NewStructName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructRedirect, 0x0020);
		}

		// ScriptStruct Engine.Engine.DropNoteInfo
		TEST_METHOD(ScriptStruct__Engine__Engine__DropNoteInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Comment, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropNoteInfo, 0x0028);
		}

		// ScriptStruct Engine.EngineTypes.RigidBodyErrorCorrection
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__RigidBodyErrorCorrection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearDeltaThresholdSq, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearInterpAlpha, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearRecipFixTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularDeltaThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularInterpAlpha, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularRecipFixTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, BodySpeedThresholdSq, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyErrorCorrection, 0x001C);
		}

		// ScriptStruct Engine.Engine.NetDriverDefinition
		TEST_METHOD(ScriptStruct__Engine__Engine__NetDriverDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DefName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassNameFallback, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassNameFallback2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDriverDefinition, 0x0020);
		}

		// ScriptStruct Engine.GameMode.GameClassShortName
		TEST_METHOD(ScriptStruct__Engine__GameMode__GameClassShortName)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameClassShortName, ShortName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameClassShortName, GameClassName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameClassShortName, 0x0020);
		}

		// ScriptStruct Engine.GameViewportClient.DebugDisplayProperty
		TEST_METHOD(ScriptStruct__Engine__GameViewportClient__DebugDisplayProperty)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, Obj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, WithinClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, UnknownData_A4EP, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugDisplayProperty, 0x0020);
		}

		// ScriptStruct Engine.ParticleSystemComponent.ParticleSysParam
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemComponent__ParticleSysParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_QF4Z, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar_Low, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector_Low, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Color, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Actor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Material, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSysParam, 0x0040);
		}

		// ScriptStruct Engine.MaterialInterface.LightmassMaterialInterfaceSettings
		TEST_METHOD(ScriptStruct__Engine__MaterialInterface__LightmassMaterialInterfaceSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_EZ5V, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, EmissiveBoost, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, DiffuseBoost, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, ExportResolutionScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, DistanceFieldPenumbraScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_3ZTV, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassMaterialInterfaceSettings, 0x0018);
		}

		// ScriptStruct Engine.MaterialInterface.MaterialRelevance
		TEST_METHOD(ScriptStruct__Engine__MaterialInterface__MaterialRelevance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRelevance, UnknownData_8AV9, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialRelevance, 0x0004);
		}

		// ScriptStruct Engine.CullDistanceVolume.CullDistanceSizePair
		TEST_METHOD(ScriptStruct__Engine__CullDistanceVolume__CullDistanceSizePair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, CullDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCullDistanceSizePair, 0x0008);
		}

		// ScriptStruct Engine.DynamicCaptureManager.OverrideCaptureData
		TEST_METHOD(ScriptStruct__Engine__DynamicCaptureManager__OverrideCaptureData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverrideCaptureData, SnapshotAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverrideCaptureData, Brightness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverrideCaptureData, UnknownData_XDZA, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverrideCaptureData, 0x0018);
		}

		// ScriptStruct Engine.EngineTypes.LightmassPrimitiveSettings
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__LightmassPrimitiveSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, UnknownData_HDEQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightFalloffExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightExplicitInfluenceRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveBoost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, DiffuseBoost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, FullyOccludedSamplesFraction, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPrimitiveSettings, 0x0018);
		}

		// ScriptStruct Engine.LandscapeProxy.LandscapeLayerStruct
		TEST_METHOD(ScriptStruct__Engine__LandscapeProxy__LandscapeLayerStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerStruct, LayerInfoObj, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerStruct, 0x0008);
		}

		// ScriptStruct Engine.MatineeActor.InterpGroupActorInfo
		TEST_METHOD(ScriptStruct__Engine__MatineeActor__InterpGroupActorInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, ObjectName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, actors, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpGroupActorInfo, 0x0020);
		}

		// ScriptStruct Engine.MatineeActor.CameraCutInfo
		TEST_METHOD(ScriptStruct__Engine__MatineeActor__CameraCutInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, TimeStamp, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCutInfo, 0x0010);
		}

		// ScriptStruct Engine.NavigationQueryFilter.NavigationFilterArea
		TEST_METHOD(ScriptStruct__Engine__NavigationQueryFilter__NavigationFilterArea)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, AreaClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, TravelCostOverride, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, EnteringCostOverride, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, UnknownData_UBTW, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterArea, 0x0018);
		}

		// ScriptStruct Engine.NavigationQueryFilter.NavigationFilterFlags
		TEST_METHOD(ScriptStruct__Engine__NavigationQueryFilter__NavigationFilterFlags)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterFlags, UnknownData_PLTW, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterFlags, 0x0004);
		}

		// ScriptStruct Engine.NavigationTypes.NavDataConfig
		TEST_METHOD(ScriptStruct__Engine__NavigationTypes__NavDataConfig)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, DefaultQueryExtent, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavDataConfig, 0x0028);
		}

		// ScriptStruct Engine.NavigationData.SupportedAreaData
		TEST_METHOD(ScriptStruct__Engine__NavigationData__SupportedAreaData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClassName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, UnknownData_MVVS, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedAreaData, 0x0020);
		}

		// ScriptStruct Engine.NavLinkDefinition.NavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavLinkDefinition__NavigationLinkBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, MaxFallDownLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, Direction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_K1SI, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, AreaClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_GOTO, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLinkBase, 0x0020);
		}

		// ScriptStruct Engine.NavLinkDefinition.NavigationLink
		TEST_METHOD(ScriptStruct__Engine__NavLinkDefinition__NavigationLink)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Left, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Right, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLink, 0x0038);
		}

		// ScriptStruct Engine.NavLinkDefinition.NavigationSegmentLink
		TEST_METHOD(ScriptStruct__Engine__NavLinkDefinition__NavigationSegmentLink)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftStart, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftEnd, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightStart, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightEnd, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationSegmentLink, 0x0050);
		}

		// ScriptStruct Engine.Skeleton.BoneNode
		TEST_METHOD(ScriptStruct__Engine__Skeleton__BoneNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, ParentIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, TranslationRetargetingMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, bLockBone, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, bRemoveBone, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, UnknownData_G3RA, 0x000F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneNode, 0x0010);
		}

		// ScriptStruct Engine.Skeleton.SkeletonToMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__Skeleton__SkeletonToMeshLinkup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, SkeletonToMeshTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, MeshToSkeletonTable, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletonToMeshLinkup, 0x0020);
		}

		// ScriptStruct Engine.SmartNameContainer
		TEST_METHOD(ScriptStruct__Engine__SmartNameContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameContainer, UnknownData_UQUN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameContainer, 0x0050);
		}

		// ScriptStruct Engine.Skeleton.AnimSlotGroup
		TEST_METHOD(ScriptStruct__Engine__Skeleton__AnimSlotGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, SlotNames, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotGroup, 0x0018);
		}

		// ScriptStruct Engine.SkeletalMesh.SkeletalMaterial
		TEST_METHOD(ScriptStruct__Engine__SkeletalMesh__SkeletalMaterial)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, bEnableShadowCasting, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UnknownData_5F6Q, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMaterial, 0x0010);
		}

		// ScriptStruct Engine.SkeletalMesh.GroundBoneModifier
		TEST_METHOD(ScriptStruct__Engine__SkeletalMesh__GroundBoneModifier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroundBoneModifier, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroundBoneModifier, TraceDistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroundBoneModifier, ZOffset, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroundBoneModifier, 0x0010);
		}

		// ScriptStruct Engine.SkeletalMesh.GroundBoneChain
		TEST_METHOD(ScriptStruct__Engine__SkeletalMesh__GroundBoneChain)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroundBoneChain, LeafGroundBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroundBoneChain, GroundBones, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroundBoneChain, bIsAfterIk, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroundBoneChain, bUpdateRoll, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroundBoneChain, UnknownData_X7JB, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroundBoneChain, 0x0020);
		}

		// ScriptStruct Engine.SkeletalMesh.BoneMirrorInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMesh__BoneMirrorInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, BoneFlipAxis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, UnknownData_V98S, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorInfo, 0x0008);
		}

		// ScriptStruct Engine.SkeletalMesh.TriangleSortSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMesh__TriangleSortSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTriangleSortSettings, TriangleSorting, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTriangleSortSettings, CustomLeftRightAxis, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTriangleSortSettings, UnknownData_J0NZ, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTriangleSortSettings, CustomLeftRightBoneName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTriangleSortSettings, 0x000C);
		}

		// ScriptStruct Engine.SkeletalMesh.BoneReference
		TEST_METHOD(ScriptStruct__Engine__SkeletalMesh__BoneReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, UnknownData_LUC9, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReference, 0x000C);
		}

		// ScriptStruct Engine.SkeletalMesh.SkeletalMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMesh__SkeletalMeshOptimizationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ReductionMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_3YDC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxDeviationPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, bRecalcNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_MXYD, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SilhouetteImportance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TextureImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ShadingImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SkinningImportance, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BoneReductionRatio, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxBonesPerVertex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_K60I, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BonesToRemove, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BaseLODModel, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, LODChainLastIndex, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshOptimizationSettings, 0x0040);
		}

		// ScriptStruct Engine.SkeletalMesh.SkeletalMeshLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMesh__SkeletalMeshLODInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODMaterialMap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, bEnableShadowCasting, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, TriangleSorting, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, TriangleSortSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_JUP7, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ReductionSettings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, StaggeredUpdateFrequency, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_PX6O, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODInfo, 0x0098);
		}

		// ScriptStruct Engine.SkeletalMesh.MorphTargetMap
		TEST_METHOD(ScriptStruct__Engine__SkeletalMesh__MorphTargetMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMorphTargetMap, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMorphTargetMap, MorphTarget, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMorphTargetMap, 0x0010);
		}

		// ScriptStruct Engine.SkeletalMesh.ClothPhysicsProperties
		TEST_METHOD(ScriptStruct__Engine__SkeletalMesh__ClothPhysicsProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties, BendResistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties, ShearResistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties, Friction, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties, Damping, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties, Drag, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties, GravityScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties, InertiaBlend, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties, SelfCollisionThickness, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicsProperties, 0x0024);
		}

		// ScriptStruct Engine.SkeletalMesh.ClothingAssetData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMesh__ClothingAssetData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData, AssetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData, ApexFileName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData, bClothPropertiesChanged, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData, UnknownData_WW36, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData, PhysicsProperties, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothingAssetData, 0x0040);
		}

		// ScriptStruct Engine.EngineTypes.ConstrainComponentPropName
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__ConstrainComponentPropName)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstrainComponentPropName, ComponentName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstrainComponentPropName, 0x0008);
		}

		// ScriptStruct Engine.ConstraintInstance
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_S7HJ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, OwnerComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_ND8C, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, JointName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone2, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis1, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos2, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis2, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis2, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_4XE1, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ProjectionLinearTolerance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ProjectionAngularTolerance, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, LinearXMotion, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, LinearYMotion, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, LinearZMotion, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_L3VS, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, LinearLimitSize, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_6SOG, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, LinearLimitStiffness, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, LinearLimitDamping, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_LC35, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, LinearBreakThreshold, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_ZTBC, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularSwing1Motion, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularTwistMotion, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularSwing2Motion, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_J9QI, 0x00AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_GCSW, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Swing1LimitAngle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, TwistLimitAngle, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Swing2LimitAngle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SwingLimitStiffness, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SwingLimitDamping, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, TwistLimitStiffness, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, TwistLimitDamping, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularRotationOffset, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_R7TZ, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularBreakThreshold, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_JT8H, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, LinearPositionTarget, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, LinearVelocityTarget, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, LinearDriveSpring, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, LinearDriveDamping, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, LinearDriveForceLimit, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_9Q7K, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularPositionTarget, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularDriveMode, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_EGP4, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularOrientationTarget, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularVelocityTarget, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularDriveSpring, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularDriveDamping, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularDriveForceLimit, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_QMKC, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstance, 0x0160);
		}

		// ScriptStruct Engine.SkeletalMeshComponent.IKLegInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponent__IKLegInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, OldTipRotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, UnknownData_8W6Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, OldTipRotationQuat, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, FabrikPositions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, RootBoneName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, IKBoneName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, FeetOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, IKBoneRotationOffset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, HitNormalWS, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, HitLocationWS, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, LastTargetHitNormalWS, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, LastTargetHitLocationWS, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, EffectorTransformCS, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, IKAlpha, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, TipBone, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, RootBone, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, bInit, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, bHasGround, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, UnknownData_4Y32, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, Mute, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, TimeIKStarted, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKLegInfo, UnknownData_GXPL, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKLegInfo, 0x00E0);
		}

		// ScriptStruct Engine.SkeletalMeshComponent.IKGroundPlaneOverrideInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponent__IKGroundPlaneOverrideInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKGroundPlaneOverrideInfo, RootLocationOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKGroundPlaneOverrideInfo, UnknownData_E101, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKGroundPlaneOverrideInfo, HitLocationWS, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKGroundPlaneOverrideInfo, HitLocationCS, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKGroundPlaneOverrideInfo, CachedHitLocationWS, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKGroundPlaneOverrideInfo, CachedHitLocationCS, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKGroundPlaneOverrideInfo, HitLocationTargetWS, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKGroundPlaneOverrideInfo, 0x004C);
		}

		// ScriptStruct Engine.SkeletalMeshComponent.IKRootAdjustmentInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponent__IKRootAdjustmentInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKRootAdjustmentInfo, RootBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKRootAdjustmentInfo, NonBoneRootLocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKRootAdjustmentInfo, TraceExtraZBuffer, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKRootAdjustmentInfo, TraceLength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKRootAdjustmentInfo, UnknownData_FTXO, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKRootAdjustmentInfo, DistanceTracedFromStartPoint, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKRootAdjustmentInfo, CachedDistanceTraced, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKRootAdjustmentInfo, 0x0030);
		}

		// ScriptStruct Engine.SkeletalMeshComponent.SingleAnimationPlayData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponent__SingleAnimationPlayData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, AnimToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, VertexAnimToPlay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_C7AD, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPosition, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_5OIK, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSingleAnimationPlayData, 0x0020);
		}

		// ScriptStruct Engine.SkeletalMeshComponent.BoneModifier
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponent__BoneModifier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifier, BoneIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifier, Scale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifier, Translation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifier, Recursive, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifier, UnknownData_FE3B, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneModifier, 0x0020);
		}

		// ScriptStruct Engine.SkeletalMeshComponent.BoneModifierNamed
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponent__BoneModifierNamed)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifierNamed, TheBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifierNamed, TheBoneModifier, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneModifierNamed, 0x0028);
		}

		// ScriptStruct Engine.WheeledVehicleMovementComponent.WheelSetup
		TEST_METHOD(ScriptStruct__Engine__WheeledVehicleMovementComponent__WheelSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, WheelClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, AdditionalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, UnknownData_WMWL, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWheelSetup, 0x0020);
		}

		// ScriptStruct Engine.WheeledVehicleMovementComponent.ReplicatedVehicleState
		TEST_METHOD(ScriptStruct__Engine__WheeledVehicleMovementComponent__ReplicatedVehicleState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, SteeringInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, ThrottleInput, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, BrakeInput, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, HandbrakeInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, CurrentGear, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedVehicleState, 0x0014);
		}

		// ScriptStruct Engine.WheeledVehicleMovementComponent.VehicleInputRate
		TEST_METHOD(ScriptStruct__Engine__WheeledVehicleMovementComponent__VehicleInputRate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, RiseRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, FallRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleInputRate, 0x0008);
		}

		// ScriptStruct Engine.WheeledVehicleMovementComponent4W.VehicleEngineData
		TEST_METHOD(ScriptStruct__Engine__WheeledVehicleMovementComponent4W__VehicleEngineData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, TorqueCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MaxRPM, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MOI, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateFullThrottle, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchEngaged, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchDisengaged, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, UnknownData_Q4MD, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleEngineData, 0x0088);
		}

		// ScriptStruct Engine.WheeledVehicleMovementComponent4W.VehicleDifferential4WData
		TEST_METHOD(ScriptStruct__Engine__WheeledVehicleMovementComponent4W__VehicleDifferential4WData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, DifferentialType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, UnknownData_1SVG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontRearSplit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontLeftRightSplit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearLeftRightSplit, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, CentreBias, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearBias, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleDifferential4WData, 0x001C);
		}

		// ScriptStruct Engine.WheeledVehicleMovementComponent4W.VehicleGearData
		TEST_METHOD(ScriptStruct__Engine__WheeledVehicleMovementComponent4W__VehicleGearData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, Ratio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, DownRatio, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, UpRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleGearData, 0x000C);
		}

		// ScriptStruct Engine.WheeledVehicleMovementComponent4W.VehicleTransmissionData
		TEST_METHOD(ScriptStruct__Engine__WheeledVehicleMovementComponent4W__VehicleTransmissionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, bUseGearAutoBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_25HY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearSwitchTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearAutoBoxLatency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, FinalRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ForwardGears, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ReverseGearRatio, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, NeutralGearUpRatio, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ClutchStrength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_94LL, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleTransmissionData, 0x0030);
		}

		// ScriptStruct Engine.AtmosphericFogComponent.AtmospherePrecomputeParameters
		TEST_METHOD(ScriptStruct__Engine__AtmosphericFogComponent__AtmospherePrecomputeParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DensityHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DecayHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, MaxScatteringOrder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterAltitudeSampleNum, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuNum, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuSNum, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterNuNum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeParameters, 0x002C);
		}

		// ScriptStruct Engine.SoundAttenuation.AttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuation__AttenuationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSettings, UnknownData_TS0D, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSettings, DistanceAlgorithm, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSettings, DistanceType, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSettings, AttenuationShape, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSettings, UnknownData_CFNL, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSettings, dBAttenuationAtMax, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSettings, OmniRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSettings, RadiusMin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSettings, RadiusMax, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSettings, AttenuationShapeExtents, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSettings, ConeOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSettings, FalloffDistance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSettings, LPFRadiusMin, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSettings, LPFRadiusMax, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttenuationSettings, 0x0034);
		}

		// ScriptStruct Engine.AudioComponent.AudioComponentParam
		TEST_METHOD(ScriptStruct__Engine__AudioComponent__AudioComponentParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, FloatParam, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, BoolParam, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_0USP, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, IntParam, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_1ARQ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, WaveParam, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, SoundWaveParam, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioComponentParam, 0x0028);
		}

		// ScriptStruct Engine.EngineTypes.SubtitleCue
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__SubtitleCue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, UnknownData_O9EM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Time, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, UnknownData_L70H, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubtitleCue, 0x0030);
		}

		// ScriptStruct Engine.EngineTypes.LightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__LightmassLightSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, IndirectLightingScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, IndirectLightingSaturation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, ShadowExponent, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassLightSettings, 0x000C);
		}

		// ScriptStruct Engine.EngineTypes.LightmassDirectionalLightSettings
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__LightmassDirectionalLightSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDirectionalLightSettings, LightSourceAngle, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDirectionalLightSettings, 0x0010);
		}

		// ScriptStruct Engine.EngineTypes.LightmassPointLightSettings
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__LightmassPointLightSettings)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPointLightSettings, 0x000C);
		}

		// ScriptStruct Engine.NavigationGraph.NavGraphNode
		TEST_METHOD(ScriptStruct__Engine__NavigationGraph__NavGraphNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, UnknownData_6648, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphNode, 0x0018);
		}

		// ScriptStruct Engine.LandscapeComponent.WeightmapLayerAllocationInfo
		TEST_METHOD(ScriptStruct__Engine__LandscapeComponent__WeightmapLayerAllocationInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, LayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, LayerInfo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureChannel, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, UnknownData_EZ7K, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapLayerAllocationInfo, 0x0018);
		}

		// ScriptStruct Engine.MaterialBillboardComponent.MaterialSpriteElement
		TEST_METHOD(ScriptStruct__Engine__MaterialBillboardComponent__MaterialSpriteElement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToOpacityCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_2V9X, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_XED9, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToSizeCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialSpriteElement, 0x0028);
		}

		// ScriptStruct Engine.EngineTypes.FractureEffect
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__FractureEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, ParticleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, Sound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureEffect, 0x0010);
		}

		// ScriptStruct Engine.StaticMeshComponent.PaintedVertex
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponent__PaintedVertex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Color, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintedVertex, 0x0014);
		}

		// ScriptStruct Engine.StaticMeshComponent.StaticMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponent__StaticMeshComponentLODInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_CBR5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, PaintedVertices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_Z3LQ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentLODInfo, 0x0028);
		}

		// ScriptStruct Engine.InstancedStaticMeshComponent.InstancedStaticMeshInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshComponent__InstancedStaticMeshInstanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, LightmapUVBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, ShadowmapUVBias, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshInstanceData, 0x0050);
		}

		// ScriptStruct Engine.SplineMeshComponent.SplineMeshParams
		TEST_METHOD(ScriptStruct__Engine__SplineMeshComponent__SplineMeshParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartRoll, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndPos, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndTangent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndRoll, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndOffset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshParams, 0x0058);
		}

		// ScriptStruct Engine.ParticleSystem.ParticleSystemLOD
		TEST_METHOD(ScriptStruct__Engine__ParticleSystem__ParticleSystemLOD)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemLOD, UnknownData_R2RA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemLOD, 0x0001);
		}

		// ScriptStruct Engine.ParticleSystem.LODSoloTrack
		TEST_METHOD(ScriptStruct__Engine__ParticleSystem__LODSoloTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODSoloTrack, SoloEnableSetting, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODSoloTrack, 0x0010);
		}

		// ScriptStruct Engine.ParticleSystem.NamedEmitterMaterial
		TEST_METHOD(ScriptStruct__Engine__ParticleSystem__NamedEmitterMaterial)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedEmitterMaterial, 0x0010);
		}

		// ScriptStruct Engine.TimelineComponent.TimelineEventEntry
		TEST_METHOD(ScriptStruct__Engine__TimelineComponent__TimelineEventEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, EventFunc, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineEventEntry, 0x0014);
		}

		// ScriptStruct Engine.TimelineComponent.TimelineVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineComponent__TimelineVectorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorPropertyName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorProperty, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, UnknownData_37RV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineVectorTrack, 0x0030);
		}

		// ScriptStruct Engine.TimelineComponent.TimelineFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineComponent__TimelineFloatTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatPropertyName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatProperty, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, UnknownData_YXSG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineFloatTrack, 0x0030);
		}

		// ScriptStruct Engine.TimelineComponent.TimelineLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineComponent__TimelineLinearColorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorPropertyName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorProperty, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, UnknownData_YSMY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineLinearColorTrack, 0x0030);
		}

		// ScriptStruct Engine.TimelineComponent.Timeline
		TEST_METHOD(ScriptStruct__Engine__TimelineComponent__Timeline)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, LengthMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_F76T, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_A6R9, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PlayRate, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Position, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_2Q1Y, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Events, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpVectors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpFloats, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpLinearColors, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelinePostUpdateFunc, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelineFinishedFunc, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_REGU, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PropertySetObject, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionPropertyName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionProperty, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeline, 0x0098);
		}

		// ScriptStruct Engine.AnimSequenceBase.AnimNotifyEvent
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceBase__AnimNotifyEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, DisplayTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerTimeOffset, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndTriggerTimeOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerWeightThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Notify, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyStateClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bIgnoreOnDediServer, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_GARS, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Duration, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEvent, 0x0030);
		}

		// ScriptStruct Engine.AnimSequenceBase.AnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceBase__AnimCurveBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, UnknownData_T8NS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, LastObservedName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, UnknownData_P0UF, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveBase, 0x0018);
		}

		// ScriptStruct Engine.AnimSequenceBase.FloatCurve
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceBase__FloatCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatCurve, FloatCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatCurve, CurveTypeFlags, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatCurve, UnknownData_FQZD, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatCurve, 0x0088);
		}

		// ScriptStruct Engine.AnimSequenceBase.RawCurveTracks
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceBase__RawCurveTracks)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawCurveTracks, FloatCurves, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawCurveTracks, 0x0010);
		}

		// ScriptStruct Engine.AnimCompositeBase.AnimSegment
		TEST_METHOD(ScriptStruct__Engine__AnimCompositeBase__AnimSegment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, StartPos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimStartOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimEndOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimStartTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimEndTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimPlayRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, LoopingCount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, UnknownData_8V8Y, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSegment, 0x0028);
		}

		// ScriptStruct Engine.AnimCompositeBase.AnimTrack
		TEST_METHOD(ScriptStruct__Engine__AnimCompositeBase__AnimTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTrack, AnimSegments, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTrack, 0x0010);
		}

		// ScriptStruct Engine.AnimSequence.TrackToSkeletonMap
		TEST_METHOD(ScriptStruct__Engine__AnimSequence__TrackToSkeletonMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackToSkeletonMap, SkeletonIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackToSkeletonMap, BoneTreeIndex, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackToSkeletonMap, 0x0008);
		}

		// ScriptStruct Engine.AnimSequence.TranslationTrack
		TEST_METHOD(ScriptStruct__Engine__AnimSequence__TranslationTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTranslationTrack, 0x0020);
		}

		// ScriptStruct Engine.AnimSequence.RotationTrack
		TEST_METHOD(ScriptStruct__Engine__AnimSequence__RotationTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, RotKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationTrack, 0x0020);
		}

		// ScriptStruct Engine.AnimSequence.ScaleTrack
		TEST_METHOD(ScriptStruct__Engine__AnimSequence__ScaleTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, ScaleKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScaleTrack, 0x0020);
		}

		// ScriptStruct Engine.AnimSequence.CurveTrack
		TEST_METHOD(ScriptStruct__Engine__AnimSequence__CurveTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTrack, 0x0018);
		}

		// ScriptStruct Engine.AnimSequence.CompressedOffsetData
		TEST_METHOD(ScriptStruct__Engine__AnimSequence__CompressedOffsetData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedOffsetData, OffsetData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedOffsetData, StripSize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedOffsetData, UnknownData_AZP3, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedOffsetData, 0x0018);
		}

		// ScriptStruct Engine.AnimMontage.CompositeSection
		TEST_METHOD(ScriptStruct__Engine__AnimMontage__CompositeSection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, SectionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, StarTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, StartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, NextSectionName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSection, 0x0018);
		}

		// ScriptStruct Engine.AnimMontage.SlotAnimationTrack
		TEST_METHOD(ScriptStruct__Engine__AnimMontage__SlotAnimationTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, AnimTrack, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotAnimationTrack, 0x0018);
		}

		// ScriptStruct Engine.AnimMontage.BranchingPoint
		TEST_METHOD(ScriptStruct__Engine__AnimMontage__BranchingPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, DisplayTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, TriggerTimeOffset, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPoint, 0x0010);
		}

		// ScriptStruct Engine.BlendSpaceBase.BlendParameter
		TEST_METHOD(ScriptStruct__Engine__BlendSpaceBase__BlendParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Min, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Max, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Offset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, GridNum, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendParameter, 0x0020);
		}

		// ScriptStruct Engine.BlendSpaceBase.InterpolationParameter
		TEST_METHOD(ScriptStruct__Engine__BlendSpaceBase__InterpolationParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, UnknownData_XZCA, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpolationParameter, 0x0008);
		}

		// ScriptStruct Engine.BlendSpaceBase.PerBoneInterpolation
		TEST_METHOD(ScriptStruct__Engine__BlendSpaceBase__PerBoneInterpolation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, InterpolationSpeedPerSec, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneInterpolation, 0x0010);
		}

		// ScriptStruct Engine.BlendSpaceBase.BlendSample
		TEST_METHOD(ScriptStruct__Engine__BlendSpaceBase__BlendSample)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, SampleValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, UnknownData_IJYY, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSample, 0x0018);
		}

		// ScriptStruct Engine.BlendSpaceBase.EditorElement
		TEST_METHOD(ScriptStruct__Engine__BlendSpaceBase__EditorElement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Indices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Weights, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorElement, 0x0018);
		}

		// ScriptStruct Engine.AnimationAsset.BlendSampleData
		TEST_METHOD(ScriptStruct__Engine__AnimationAsset__BlendSampleData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SampleDataIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, TotalWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_XN8X, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSampleData, 0x0020);
		}

		// ScriptStruct Engine.AnimationAsset.BlendFilter
		TEST_METHOD(ScriptStruct__Engine__AnimationAsset__BlendFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendFilter, UnknownData_S4KO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendFilter, 0x0090);
		}

		// ScriptStruct Engine.AnimSet.AnimSetMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__AnimSet__AnimSetMeshLinkup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSetMeshLinkup, BoneToTrackTable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSetMeshLinkup, 0x0010);
		}

		// ScriptStruct Engine.EngineTypes.FilePath
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__FilePath)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilePath, FilePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilePath, 0x0010);
		}

		// ScriptStruct Engine.AutomationTestSettings.EditorMapPerformanceTestDefinition
		TEST_METHOD(ScriptStruct__Engine__AutomationTestSettings__EditorMapPerformanceTestDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, PerformanceTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, TestTimer, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, UnknownData_VIS4, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorMapPerformanceTestDefinition, 0x0018);
		}

		// ScriptStruct Engine.AutomationTestSettings.ImportFactorySettingValues
		TEST_METHOD(ScriptStruct__Engine__AutomationTestSettings__ImportFactorySettingValues)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, SettingName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportFactorySettingValues, 0x0020);
		}

		// ScriptStruct Engine.AutomationTestSettings.EditorImportWorkflowDefinition
		TEST_METHOD(ScriptStruct__Engine__AutomationTestSettings__EditorImportWorkflowDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, FactorySettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportWorkflowDefinition, 0x0020);
		}

		// ScriptStruct Engine.AutomationTestSettings.BuildPromotionImportWorkflowSettings
		TEST_METHOD(ScriptStruct__Engine__AutomationTestSettings__BuildPromotionImportWorkflowSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Diffuse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, ReimportStaticMesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, BlendShapeMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, MorphMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SkeletalMesh, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Animation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Sound, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SurroundSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, OtherAssetsToImport, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionImportWorkflowSettings, 0x0150);
		}

		// ScriptStruct Engine.AutomationTestSettings.BuildPromotionOpenAssetSettings
		TEST_METHOD(ScriptStruct__Engine__AutomationTestSettings__BuildPromotionOpenAssetSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, BlueprintAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, MaterialAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, ParticleSystemAsset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, SkeletalMeshAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, StaticMeshAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, TextureAsset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionOpenAssetSettings, 0x0060);
		}

		// ScriptStruct Engine.AutomationTestSettings.BuildPromotionBlueprintSettings
		TEST_METHOD(ScriptStruct__Engine__AutomationTestSettings__BuildPromotionBlueprintSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionBlueprintSettings, FirstMeshPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionBlueprintSettings, SecondMeshPath, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionBlueprintSettings, 0x0020);
		}

		// ScriptStruct Engine.EngineTypes.DirectoryPath
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__DirectoryPath)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectoryPath, Path, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectoryPath, 0x0010);
		}

		// ScriptStruct Engine.AutomationTestSettings.BuildPromotionNewProjectSettings
		TEST_METHOD(ScriptStruct__Engine__AutomationTestSettings__BuildPromotionNewProjectSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectFolderOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectNameOverride, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionNewProjectSettings, 0x0020);
		}

		// ScriptStruct Engine.AutomationTestSettings.BuildPromotionTestSettings
		TEST_METHOD(ScriptStruct__Engine__AutomationTestSettings__BuildPromotionTestSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, DefaultStaticMeshAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, ImportWorkflow, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, OpenAssets, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, BlueprintSettings, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, NewProjectSettings, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, SourceControlMaterial, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionTestSettings, 0x0210);
		}

		// ScriptStruct Engine.AutomationTestSettings.OpenTestAsset
		TEST_METHOD(ScriptStruct__Engine__AutomationTestSettings__OpenTestAsset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOpenTestAsset, AssetToOpen, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOpenTestAsset, bSkipTestWhenUnAttended, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOpenTestAsset, UnknownData_IJEH, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOpenTestAsset, 0x0018);
		}

		// ScriptStruct Engine.AutomationTestSettings.ExternalToolDefinition
		TEST_METHOD(ScriptStruct__Engine__AutomationTestSettings__ExternalToolDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ToolName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ExecutablePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, CommandLineOptions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, WorkingDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptExtension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptDirectory, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExternalToolDefinition, 0x0060);
		}

		// ScriptStruct Engine.AutomationTestSettings.EditorImportExportTestDefinition
		TEST_METHOD(ScriptStruct__Engine__AutomationTestSettings__EditorImportExportTestDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ExportFileExtension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, bSkipExport, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, UnknownData_IGWP, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, FactorySettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportExportTestDefinition, 0x0038);
		}

		// ScriptStruct Engine.AvoidanceManager.NavAvoidanceData
		TEST_METHOD(ScriptStruct__Engine__AvoidanceManager__NavAvoidanceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAvoidanceData, UnknownData_06WD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceData, 0x0038);
		}

		// ScriptStruct Engine.EdGraphPin.SimpleMemberReference
		TEST_METHOD(ScriptStruct__Engine__EdGraphPin__SimpleMemberReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberParentClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleMemberReference, 0x0020);
		}

		// ScriptStruct Engine.EdGraphPin.EdGraphPinType
		TEST_METHOD(ScriptStruct__Engine__EdGraphPin__EdGraphPinType)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategory, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryObject, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryMemberReference, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, bIsArray, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, bIsReference, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, bIsConst, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, bIsWeakPointer, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, UnknownData_9EKY, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinType, 0x0050);
		}

		// ScriptStruct Engine.AnimBlueprint.AnimGroupInfo
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprint__AnimGroupInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Color, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInfo, 0x0018);
		}

		// ScriptStruct Engine.DataTable.TableRowBase
		TEST_METHOD(ScriptStruct__Engine__DataTable__TableRowBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowBase, UnknownData_P0P0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowBase, 0x0001);
		}

		// ScriptStruct Engine.DialogueTypes.DialogueContext
		TEST_METHOD(ScriptStruct__Engine__DialogueTypes__DialogueContext)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Speaker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Targets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContext, 0x0018);
		}

		// ScriptStruct Engine.KismetRenderingLibrary.DrawToRenderTargetContext
		TEST_METHOD(ScriptStruct__Engine__KismetRenderingLibrary__DrawToRenderTargetContext)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, RenderTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, UnknownData_ARCL, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrawToRenderTargetContext, 0x0010);
		}

		// ScriptStruct Engine.KismetSystemLibrary.GenericStruct
		TEST_METHOD(ScriptStruct__Engine__KismetSystemLibrary__GenericStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericStruct, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericStruct, 0x0004);
		}

		// ScriptStruct Engine.EngineTypes.DebugFloatHistory
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__DebugFloatHistory)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, Samples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MinValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, bAutoAdjustMinMax, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, UnknownData_AJBF, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugFloatHistory, 0x0020);
		}

		// ScriptStruct Engine.KismetTextLibrary.FormatTextArgument
		TEST_METHOD(ScriptStruct__Engine__KismetTextLibrary__FormatTextArgument)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatTextArgument, ArgumentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatTextArgument, UnknownData_SBTP, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatTextArgument, TextValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatTextArgument, UnknownData_CZYA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFormatTextArgument, 0x0050);
		}

		// ScriptStruct Engine.AnimStateMachineTypes.BakedStateExitTransition
		TEST_METHOD(ScriptStruct__Engine__AnimStateMachineTypes__BakedStateExitTransition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CanTakeDelegateIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CustomResultNodeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, TransitionIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bDesiredTransitionReturnValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, UnknownData_S20A, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, PoseEvaluatorLinks, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStateExitTransition, 0x0020);
		}

		// ScriptStruct Engine.AnimStateMachineTypes.BakedAnimationState
		TEST_METHOD(ScriptStruct__Engine__AnimStateMachineTypes__BakedAnimationState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, FullyBlendedNotify, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bIsAConduit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_A0K4, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EntryRuleNodeIndex, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationState, 0x0030);
		}

		// ScriptStruct Engine.AnimStateMachineTypes.AnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimStateMachineTypes__AnimationStateBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateBase, StateName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateBase, 0x0008);
		}

		// ScriptStruct Engine.AnimStateMachineTypes.AnimationTransitionBetweenStates
		TEST_METHOD(ScriptStruct__Engine__AnimStateMachineTypes__AnimationTransitionBetweenStates)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, PreviousState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, NextState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CrossfadeDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, StartNotify, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, EndNotify, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, InterruptNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CrossfadeMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, LogicType, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_IBCI, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionBetweenStates, 0x0024);
		}

		// ScriptStruct Engine.AnimStateMachineTypes.BakedAnimationStateMachine
		TEST_METHOD(ScriptStruct__Engine__AnimStateMachineTypes__BakedAnimationStateMachine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, MachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, InitialState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, UnknownData_V9F0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, States, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, Transitions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationStateMachine, 0x0030);
		}

		// ScriptStruct Engine.BodySetup.KSphereElem
		TEST_METHOD(ScriptStruct__Engine__BodySetup__KSphereElem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, TM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Center, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Radius, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphereElem, 0x0050);
		}

		// ScriptStruct Engine.BodySetup.KBoxElem
		TEST_METHOD(ScriptStruct__Engine__BodySetup__KBoxElem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, TM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Center, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, UnknownData_XZHM, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Orientation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, X, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Y, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Z, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, UnknownData_INDR, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKBoxElem, 0x0070);
		}

		// ScriptStruct Engine.BodySetup.KSphylElem
		TEST_METHOD(ScriptStruct__Engine__BodySetup__KSphylElem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, TM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Center, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, UnknownData_9L7O, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Orientation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Radius, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Length, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, UnknownData_I8OR, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphylElem, 0x0070);
		}

		// ScriptStruct Engine.BodySetup.KConvexElem
		TEST_METHOD(ScriptStruct__Engine__BodySetup__KConvexElem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, VertexData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, ElemBox, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_2O11, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, Transform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_NWP4, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKConvexElem, 0x0070);
		}

		// ScriptStruct Engine.BodySetup.KAggregateGeom
		TEST_METHOD(ScriptStruct__Engine__BodySetup__KAggregateGeom)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphereElems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, BoxElems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphylElems, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, ConvexElems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, UnknownData_VQI5, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKAggregateGeom, 0x0048);
		}

		// ScriptStruct Engine.CircleElement2D
		TEST_METHOD(ScriptStruct__Engine__CircleElement2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCircleElement2D, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCircleElement2D, Radius, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCircleElement2D, 0x000C);
		}

		// ScriptStruct Engine.BoxElement2D
		TEST_METHOD(ScriptStruct__Engine__BoxElement2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxElement2D, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxElement2D, Width, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxElement2D, Height, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxElement2D, Angle, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoxElement2D, 0x0014);
		}

		// ScriptStruct Engine.ConvexElement2D
		TEST_METHOD(ScriptStruct__Engine__ConvexElement2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvexElement2D, VertexData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConvexElement2D, 0x0010);
		}

		// ScriptStruct Engine.AggregateGeometry2D
		TEST_METHOD(ScriptStruct__Engine__AggregateGeometry2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAggregateGeometry2D, CircleElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAggregateGeometry2D, BoxElements, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAggregateGeometry2D, ConvexElements, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAggregateGeometry2D, 0x0030);
		}

		// ScriptStruct Engine.BoneMaskFilter.BranchFilter
		TEST_METHOD(ScriptStruct__Engine__BoneMaskFilter__BranchFilter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BlendDepth, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchFilter, 0x000C);
		}

		// ScriptStruct Engine.BoneMaskFilter.InputBlendPose
		TEST_METHOD(ScriptStruct__Engine__BoneMaskFilter__InputBlendPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputBlendPose, BranchFilters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputBlendPose, 0x0010);
		}

		// ScriptStruct Engine.BrushBuilder.BuilderPoly
		TEST_METHOD(ScriptStruct__Engine__BrushBuilder__BuilderPoly)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, VertexIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, Direction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, ItemName, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, PolyFlags, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuilderPoly, 0x0020);
		}

		// ScriptStruct Engine.CameraModifier_CameraShake.CameraShakeInstance
		TEST_METHOD(ScriptStruct__Engine__CameraModifier_CameraShake__CameraShakeInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInstance, SourceShake, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInstance, SourceShakeName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInstance, OscillatorTimeRemaining, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInstance, UnknownData_48AU, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInstance, CurrentBlendInTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInstance, UnknownData_B51T, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInstance, CurrentBlendOutTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInstance, LocSinOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInstance, RotSinOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInstance, FOVSinOffset, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInstance, Scale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInstance, Speed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInstance, AnimInst, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInstance, PlaySpace, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInstance, UnknownData_ZO3X, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInstance, UserPlaySpaceMatrix, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeInstance, 0x00A0);
		}

		// ScriptStruct Engine.CameraShake.FOscillator
		TEST_METHOD(ScriptStruct__Engine__CameraShake__FOscillator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, InitialOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, UnknownData_5ZNV, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFOscillator, 0x000C);
		}

		// ScriptStruct Engine.CameraShake.ROscillator
		TEST_METHOD(ScriptStruct__Engine__CameraShake__ROscillator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Yaw, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Roll, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FROscillator, 0x0024);
		}

		// ScriptStruct Engine.CameraShake.VOscillator
		TEST_METHOD(ScriptStruct__Engine__CameraShake__VOscillator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOscillator, 0x0024);
		}

		// ScriptStruct Engine.EngineTypes.CanvasUVTri
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__CanvasUVTri)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Pos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_UV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Color, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Pos, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_UV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Color, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Pos, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_UV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Color, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasUVTri, 0x0060);
		}

		// ScriptStruct Engine.CollisionProfile.CollisionResponseTemplate
		TEST_METHOD(ScriptStruct__Engine__CollisionProfile__CollisionResponseTemplate)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_B5OB, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, ObjectTypeName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_YIJM, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CustomResponses, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, HelpMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, bCanModify, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_7104, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseTemplate, 0x0060);
		}

		// ScriptStruct Engine.CollisionProfile.CustomChannelSetup
		TEST_METHOD(ScriptStruct__Engine__CollisionProfile__CustomChannelSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, UnknownData_KKKO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Name, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, DefaultResponse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bTraceType, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bStaticObject, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, UnknownData_BBA1, 0x000F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomChannelSetup, 0x0010);
		}

		// ScriptStruct Engine.CollisionProfile.CustomProfile
		TEST_METHOD(ScriptStruct__Engine__CollisionProfile__CustomProfile)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, CustomResponses, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomProfile, 0x0018);
		}

		// ScriptStruct Engine.EngineTypes.Redirector
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__Redirector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, OldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, NewName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRedirector, 0x0010);
		}

		// ScriptStruct Engine.DestructibleFractureSettings.FractureMaterial
		TEST_METHOD(ScriptStruct__Engine__DestructibleFractureSettings__FractureMaterial)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UVScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UVOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, Tangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UAngle, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, InteriorElementIndex, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureMaterial, 0x0024);
		}

		// ScriptStruct Engine.DestructibleFractureSettings.DestructibleChunkParameters
		TEST_METHOD(ScriptStruct__Engine__DestructibleFractureSettings__DestructibleChunkParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bIsSupportChunk, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotFracture, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotDamage, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotCrumble, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleChunkParameters, 0x0004);
		}

		// ScriptStruct Engine.DialogueWave.DialogueContextMapping
		TEST_METHOD(ScriptStruct__Engine__DialogueWave__DialogueContextMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Context, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, SoundWave, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Proxy, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContextMapping, 0x0028);
		}

		// ScriptStruct Engine.ComponentDelegateBinding.BlueprintComponentDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__ComponentDelegateBinding__BlueprintComponentDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, ComponentPropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, DelegatePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentDelegateBinding, 0x0018);
		}

		// ScriptStruct Engine.InputDelegateBinding.BlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__InputDelegateBinding__BlueprintInputDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputDelegateBinding, UnknownData_D848, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputDelegateBinding, 0x0004);
		}

		// ScriptStruct Engine.InputActionDelegateBinding.BlueprintInputActionDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__InputActionDelegateBinding__BlueprintInputActionDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputActionName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputKeyEvent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_FTH5, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputActionDelegateBinding, 0x0018);
		}

		// ScriptStruct Engine.InputAxisDelegateBinding.BlueprintInputAxisDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__InputAxisDelegateBinding__BlueprintInputAxisDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, InputAxisName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, FunctionNameToBind, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisDelegateBinding, 0x0014);
		}

		// ScriptStruct Engine.InputAxisKeyDelegateBinding.BlueprintInputAxisKeyDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__InputAxisKeyDelegateBinding__BlueprintInputAxisKeyDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, UnknownData_8TM8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, AxisKey, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, FunctionNameToBind, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisKeyDelegateBinding, 0x0028);
		}

		// ScriptStruct Engine.InputComponent.InputChord
		TEST_METHOD(ScriptStruct__Engine__InputComponent__InputChord)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, UnknownData_STY1, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputChord, 0x0020);
		}

		// ScriptStruct Engine.InputKeyDelegateBinding.BlueprintInputKeyDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__InputKeyDelegateBinding__BlueprintInputKeyDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_QBIK, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputChord, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputKeyEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_N85K, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, FunctionNameToBind, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_DA2C, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputKeyDelegateBinding, 0x0038);
		}

		// ScriptStruct Engine.InputTouchDelegateBinding.BlueprintInputTouchDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__InputTouchDelegateBinding__BlueprintInputTouchDelegateBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, InputKeyEvent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, UnknownData_6640, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, FunctionNameToBind, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputTouchDelegateBinding, 0x0010);
		}

		// ScriptStruct Engine.FontImportOptions.FontImportOptionsData
		TEST_METHOD(ScriptStruct__Engine__FontImportOptions__FontImportOptionsData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, FontName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Height, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_O2ES, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharacterSet, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_E0V1, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Chars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnicodeRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFilePath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFileWildcard, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_42BB, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ForegroundColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_U8Q6, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageWidth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageMaxHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, XPadding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, YPadding, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxTop, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxBottom, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxRight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxLeft, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_FV4C, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Kerning, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_9NU2, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScaleFactor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScanRadiusScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_NYUE, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontImportOptionsData, 0x00B0);
		}

		// ScriptStruct Engine.Font.FontCharacter
		TEST_METHOD(ScriptStruct__Engine__Font__FontCharacter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, USize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, TextureIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, UnknownData_Z4WN, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VerticalOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontCharacter, 0x0018);
		}

		// ScriptStruct Engine.PlayerInput.KeyBind
		TEST_METHOD(ScriptStruct__Engine__PlayerInput__KeyBind)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Command, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, UnknownData_V058, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBind, 0x0030);
		}

		// ScriptStruct Engine.PlayerInput.InputAxisProperties
		TEST_METHOD(ScriptStruct__Engine__PlayerInput__InputAxisProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, DeadZone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Sensitivity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Exponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, UnknownData_NTUX, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisProperties, 0x0010);
		}

		// ScriptStruct Engine.PlayerInput.InputAxisConfigEntry
		TEST_METHOD(ScriptStruct__Engine__PlayerInput__InputAxisConfigEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisKeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisProperties, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisConfigEntry, 0x0018);
		}

		// ScriptStruct Engine.PlayerInput.InputActionKeyMapping
		TEST_METHOD(ScriptStruct__Engine__PlayerInput__InputActionKeyMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, Key, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, UnknownData_5491, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionKeyMapping, 0x0028);
		}

		// ScriptStruct Engine.PlayerInput.InputAxisKeyMapping
		TEST_METHOD(ScriptStruct__Engine__PlayerInput__InputAxisKeyMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, AxisName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Key, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, UnknownData_O1HU, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisKeyMapping, 0x0028);
		}

		// ScriptStruct Engine.InterpCurveEdSetup.CurveEdEntry
		TEST_METHOD(ScriptStruct__Engine__InterpCurveEdSetup__CurveEdEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, UnknownData_CIER, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bHideCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bColorCurve, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bFloatingPointColorCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bClamp, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampLow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampHigh, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdEntry, 0x0038);
		}

		// ScriptStruct Engine.InterpCurveEdSetup.CurveEdTab
		TEST_METHOD(ScriptStruct__Engine__InterpCurveEdSetup__CurveEdTab)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, TabName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, Curves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndInput, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartOutput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndOutput, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdTab, 0x0030);
		}

		// ScriptStruct Engine.InterpData.AnimSetBakeAndPruneStatus
		TEST_METHOD(ScriptStruct__Engine__InterpData__AnimSetBakeAndPruneStatus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSetBakeAndPruneStatus, AnimSetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSetBakeAndPruneStatus, UnknownData_P6Z2, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSetBakeAndPruneStatus, 0x0018);
		}

		// ScriptStruct Engine.InterpTrackBoolProp.BoolTrackKey
		TEST_METHOD(ScriptStruct__Engine__InterpTrackBoolProp__BoolTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, UnknownData_O9C3, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolTrackKey, 0x0008);
		}

		// ScriptStruct Engine.InterpTrackDirector.DirectorTrackCut
		TEST_METHOD(ScriptStruct__Engine__InterpTrackDirector__DirectorTrackCut)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TransitionTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TargetCamGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, ShotNumber, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectorTrackCut, 0x0014);
		}

		// ScriptStruct Engine.InterpTrackEvent.EventTrackKey
		TEST_METHOD(ScriptStruct__Engine__InterpTrackEvent__EventTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, EventName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventTrackKey, 0x000C);
		}

		// ScriptStruct Engine.InterpTrackAnimControl.AnimControlTrackKey
		TEST_METHOD(ScriptStruct__Engine__InterpTrackAnimControl__AnimControlTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_S41O, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimStartOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimEndOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_PL7Y, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimControlTrackKey, 0x0020);
		}

		// ScriptStruct Engine.InterpTrackMove.InterpLookupPoint
		TEST_METHOD(ScriptStruct__Engine__InterpTrackMove__InterpLookupPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupPoint, 0x000C);
		}

		// ScriptStruct Engine.InterpTrackMove.InterpLookupTrack
		TEST_METHOD(ScriptStruct__Engine__InterpTrackMove__InterpLookupTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupTrack, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupTrack, 0x0010);
		}

		// ScriptStruct Engine.InterpTrackParticleReplay.ParticleReplayTrackKey
		TEST_METHOD(ScriptStruct__Engine__InterpTrackParticleReplay__ParticleReplayTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Duration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, ClipIDNumber, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleReplayTrackKey, 0x000C);
		}

		// ScriptStruct Engine.InterpTrackToggle.ToggleTrackKey
		TEST_METHOD(ScriptStruct__Engine__InterpTrackToggle__ToggleTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, ToggleAction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, UnknownData_IQLV, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToggleTrackKey, 0x0008);
		}

		// ScriptStruct Engine.InterpTrackSound.SoundTrackKey
		TEST_METHOD(ScriptStruct__Engine__InterpTrackSound__SoundTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Volume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Pitch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, UnknownData_0FL3, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Sound, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundTrackKey, 0x0018);
		}

		// ScriptStruct Engine.InterpTrackVisibility.VisibilityTrackKey
		TEST_METHOD(ScriptStruct__Engine__InterpTrackVisibility__VisibilityTrackKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Action, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, ActiveCondition, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, UnknownData_5IDS, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityTrackKey, 0x0008);
		}

		// ScriptStruct Engine.EngineTypes.PrimitiveMaterialRef
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__PrimitiveMaterialRef)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Primitive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Decal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, ElementIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, UnknownData_CDQ0, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveMaterialRef, 0x0018);
		}

		// ScriptStruct Engine.LandscapeSplineSegment.LandscapeSplineSegmentConnection
		TEST_METHOD(ScriptStruct__Engine__LandscapeSplineSegment__LandscapeSplineSegmentConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, ControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, TangentLen, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, SocketName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, UnknownData_RMM6, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineSegmentConnection, 0x0018);
		}

		// ScriptStruct Engine.LandscapeSplineSegment.LandscapeSplineInterpPoint
		TEST_METHOD(ScriptStruct__Engine__LandscapeSplineSegment__LandscapeSplineInterpPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Left, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Right, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffLeft, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffRight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, StartEndFalloff, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineInterpPoint, 0x0040);
		}

		// ScriptStruct Engine.LandscapeSplineControlPoint.LandscapeSplineConnection
		TEST_METHOD(ScriptStruct__Engine__LandscapeSplineControlPoint__LandscapeSplineConnection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, Segment, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, UnknownData_4RF8, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineConnection, 0x0010);
		}

		// ScriptStruct Engine.Layer.LayerActorStats
		TEST_METHOD(ScriptStruct__Engine__Layer__LayerActorStats)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Total, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, UnknownData_NPPV, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerActorStats, 0x0010);
		}

		// ScriptStruct Engine.MaterialExpression.ExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__MaterialExpression__ExpressionOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, OutputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, mask, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, MaskR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, MaskG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, MaskB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, MaskA, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, UnknownData_TXW3, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionOutput, 0x0028);
		}

		// ScriptStruct Engine.MaterialExpression.ExpressionInput
		TEST_METHOD(ScriptStruct__Engine__MaterialExpression__ExpressionInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, Expression, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, OutputIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, UnknownData_770X, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, InputName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, mask, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, MaskR, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, MaskG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, MaskB, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, MaskA, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, GCC64_Padding, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionInput, 0x0038);
		}

		// ScriptStruct Engine.MaterialExpression.MaterialAttributesInput
		TEST_METHOD(ScriptStruct__Engine__MaterialExpression__MaterialAttributesInput)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialAttributesInput, 0x0038);
		}

		// ScriptStruct Engine.MaterialExpressionCustom.CustomInput
		TEST_METHOD(ScriptStruct__Engine__MaterialExpressionCustom__CustomInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, Input, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomInput, 0x0048);
		}

		// ScriptStruct Engine.MaterialExpressionLandscapeLayerBlend.LayerBlendInput
		TEST_METHOD(ScriptStruct__Engine__MaterialExpressionLandscapeLayerBlend__LayerBlendInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, BlendType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_NY6H, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, HeightInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, PreviewWeight, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstLayerInput, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstHeightInput, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_O888, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerBlendInput, 0x0098);
		}

		// ScriptStruct Engine.MaterialExpressionMaterialFunctionCall.FunctionExpressionInput
		TEST_METHOD(ScriptStruct__Engine__MaterialExpressionMaterialFunctionCall__FunctionExpressionInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, Input, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionInput, 0x0050);
		}

		// ScriptStruct Engine.MaterialExpressionMaterialFunctionCall.FunctionExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__MaterialExpressionMaterialFunctionCall__FunctionExpressionOutput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, Output, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionOutput, 0x0040);
		}

		// ScriptStruct Engine.Material.MaterialInput
		TEST_METHOD(ScriptStruct__Engine__Material__MaterialInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, Expression, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, OutputIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, UnknownData_YM8N, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, InputName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, mask, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, MaskR, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, MaskG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, MaskB, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, MaskA, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, GCC64_Padding, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInput, 0x0038);
		}

		// ScriptStruct Engine.Material.ColorMaterialInput
		TEST_METHOD(ScriptStruct__Engine__Material__ColorMaterialInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorMaterialInput, UnknownData_QASV, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorMaterialInput, Constant, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorMaterialInput, 0x0040);
		}

		// ScriptStruct Engine.Material.ScalarMaterialInput
		TEST_METHOD(ScriptStruct__Engine__Material__ScalarMaterialInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarMaterialInput, UnknownData_TA22, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarMaterialInput, Constant, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarMaterialInput, 0x0040);
		}

		// ScriptStruct Engine.Material.VectorMaterialInput
		TEST_METHOD(ScriptStruct__Engine__Material__VectorMaterialInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorMaterialInput, UnknownData_RIYR, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorMaterialInput, Constant, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorMaterialInput, 0x0048);
		}

		// ScriptStruct Engine.Material.Vector2MaterialInput
		TEST_METHOD(ScriptStruct__Engine__Material__Vector2MaterialInput)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2MaterialInput, UnknownData_ZGP4, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2MaterialInput, ConstantX, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2MaterialInput, ConstantY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2MaterialInput, UnknownData_IC7Q, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2MaterialInput, 0x0048);
		}

		// ScriptStruct Engine.Material.MaterialFunctionInfo
		TEST_METHOD(ScriptStruct__Engine__Material__MaterialFunctionInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, Function, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialFunctionInfo, 0x0018);
		}

		// ScriptStruct Engine.Material.MaterialParameterCollectionInfo
		TEST_METHOD(ScriptStruct__Engine__Material__MaterialParameterCollectionInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, ParameterCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterCollectionInfo, 0x0018);
		}

		// ScriptStruct Engine.MaterialInstance.FontParameterValue
		TEST_METHOD(ScriptStruct__Engine__MaterialInstance__FontParameterValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontPage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ExpressionGUID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, UnknownData_3CEM, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontParameterValue, 0x0028);
		}

		// ScriptStruct Engine.MaterialInstance.ScalarParameterValue
		TEST_METHOD(ScriptStruct__Engine__MaterialInstance__ScalarParameterValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ExpressionGUID, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterValue, 0x001C);
		}

		// ScriptStruct Engine.MaterialInstance.TextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__MaterialInstance__TextureParameterValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ExpressionGUID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureParameterValue, 0x0020);
		}

		// ScriptStruct Engine.MaterialInstance.VectorParameterValue
		TEST_METHOD(ScriptStruct__Engine__MaterialInstance__VectorParameterValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterValue, 0x0028);
		}

		// ScriptStruct Engine.MaterialInstanceBasePropertyOverrides
		TEST_METHOD(ScriptStruct__Engine__MaterialInstanceBasePropertyOverrides)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_OpacityMaskClipValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_BlendMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_ShadingModel, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_TwoSided, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, OpacityMaskClipValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, BlendMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, ShadingModel, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, UnknownData_I0UG, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, UnknownData_27PW, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInstanceBasePropertyOverrides, 0x0010);
		}

		// ScriptStruct Engine.Material.MaterialInstanceUsedWithOverride
		TEST_METHOD(ScriptStruct__Engine__Material__MaterialInstanceUsedWithOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceUsedWithOverride, UnknownData_UA53, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInstanceUsedWithOverride, 0x0004);
		}

		// ScriptStruct Engine.MaterialParameterCollection.CollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterCollection__CollectionParameterBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionParameterBase, 0x0018);
		}

		// ScriptStruct Engine.MaterialParameterCollection.CollectionScalarParameter
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterCollection__CollectionScalarParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionScalarParameter, 0x001C);
		}

		// ScriptStruct Engine.MaterialParameterCollection.CollectionVectorParameter
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterCollection__CollectionVectorParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionVectorParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionVectorParameter, 0x0028);
		}

		// ScriptStruct Engine.MountedDLCManager.MountedDLCInfo
		TEST_METHOD(ScriptStruct__Engine__MountedDLCManager__MountedDLCInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountedDLCInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountedDLCInfo, Path, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountedDLCInfo, ID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountedDLCInfo, ProductId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountedDLCInfo, UnknownData_9RN1, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountedDLCInfo, StoreProductIdOverride, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMountedDLCInfo, 0x0058);
		}

		// ScriptStruct Engine.MountedDLCManager.MountedDLCMapInfo
		TEST_METHOD(ScriptStruct__Engine__MountedDLCManager__MountedDLCMapInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountedDLCMapInfo, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMountedDLCMapInfo, Map, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMountedDLCMapInfo, 0x0020);
		}

		// ScriptStruct Engine.NavCollision.NavCollisionCylinder
		TEST_METHOD(ScriptStruct__Engine__NavCollision__NavCollisionCylinder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Radius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Height, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionCylinder, 0x0014);
		}

		// ScriptStruct Engine.NavCollision.NavCollisionBox
		TEST_METHOD(ScriptStruct__Engine__NavCollision__NavCollisionBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Extent, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionBox, 0x0018);
		}

		// ScriptStruct Engine.Distribution.DistributionLookupTable
		TEST_METHOD(ScriptStruct__Engine__Distribution__DistributionLookupTable)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Op, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryCount, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryStride, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, SubEntryStride, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_PI3J, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Values, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, LockFlag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_G748, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistributionLookupTable, 0x0028);
		}

		// ScriptStruct Engine.Distribution.RawDistribution
		TEST_METHOD(ScriptStruct__Engine__Distribution__RawDistribution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistribution, 0x0028);
		}

		// ScriptStruct Engine.DistributionVector.RawDistributionVector
		TEST_METHOD(ScriptStruct__Engine__DistributionVector__RawDistributionVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, Distribution, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionVector, 0x0038);
		}

		// ScriptStruct Engine.DistributionFloat.RawDistributionFloat
		TEST_METHOD(ScriptStruct__Engine__DistributionFloat__RawDistributionFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MinValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MaxValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, Distribution, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionFloat, 0x0038);
		}

		// ScriptStruct Engine.ParticleModuleBeamModifier.BeamModifierOptions
		TEST_METHOD(ScriptStruct__Engine__ParticleModuleBeamModifier__BeamModifierOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamModifierOptions, UnknownData_HPBV, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamModifierOptions, 0x0004);
		}

		// ScriptStruct Engine.ParticleModule.ParticleRandomSeedInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleModule__ParticleRandomSeedInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, UnknownData_8U2L, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, RandomSeeds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleRandomSeedInfo, 0x0020);
		}

		// ScriptStruct Engine.ParticleModuleEventGenerator.ParticleEvent_GenerateInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleModuleEventGenerator__ParticleEvent_GenerateInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_I4IX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_9F4R, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, CustomName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleModuleEventsToSendToGame, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEvent_GenerateInfo, 0x0028);
		}

		// ScriptStruct Engine.ParticleModuleLocationBoneSocket.LocationBoneSocketInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleModuleLocationBoneSocket__LocationBoneSocketInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, BoneSocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, Offset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationBoneSocketInfo, 0x0014);
		}

		// ScriptStruct Engine.ParticleModuleOrbit.OrbitOptions
		TEST_METHOD(ScriptStruct__Engine__ParticleModuleOrbit__OrbitOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrbitOptions, UnknownData_KOU9, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrbitOptions, 0x0004);
		}

		// ScriptStruct Engine.ParticleModuleParameterDynamic.EmitterDynamicParameter
		TEST_METHOD(ScriptStruct__Engine__ParticleModuleParameterDynamic__EmitterDynamicParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_J8B6, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ValueMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_MEEI, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_JDAY, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterDynamicParameter, 0x0050);
		}

		// ScriptStruct Engine.ParticleEmitter.ParticleBurst
		TEST_METHOD(ScriptStruct__Engine__ParticleEmitter__ParticleBurst)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, CountLow, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleBurst, 0x000C);
		}

		// ScriptStruct Engine.ParticleModuleTypeDataGpu.GPUSpriteLocalVectorFieldInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleModuleTypeDataGpu__GPUSpriteLocalVectorFieldInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Field, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_J59Y, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MinInitialRotation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MaxInitialRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, RotationRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Intensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Tightness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_EZ1U, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteLocalVectorFieldInfo, 0x0070);
		}

		// ScriptStruct Engine.DistributionFloat.FloatDistribution
		TEST_METHOD(ScriptStruct__Engine__DistributionFloat__FloatDistribution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatDistribution, 0x0028);
		}

		// ScriptStruct Engine.ParticleModuleTypeDataGpu.GPUSpriteEmitterInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleModuleTypeDataGpu__GPUSpriteEmitterInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, RequiredModule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnPerUnitModule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModules, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_D7JB, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LocalVectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, VectorFieldScale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DragCoefficient, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorStrength, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, Resilience, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ConstantAcceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorPosition, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorRadiusSq, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetBase, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetRange, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvMaxSize, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvRotationRateScale, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxLifetime, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxParticleCount, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ScreenAlignment, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LockAxisFlag, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_NUE8, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_6ZPG, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColor, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlpha, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColorScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlphaScale, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_DA1P, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteEmitterInfo, 0x0280);
		}

		// ScriptStruct Engine.ParticleModuleTypeDataGpu.GPUSpriteResourceData
		TEST_METHOD(ScriptStruct__Engine__ParticleModuleTypeDataGpu__GPUSpriteResourceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedColorSamples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedMiscSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedSimulationAttrSamples, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveBias, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SizeBySpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ConstantAcceleration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetBase, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyBase, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyRange, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseBase, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldTightness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldBias, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientBias, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceBias, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusBias, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionTimeBias, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OneMinusFriction, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, RotationRateScale, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CameraMotionBlurAmount, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ScreenAlignment, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, LockAxisFlag, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_303A, 0x013E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PivotOffset, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_0Z0E, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteResourceData, 0x0150);
		}

		// ScriptStruct Engine.PhysicsSettings.PhysicalSurfaceName
		TEST_METHOD(ScriptStruct__Engine__PhysicsSettings__PhysicalSurfaceName)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, UnknownData_55G0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceName, 0x000C);
		}

		// ScriptStruct Engine.PhysicalMaterial.TireFrictionScalePair
		TEST_METHOD(ScriptStruct__Engine__PhysicalMaterial__TireFrictionScalePair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, TireType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, UnknownData_GU8H, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireFrictionScalePair, 0x0010);
		}

		// ScriptStruct Engine.PlatformInterfaceBase.DelegateArray
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceBase__DelegateArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateArray, Delegates, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateArray, 0x0010);
		}

		// ScriptStruct Engine.PlatformInterfaceBase.PlatformInterfaceData
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceBase__PlatformInterfaceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_36P5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, IntValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, FloatValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_RFMV, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, StringValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, ObjectValue, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceData, 0x0030);
		}

		// ScriptStruct Engine.PlatformInterfaceBase.PlatformInterfaceDelegateResult
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceBase__PlatformInterfaceDelegateResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, UnknownData_442E, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceDelegateResult, 0x0038);
		}

		// ScriptStruct Engine.MicroTransactionBase.PurchaseInfo
		TEST_METHOD(ScriptStruct__Engine__MicroTransactionBase__PurchaseInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayPrice, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseInfo, 0x0040);
		}

		// ScriptStruct Engine.Rig.RigTransformConstraint
		TEST_METHOD(ScriptStruct__Engine__Rig__RigTransformConstraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, TranformType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_Q8SB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, ParentSpace, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, Weight, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigTransformConstraint, 0x0010);
		}

		// ScriptStruct Engine.Rig.TransformBaseConstraint
		TEST_METHOD(ScriptStruct__Engine__Rig__TransformBaseConstraint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBaseConstraint, TransformConstraints, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBaseConstraint, 0x0010);
		}

		// ScriptStruct Engine.Rig.TransformBase
		TEST_METHOD(ScriptStruct__Engine__Rig__TransformBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Node, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Constraints, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBase, 0x0028);
		}

		// ScriptStruct Engine.Rig.Node
		TEST_METHOD(ScriptStruct__Engine__Rig__Node)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, ParentName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, bAdvanced, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, UnknownData_0BZN, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNode, 0x0060);
		}

		// ScriptStruct Engine.Blueprint.BPVariableMetaDataEntry
		TEST_METHOD(ScriptStruct__Engine__Blueprint__BPVariableMetaDataEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableMetaDataEntry, 0x0018);
		}

		// ScriptStruct Engine.DestructibleMesh.DestructibleDamageParameters
		TEST_METHOD(ScriptStruct__Engine__DestructibleMesh__DestructibleDamageParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DamageThreshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DamageSpread, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, ImpactDamage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, ImpactResistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DefaultImpactDamageDepth, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDamageParameters, 0x0014);
		}

		// ScriptStruct Engine.DestructibleMesh.DestructibleDebrisParameters
		TEST_METHOD(ScriptStruct__Engine__DestructibleMesh__DestructibleDebrisParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisLifetimeMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisLifetimeMax, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisMaxSeparationMin, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisMaxSeparationMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, ValidBounds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDebrisParameters, 0x002C);
		}

		// ScriptStruct Engine.DestructibleMesh.DestructibleAdvancedParameters
		TEST_METHOD(ScriptStruct__Engine__DestructibleMesh__DestructibleAdvancedParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, DamageCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, ImpactVelocityThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, MaxChunkSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, FractureImpulseScale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleAdvancedParameters, 0x0010);
		}

		// ScriptStruct Engine.DestructibleMesh.DestructibleSpecialHierarchyDepths
		TEST_METHOD(ScriptStruct__Engine__DestructibleMesh__DestructibleSpecialHierarchyDepths)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, SupportDepth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, MinimumFractureDepth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, DebrisDepth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, EssentialDepth, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleSpecialHierarchyDepths, 0x0010);
		}

		// ScriptStruct Engine.DestructibleMesh.DestructibleDepthParameters
		TEST_METHOD(ScriptStruct__Engine__DestructibleMesh__DestructibleDepthParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDepthParameters, ImpactDamageOverride, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDepthParameters, 0x0001);
		}

		// ScriptStruct Engine.DestructibleMesh.DestructibleParametersFlag
		TEST_METHOD(ScriptStruct__Engine__DestructibleMesh__DestructibleParametersFlag)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParametersFlag, UnknownData_X59U, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleParametersFlag, 0x0004);
		}

		// ScriptStruct Engine.DestructibleMesh.DestructibleParameters
		TEST_METHOD(ScriptStruct__Engine__DestructibleMesh__DestructibleParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DamageParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DebrisParameters, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, AdvancedParameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, SpecialHierarchyDepths, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DepthParameters, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, Flags, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, UnknownData_QL1D, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleParameters, 0x0078);
		}

		// ScriptStruct Engine.EngineTypes.LocalizedSpokenText
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__LocalizedSpokenText)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSpokenText, LanguageCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSpokenText, UnknownData_3Q57, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSpokenText, SpokenText, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedSpokenText, 0x0018);
		}

		// ScriptStruct Engine.SoundGroups.SoundGroup
		TEST_METHOD(ScriptStruct__Engine__SoundGroups__SoundGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, SoundGroup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_R7AX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_0UMX, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DecompressedDuration, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundGroup, 0x0020);
		}

		// ScriptStruct Engine.EngineTypes.LocalizedSubtitle
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__LocalizedSubtitle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSubtitle, LanguageExt, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSubtitle, Subtitles, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSubtitle, UnknownData_VAP1, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedSubtitle, 0x0028);
		}

		// ScriptStruct Engine.SoundClass.SoundClassProperties
		TEST_METHOD(ScriptStruct__Engine__SoundClass__SoundClassProperties)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Volume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Pitch, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, StereoBleed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LFEBleed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, VoiceCenterChannelVolume, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolumeThreshold, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_HAN7, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, OutputTarget, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_CIK6, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassProperties, 0x0024);
		}

		// ScriptStruct Engine.SoundClass.PassiveSoundMixModifier
		TEST_METHOD(ScriptStruct__Engine__SoundClass__PassiveSoundMixModifier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, SoundMix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MinVolumeThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MaxVolumeThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassiveSoundMixModifier, 0x0010);
		}

		// ScriptStruct Engine.SoundMix.AudioEQEffect
		TEST_METHOD(ScriptStruct__Engine__SoundMix__AudioEQEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, UnknownData_I1CA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, HFFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, HFGain, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, MFCutoffFrequency, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, MFBandwidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, MFGain, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, LFFrequency, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, LFGain, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, UnknownData_SY60, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEQEffect, 0x0028);
		}

		// ScriptStruct Engine.SoundMix.SoundClassAdjuster
		TEST_METHOD(ScriptStruct__Engine__SoundMix__SoundClassAdjuster)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, SoundClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, SoundClassObject, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VolumeAdjuster, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, PitchAdjuster, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_SNSN, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VoiceCenterChannelVolumeAdjuster, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassAdjuster, 0x0020);
		}

		// ScriptStruct Engine.SoundNodeAmbient.AmbientSoundSlot
		TEST_METHOD(ScriptStruct__Engine__SoundNodeAmbient__AmbientSoundSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAmbientSoundSlot, Wave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAmbientSoundSlot, SoundWave, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAmbientSoundSlot, PitchScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAmbientSoundSlot, VolumeScale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAmbientSoundSlot, Weight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAmbientSoundSlot, UnknownData_C7HT, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAmbientSoundSlot, 0x0020);
		}

		// ScriptStruct Engine.DialogueTypes.DialogueWaveParameter
		TEST_METHOD(ScriptStruct__Engine__DialogueTypes__DialogueWaveParameter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, DialogueWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, Context, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueWaveParameter, 0x0020);
		}

		// ScriptStruct Engine.SoundNodeDistanceCrossFade.DistanceDatum
		TEST_METHOD(ScriptStruct__Engine__SoundNodeDistanceCrossFade__DistanceDatum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, Volume, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistanceDatum, 0x0014);
		}

		// ScriptStruct Engine.SoundNodeModulatorContinuous.ModulatorContinuousParams
		TEST_METHOD(ScriptStruct__Engine__SoundNodeModulatorContinuous__ModulatorContinuousParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, Default, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinOutput, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxOutput, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParamMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, UnknownData_7HIU, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModulatorContinuousParams, 0x0020);
		}

		// ScriptStruct Engine.SubsurfaceProfile.SubsurfaceProfileStruct
		TEST_METHOD(ScriptStruct__Engine__SubsurfaceProfile__SubsurfaceProfileStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatterRadius, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SubsurfaceColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, FalloffColor, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubsurfaceProfileStruct, 0x0024);
		}

		// ScriptStruct Engine.TimelineTemplate.TTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TimelineTemplate__TTTrackBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, bIsExternalCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_M8QT, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackBase, 0x000C);
		}

		// ScriptStruct Engine.TimelineTemplate.TTEventTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineTemplate__TTEventTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, UnknownData_HKRB, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, CurveKeys, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTEventTrack, 0x0018);
		}

		// ScriptStruct Engine.TimelineTemplate.TTFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineTemplate__TTFloatTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTFloatTrack, UnknownData_6Y2D, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTFloatTrack, CurveFloat, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTFloatTrack, 0x0018);
		}

		// ScriptStruct Engine.TimelineTemplate.TTVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineTemplate__TTVectorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTVectorTrack, UnknownData_3Z3N, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTVectorTrack, CurveVector, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTVectorTrack, 0x0018);
		}

		// ScriptStruct Engine.TimelineTemplate.TTLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineTemplate__TTLinearColorTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTLinearColorTrack, UnknownData_NE8P, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTLinearColorTrack, CurveLinearColor, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTLinearColorTrack, 0x0018);
		}

		// ScriptStruct Engine.TouchInterface.TouchInputControl
		TEST_METHOD(ScriptStruct__Engine__TouchInterface__TouchInputControl)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Center, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, VisualSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, ThumbSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InteractionSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InputScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, MainInputKey, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, AltInputKey, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTouchInputControl, 0x0068);
		}

		// ScriptStruct Engine.WorldComposition.EditorTileInitialState
		TEST_METHOD(ScriptStruct__Engine__WorldComposition__EditorTileInitialState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorTileInitialState, LevelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorTileInitialState, bWasInitiallyLoaded, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorTileInitialState, bWasInitiallyVisible, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorTileInitialState, UnknownData_UX9N, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorTileInitialState, 0x0018);
		}

		// ScriptStruct Engine.EngineTypes.ProxySettings
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__ProxySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FProxySettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProxySettings, TextureWidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProxySettings, TextureHeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProxySettings, bRecalculateNormals, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProxySettings, UnknownData_98LO, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProxySettings, HardAngleThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProxySettings, MergeDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProxySettings, bUseClippingPlane, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProxySettings, UnknownData_TIFX, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProxySettings, ClippingLevel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProxySettings, AxisIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProxySettings, bPlaneNegativeHalfspace, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProxySettings, bUseMassiveLOD, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProxySettings, bUseAggregateLOD, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProxySettings, bFlatterMaterialBeforeProcess, 0x0027);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProxySettings, 0x0028);
		}

		// ScriptStruct Engine.EngineTypes.DepthFieldGlowInfo
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__DepthFieldGlowInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, UnknownData_EA7O, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowOuterRadius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowInnerRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, ScreenPercentageLerpScalar, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, UnknownData_OCJV, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDepthFieldGlowInfo, 0x002C);
		}

		// ScriptStruct Engine.EngineTypes.FontRenderInfo
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__FontRenderInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, UnknownData_OWUM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, GlowInfo, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontRenderInfo, 0x0030);
		}

		// ScriptStruct Engine.EngineTypes.ComponentReference
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__ComponentReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, OtherActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, ComponentProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, OverrideComponent, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentReference, 0x0018);
		}

		// ScriptStruct Engine.EngineTypes.Rotator_NetQuantizeYawOnly
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__Rotator_NetQuantizeYawOnly)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator_NetQuantizeYawOnly, 0x000C);
		}

		// ScriptStruct Engine.EngineTypes.Rotator_NetQuantizeNoRoll
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__Rotator_NetQuantizeNoRoll)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator_NetQuantizeNoRoll, 0x000C);
		}

		// ScriptStruct Engine.EngineTypes.RadialDamageParams
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__RadialDamageParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, MinimumDamage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, InnerRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, OuterRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, DamageFalloff, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageParams, 0x0010);
		}

		// ScriptStruct Engine.EngineTypes.RadialDamageEvent
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__RadialDamageEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Params, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, UnknownData_GUGY, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, ComponentHits, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageEvent, 0x0050);
		}

		// ScriptStruct Engine.EngineTypes.PointDamageEvent
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__PointDamageEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, ShotDirection, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, UnknownData_2YK7, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, HitInfo, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointDamageEvent, 0x00B8);
		}

		// ScriptStruct Engine.EngineTypes.MeshProxySettings
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__MeshProxySettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, TextureWidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, TextureHeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bRecalculateNormals, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_8X7Y, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, HardAngleThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MergeDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bUseClippingPlane, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_0Y3U, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, ClippingLevel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, AxisIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bPlaneNegativeHalfspace, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_H3Y2, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshProxySettings, 0x0028);
		}

		// ScriptStruct Engine.EngineTypes.MeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__MeshBuildSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, bUseMikkTSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, bRecomputeNormals, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, bRecomputeTangents, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, bRemoveDegenerates, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, bUseFullPrecisionUVs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, bGenerateLightmapUVs, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_52GA, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, MinLightmapResolution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, SrcLightmapIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DstLightmapIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale3D, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldResolutionScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, bGenerateDistanceFieldAsIfTwoSided, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, bReallyGenerateDistanceFieldAsIfTwoSided, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_NDKA, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldReplacementMesh, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshBuildSettings, 0x0038);
		}

		// ScriptStruct Engine.EngineTypes.MeshReductionSettings
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__MeshReductionSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentTriangles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, MaxDeviation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, WeldingThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, HardAngleThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, SilhouetteImportance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TextureImportance, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, ShadingImportance, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bRecalculateNormals, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, BaseLODModel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bGenerateUniqueLightmapUVs, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bKeepSymmetry, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bVisibilityAided, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bCullOccluded, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VisibilityAggressiveness, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, UnknownData_3XG8, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshReductionSettings, 0x0020);
		}

		// ScriptStruct Engine.EngineTypes.POV
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__POV)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, FOV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOV, 0x001C);
		}

		// ScriptStruct Engine.EngineTypes.AnimSlotDesc
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__AnimSlotDesc)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, NumChannels, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotDesc, 0x000C);
		}

		// ScriptStruct Engine.EngineTypes.AnimSlotInfo
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__AnimSlotInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, ChannelWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotInfo, 0x0018);
		}

		// ScriptStruct Engine.EngineTypes.MTDResult
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__MTDResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Distance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMTDResult, 0x0010);
		}

		// ScriptStruct Engine.EngineTypes.OverlapResult
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__OverlapResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Component, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, ItemIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_7CA8, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlapResult, 0x0018);
		}

		// ScriptStruct Engine.EngineTypes.SwarmDebugOptions
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__SwarmDebugOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwarmDebugOptions, UnknownData_FNI3, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwarmDebugOptions, 0x0004);
		}

		// ScriptStruct Engine.EngineTypes.LightmassDebugOptions
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__LightmassDebugOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_47FB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, CoplanarTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_HZLJ, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, ExecutionTimeDivisor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDebugOptions, 0x0010);
		}

		// ScriptStruct Engine.EngineTypes.BasedPosition
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__BasedPosition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Base, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseLocation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseRotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedTransPosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedPosition, 0x0038);
		}

		// ScriptStruct Engine.EngineTypes.RigidBodyContactInfo
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__RigidBodyContactInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPenetration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, UnknownData_W3E6, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, PhysMaterial, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyContactInfo, 0x0030);
		}

		// ScriptStruct Engine.EngineTypes.CollisionImpactData
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__CollisionImpactData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, ContactInfos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalNormalImpulse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalFrictionImpulse, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionImpactData, 0x0028);
		}

		// ScriptStruct Engine.EngineTypes.RigidBodyState
		TEST_METHOD(ScriptStruct__Engine__EngineTypes__RigidBodyState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_6M5F, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Quaternion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, LinVel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, AngVel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Flags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_82J9, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyState, 0x0040);
		}

		// ScriptStruct Engine.EngineBaseTypes.ExposureSettings
		TEST_METHOD(ScriptStruct__Engine__EngineBaseTypes__ExposureSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, LogOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, bFixed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, UnknownData_22IX, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposureSettings, 0x0008);
		}

		// ScriptStruct Engine.EngineBaseTypes.URL
		TEST_METHOD(ScriptStruct__Engine__EngineBaseTypes__URL)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Protocol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Host, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, UnknownData_0NXZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Map, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Op, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Portal, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Valid, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, UnknownData_CAC8, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FURL, 0x0060);
		}

		// ScriptStruct Engine.EngineBaseTypes.TickPrerequisite
		TEST_METHOD(ScriptStruct__Engine__EngineBaseTypes__TickPrerequisite)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickPrerequisite, UnknownData_4QYB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickPrerequisite, 0x0010);
		}

		// ScriptStruct Engine.Canvas.WrappedStringElement
		TEST_METHOD(ScriptStruct__Engine__Canvas__WrappedStringElement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, LineExtent, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWrappedStringElement, 0x0018);
		}

		// ScriptStruct Engine.Canvas.TextSizingParameters
		TEST_METHOD(ScriptStruct__Engine__Canvas__TextSizingParameters)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawXL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawYL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, Scaling, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawFont, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, SpacingAdjust, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextSizingParameters, 0x0028);
		}

		// ScriptStruct Engine.Canvas.CanvasIcon
		TEST_METHOD(ScriptStruct__Engine__Canvas__CanvasIcon)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, U, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, V, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, UL, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, VL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasIcon, 0x0018);
		}

		// ScriptStruct Engine.CurveBase.IntegralKey
		TEST_METHOD(ScriptStruct__Engine__CurveBase__IntegralKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralKey, 0x0008);
		}

		// ScriptStruct Engine.CurveBase.IntegralCurve
		TEST_METHOD(ScriptStruct__Engine__CurveBase__IntegralCurve)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, Keys, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralCurve, 0x0068);
		}

		// ScriptStruct Engine.PrimitiveComponent.SpriteCategoryInfo
		TEST_METHOD(ScriptStruct__Engine__PrimitiveComponent__SpriteCategoryInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, UnknownData_W9MH, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Description, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, UnknownData_4EEN, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteCategoryInfo, 0x0058);
		}

		// ScriptStruct Engine.SkeletalMesh.BoneMirrorExport
		TEST_METHOD(ScriptStruct__Engine__SkeletalMesh__BoneMirrorExport)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, SourceBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneFlipAxis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, UnknownData_O1CJ, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorExport, 0x0014);
		}

		// ScriptStruct Engine.SkeletalMeshComponent.SkeletalMeshComponentPreClothTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponent__SkeletalMeshComponentPreClothTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentPreClothTickFunction, UnknownData_6VR6, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentPreClothTickFunction, 0x0050);
		}

		// ScriptStruct Engine.AnimationAsset.AnimationGroupReference
		TEST_METHOD(ScriptStruct__Engine__AnimationAsset__AnimationGroupReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupRole, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, UnknownData_QUJ2, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationGroupReference, 0x000C);
		}

		// ScriptStruct Engine.AnimationAsset.AnimExtractContext
		TEST_METHOD(ScriptStruct__Engine__AnimationAsset__AnimExtractContext)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimExtractContext, bExtractRootMotionTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimExtractContext, bExtractRootMotionRotation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimExtractContext, UnknownData_J4VN, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimExtractContext, CurrentTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimExtractContext, RootMotionRootLock, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimExtractContext, UnknownData_9IQF, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimExtractContext, 0x000C);
		}

		// ScriptStruct Engine.WorldSettings.TickWorldSettingsDuringPhysics
		TEST_METHOD(ScriptStruct__Engine__WorldSettings__TickWorldSettingsDuringPhysics)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickWorldSettingsDuringPhysics, UnknownData_YZE5, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickWorldSettingsDuringPhysics, 0x0050);
		}

		// ScriptStruct Engine.WorldSettings.ActorList
		TEST_METHOD(ScriptStruct__Engine__WorldSettings__ActorList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorList, UnknownData_KAUO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorList, 0x0010);
		}

		// ScriptStruct Engine.WorldSettings.NetViewer
		TEST_METHOD(ScriptStruct__Engine__WorldSettings__NetViewer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, InViewer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, Viewer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, viewDir, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetViewer, 0x0028);
		}

		// ScriptStruct Engine.BlueprintGeneratedClass.BlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__BlueprintGeneratedClass__BlueprintDebugData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintDebugData, UnknownData_KASD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintDebugData, 0x0001);
		}

		// ScriptStruct Engine.BlueprintGeneratedClass.DebuggingInfoForSingleFunction
		TEST_METHOD(ScriptStruct__Engine__BlueprintGeneratedClass__DebuggingInfoForSingleFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebuggingInfoForSingleFunction, UnknownData_1SOG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebuggingInfoForSingleFunction, 0x0140);
		}

		// ScriptStruct Engine.BlueprintGeneratedClass.NodeToCodeAssociation
		TEST_METHOD(ScriptStruct__Engine__BlueprintGeneratedClass__NodeToCodeAssociation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeToCodeAssociation, UnknownData_WRSJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeToCodeAssociation, 0x0014);
		}

		// ScriptStruct Engine.FastArraySerializerItem
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializerItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationKey, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializerItem, 0x0008);
		}

		// ScriptStruct Engine.FastArraySerializer
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_296I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializer, 0x0058);
		}

		// ScriptStruct Engine.LatentActionManager
		TEST_METHOD(ScriptStruct__Engine__LatentActionManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionManager, UnknownData_3M7L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionManager, 0x00B0);
		}

		// ScriptStruct Engine.World.EndClothSimulationFunction
		TEST_METHOD(ScriptStruct__Engine__World__EndClothSimulationFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndClothSimulationFunction, UnknownData_1108, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndClothSimulationFunction, 0x0050);
		}

		// ScriptStruct Engine.World.StartClothSimulationFunction
		TEST_METHOD(ScriptStruct__Engine__World__StartClothSimulationFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartClothSimulationFunction, UnknownData_ZW39, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartClothSimulationFunction, 0x0050);
		}

		// ScriptStruct Engine.World.EndPhysicsTickFunction
		TEST_METHOD(ScriptStruct__Engine__World__EndPhysicsTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndPhysicsTickFunction, UnknownData_1UG8, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndPhysicsTickFunction, 0x0050);
		}

		// ScriptStruct Engine.World.StartPhysicsTickFunction
		TEST_METHOD(ScriptStruct__Engine__World__StartPhysicsTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartPhysicsTickFunction, UnknownData_QYIG, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartPhysicsTickFunction, 0x0050);
		}

		// ScriptStruct Engine.Level.CachedPerTriPhysSMData
		TEST_METHOD(ScriptStruct__Engine__Level__CachedPerTriPhysSMData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPerTriPhysSMData, UnknownData_4629, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPerTriPhysSMData, 0x0010);
		}

		// ScriptStruct Engine.Level.CachedPhysSMData
		TEST_METHOD(ScriptStruct__Engine__Level__CachedPhysSMData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPhysSMData, UnknownData_2V2S, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPhysSMData, 0x0010);
		}

		// ScriptStruct Engine.Level.StreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__Level__StreamableTextureInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamableTextureInstance, UnknownData_8M17, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamableTextureInstance, 0x0014);
		}

		// ScriptStruct Engine.Level.DynamicTextureInstance
		TEST_METHOD(ScriptStruct__Engine__Level__DynamicTextureInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, UnknownData_5PVR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, Texture, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, bAttached, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, UnknownData_189Q, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, OriginalRadius, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicTextureInstance, 0x0028);
		}

		// ScriptStruct Engine.PlayerMuteList
		TEST_METHOD(ScriptStruct__Engine__PlayerMuteList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_7RUS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, bHasVoiceHandshakeCompleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_6U01, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, VoiceChannelIdx, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_4S9B, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerMuteList, 0x0088);
		}

		// ScriptStruct Engine.DynamicCaptureManager.UploadToGpuCommand
		TEST_METHOD(ScriptStruct__Engine__DynamicCaptureManager__UploadToGpuCommand)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUploadToGpuCommand, CaptureComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUploadToGpuCommand, UnknownData_E8J2, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUploadToGpuCommand, 0x0018);
		}

		// ScriptStruct Engine.AntiDupeTransactionLog.TransactionLogData
		TEST_METHOD(ScriptStruct__Engine__AntiDupeTransactionLog__TransactionLogData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransactionLogData, UnknownData_GBXN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransactionLogData, 0x0020);
		}

		// ScriptStruct Engine.LandscapeGizmoActiveActor.GizmoSelectData
		TEST_METHOD(ScriptStruct__Engine__LandscapeGizmoActiveActor__GizmoSelectData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoSelectData, UnknownData_BBYQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoSelectData, 0x0050);
		}

		// ScriptStruct Engine.LandscapeProxy.LandscapeImportLayerInfo
		TEST_METHOD(ScriptStruct__Engine__LandscapeProxy__LandscapeImportLayerInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeImportLayerInfo, LayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeImportLayerInfo, LayerInfo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeImportLayerInfo, UnknownData_AYLA, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeImportLayerInfo, 0x0020);
		}

		// ScriptStruct Engine.LandscapeProxy.LandscapeEditorLayerSettings
		TEST_METHOD(ScriptStruct__Engine__LandscapeProxy__LandscapeEditorLayerSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditorLayerSettings, UnknownData_K7QI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditorLayerSettings, 0x0001);
		}

		// ScriptStruct Engine.LandscapeProxy.LandscapeWeightmapUsage
		TEST_METHOD(ScriptStruct__Engine__LandscapeProxy__LandscapeWeightmapUsage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeWeightmapUsage, ChannelUsage, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeWeightmapUsage, 0x0020);
		}

		// ScriptStruct Engine.NavigationGraph.NavGraphEdge
		TEST_METHOD(ScriptStruct__Engine__NavigationGraph__NavGraphEdge)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphEdge, UnknownData_8D9J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphEdge, 0x0018);
		}

		// ScriptStruct Engine.PreviewAttachedObjectPair
		TEST_METHOD(ScriptStruct__Engine__PreviewAttachedObjectPair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, UnknownData_3UFP, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, Object, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedTo, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAttachedObjectPair, 0x0030);
		}

		// ScriptStruct Engine.PreviewAssetAttachContainer
		TEST_METHOD(ScriptStruct__Engine__PreviewAssetAttachContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAssetAttachContainer, AttachedObjects, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAssetAttachContainer, 0x0010);
		}

		// ScriptStruct Engine.SmartNameMapping
		TEST_METHOD(ScriptStruct__Engine__SmartNameMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameMapping, UnknownData_3JTG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameMapping, 0x0068);
		}

		// ScriptStruct Engine.Skeleton.NameMapping
		TEST_METHOD(ScriptStruct__Engine__Skeleton__NameMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, NodeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, BoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameMapping, 0x0010);
		}

		// ScriptStruct Engine.Skeleton.RigConfiguration
		TEST_METHOD(ScriptStruct__Engine__Skeleton__RigConfiguration)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, Rig, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, BoneMappingTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigConfiguration, 0x0018);
		}

		// ScriptStruct Engine.Skeleton.BoneReductionSetting
		TEST_METHOD(ScriptStruct__Engine__Skeleton__BoneReductionSetting)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReductionSetting, BonesToRemove, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReductionSetting, 0x0010);
		}

		// ScriptStruct Engine.Skeleton.ReferencePose
		TEST_METHOD(ScriptStruct__Engine__Skeleton__ReferencePose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, PoseName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, ReferencePose, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferencePose, 0x0018);
		}

		// ScriptStruct Engine.Interface_CollisionDataProvider.TriIndices
		TEST_METHOD(ScriptStruct__Engine__Interface_CollisionDataProvider__TriIndices)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTriIndices, v0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTriIndices, v1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTriIndices, v2, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTriIndices, 0x000C);
		}

		// ScriptStruct Engine.Interface_CollisionDataProvider.TriMeshCollisionData
		TEST_METHOD(ScriptStruct__Engine__Interface_CollisionDataProvider__TriMeshCollisionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTriMeshCollisionData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTriMeshCollisionData, Indices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTriMeshCollisionData, UnknownData_1AXQ, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTriMeshCollisionData, 0x0038);
		}

		// ScriptStruct Engine.NavAvoidanceMask
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceMask)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceMask, 0x0004);
		}

		// ScriptStruct Engine.LineBatchComponent.BatchedPoint
		TEST_METHOD(ScriptStruct__Engine__LineBatchComponent__BatchedPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, PointSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, RemainingLifeTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, DepthPriority, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, UnknownData_YUYI, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedPoint, 0x0028);
		}

		// ScriptStruct Engine.LineBatchComponent.BatchedLine
		TEST_METHOD(ScriptStruct__Engine__LineBatchComponent__BatchedLine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, End, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Thickness, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, RemainingLifeTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, DepthPriority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, UnknownData_4HN4, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedLine, 0x0034);
		}

		// ScriptStruct Engine.InstancedStaticMeshComponent.InstancedStaticMeshMappingInfo
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshComponent__InstancedStaticMeshMappingInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshMappingInfo, LightmapTexture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshMappingInfo, UnknownData_VIF5, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshMappingInfo, 0x0018);
		}

		// ScriptStruct Engine.HierarchicalInstancedStaticMeshComponent.ClusterNode
		TEST_METHOD(ScriptStruct__Engine__HierarchicalInstancedStaticMeshComponent__ClusterNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastInstance, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode, 0x0028);
		}

		// ScriptStruct Engine.HierarchicalInstancedStaticMeshComponent.ExpandedUniqueOctreeNode
		TEST_METHOD(ScriptStruct__Engine__HierarchicalInstancedStaticMeshComponent__ExpandedUniqueOctreeNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandedUniqueOctreeNode, CurrentBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandedUniqueOctreeNode, Children, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandedUniqueOctreeNode, bIsLeaf, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandedUniqueOctreeNode, UnknownData_YMD6, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandedUniqueOctreeNode, InstanceStart, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandedUniqueOctreeNode, InstanceEnd, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandedUniqueOctreeNode, OcclusionIndex, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpandedUniqueOctreeNode, 0x004C);
		}

		// ScriptStruct Engine.AnimSequenceBase.AnimNotifyTrack
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceBase__AnimNotifyTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, UnknownData_8CMQ, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyTrack, 0x0028);
		}

		// ScriptStruct Engine.AnimCompositeBase.RootMotionExtractionStep
		TEST_METHOD(ScriptStruct__Engine__AnimCompositeBase__RootMotionExtractionStep)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, StartPosition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, EndPosition, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionExtractionStep, 0x0010);
		}

		// ScriptStruct Engine.AnimSequence.CompressedTrack
		TEST_METHOD(ScriptStruct__Engine__AnimSequence__CompressedTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, ByteStream, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Mins, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Ranges, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedTrack, 0x0038);
		}

		// ScriptStruct Engine.AnimSequence.RawAnimSequenceTrack
		TEST_METHOD(ScriptStruct__Engine__AnimSequence__RawAnimSequenceTrack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, RotKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, ScaleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawAnimSequenceTrack, 0x0030);
		}

		// ScriptStruct Engine.AnimSequence.AnimSequenceTrackContainer
		TEST_METHOD(ScriptStruct__Engine__AnimSequence__AnimSequenceTrackContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, AnimationTracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, TrackNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequenceTrackContainer, 0x0020);
		}

		// ScriptStruct Engine.AnimInstance.A2Pose
		TEST_METHOD(ScriptStruct__Engine__AnimInstance__A2Pose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2Pose, Bones, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2Pose, 0x0010);
		}

		// ScriptStruct Engine.AnimInstance.SlotEvaluationPose
		TEST_METHOD(ScriptStruct__Engine__AnimInstance__SlotEvaluationPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, AdditiveType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_VIFD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, Weight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, Pose, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotEvaluationPose, 0x0018);
		}

		// ScriptStruct Engine.AnimInstance.PerBoneBlendWeight
		TEST_METHOD(ScriptStruct__Engine__AnimInstance__PerBoneBlendWeight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, BlendWeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeight, 0x0008);
		}

		// ScriptStruct Engine.AnimInstance.PerBoneBlendWeights
		TEST_METHOD(ScriptStruct__Engine__AnimInstance__PerBoneBlendWeights)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeights, BoneBlendWeights, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeights, 0x0010);
		}

		// ScriptStruct Engine.AnimInstance.BoneTransform
		TEST_METHOD(ScriptStruct__Engine__AnimInstance__BoneTransform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneTransform, BoneIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneTransform, UnknownData_EBYQ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneTransform, Transform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneTransform, 0x0040);
		}

		// ScriptStruct Engine.AnimInstance.A2CSPose
		TEST_METHOD(ScriptStruct__Engine__AnimInstance__A2CSPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, UnknownData_Z3M6, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, ComponentSpaceFlags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2CSPose, 0x0028);
		}

		// ScriptStruct Engine.AnimMontage.AnimMontageInstance
		TEST_METHOD(ScriptStruct__Engine__AnimMontage__AnimMontageInstance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DesiredWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Weight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, BlendTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, BlendOutTimeOverride, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, bPauseOnFinish, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_WTEW, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DefaultBlendTimeMultiplier, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, NextSections, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PrevSections, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, bPlaying, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_XEDJ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Position, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PlayRate, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimMontageInstance, 0x0070);
		}

		// ScriptStruct Engine.BlendSpaceBase.GridBlendSample
		TEST_METHOD(ScriptStruct__Engine__BlendSpaceBase__GridBlendSample)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, GridElement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, BlendWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGridBlendSample, 0x001C);
		}

		// ScriptStruct Engine.AnimStateMachineTypes.AnimationTransitionRule
		TEST_METHOD(ScriptStruct__Engine__AnimStateMachineTypes__AnimationTransitionRule)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, RuleToExecute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionReturnVal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, UnknownData_E4WH, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionRule, 0x0010);
		}

		// ScriptStruct Engine.AnimStateMachineTypes.AnimationState
		TEST_METHOD(ScriptStruct__Engine__AnimStateMachineTypes__AnimationState)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, FullyBlendedNotify, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationState, 0x0028);
		}

		// ScriptStruct Engine.Blueprint.EditedDocumentInfo
		TEST_METHOD(ScriptStruct__Engine__Blueprint__EditedDocumentInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedViewOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedZoomAmount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, UnknownData_TQWA, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditedDocumentInfo, 0x0018);
		}

		// ScriptStruct Engine.Blueprint.BPInterfaceDescription
		TEST_METHOD(ScriptStruct__Engine__Blueprint__BPInterfaceDescription)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Interface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Graphs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPInterfaceDescription, 0x0018);
		}

		// ScriptStruct Engine.Blueprint.BPVariableDescription
		TEST_METHOD(ScriptStruct__Engine__Blueprint__BPVariableDescription)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarGuid, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, FriendlyName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, Category, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, PropertyFlags, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, RepCondition, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, UnknownData_0FAS, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, RepNotifyFunc, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, UnknownData_3TLL, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, MetaDataArray, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, DefaultValue, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableDescription, 0x00B8);
		}

		// ScriptStruct Engine.AnimBlueprint.AnimParentNodeAssetOverride
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprint__AnimParentNodeAssetOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, NewAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, ParentNodeGuid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimParentNodeAssetOverride, 0x0018);
		}

		// ScriptStruct Engine.DataTable.DataTableCategoryHandle
		TEST_METHOD(ScriptStruct__Engine__DataTable__DataTableCategoryHandle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, ColumnName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, RowContents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableCategoryHandle, 0x0018);
		}

		// ScriptStruct Engine.DataTable.DataTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__DataTable__DataTableRowHandle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableRowHandle, 0x0010);
		}

		// ScriptStruct Engine.Texture.TexturePlatformData
		TEST_METHOD(ScriptStruct__Engine__Texture__TexturePlatformData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturePlatformData, UnknownData_DZNW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexturePlatformData, 0x0020);
		}

		// ScriptStruct Engine.Texture.PreSavedBulkDataInfo
		TEST_METHOD(ScriptStruct__Engine__Texture__PreSavedBulkDataInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreSavedBulkDataInfo, UnknownData_JR6L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreSavedBulkDataInfo, 0x0020);
		}

		// ScriptStruct Engine.Texture.TextureSource
		TEST_METHOD(ScriptStruct__Engine__Texture__TextureSource)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSource, UnknownData_ANHA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSource, 0x0058);
		}

		// ScriptStruct Engine.AnimBlueprintGeneratedClass.AnimBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintGeneratedClass__AnimBlueprintDebugData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintDebugData, UnknownData_N02Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintDebugData, 0x0001);
		}

		// ScriptStruct Engine.AnimBlueprintGeneratedClass.AnimationFrameSnapshot
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintGeneratedClass__AnimationFrameSnapshot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationFrameSnapshot, UnknownData_JW7P, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationFrameSnapshot, 0x0001);
		}

		// ScriptStruct Engine.AnimBlueprintGeneratedClass.StateMachineDebugData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintGeneratedClass__StateMachineDebugData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineDebugData, UnknownData_JGZV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineDebugData, 0x00B0);
		}

		// ScriptStruct Engine.Console.AutoCompleteNode
		TEST_METHOD(ScriptStruct__Engine__Console__AutoCompleteNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, IndexChar, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_5QVJ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, AutoCompleteListIndices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_O1FI, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteNode, 0x0028);
		}

		// ScriptStruct Engine.CurveTable.CurveTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__CurveTable__CurveTableRowHandle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, CurveTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTableRowHandle, 0x0010);
		}

		// ScriptStruct Engine.DistributionVector.Vector4Distribution
		TEST_METHOD(ScriptStruct__Engine__DistributionVector__Vector4Distribution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4Distribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4Distribution, 0x0028);
		}

		// ScriptStruct Engine.DistributionVector.VectorDistribution
		TEST_METHOD(ScriptStruct__Engine__DistributionVector__VectorDistribution)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorDistribution, 0x0028);
		}

		// ScriptStruct Engine.EdGraph.GraphReference
		TEST_METHOD(ScriptStruct__Engine__EdGraph__GraphReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, MacroGraph, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphReference, 0x0020);
		}

		// ScriptStruct Engine.EdGraphSchema.EdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchema__EdGraphSchemaAction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, UnknownData_QDFM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, UnknownData_XLCO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, TooltipDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Category, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Keywords, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Grouping, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SectionID, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, CachedSearchTitle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, UnknownData_GUG4, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction, 0x0090);
		}

		// ScriptStruct Engine.EdGraphSchema.EdGraphSchemaAction_NewNode
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchema__EdGraphSchemaAction_NewNode)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction_NewNode, NodeTemplate, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction_NewNode, 0x0098);
		}

		// ScriptStruct Engine.Engine.ScreenMessageString
		TEST_METHOD(ScriptStruct__Engine__Engine__ScreenMessageString)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, ScreenMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, DisplayColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, timeToDisplay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, CurrentTimeDisplayed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, UnknownData_RONZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, ViewportKey, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenMessageString, 0x0030);
		}

		// ScriptStruct Engine.Engine.FullyLoadedPackagesInfo
		TEST_METHOD(ScriptStruct__Engine__Engine__FullyLoadedPackagesInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, FullyLoadType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, UnknownData_NL2P, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, PackagesToLoad, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, LoadedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFullyLoadedPackagesInfo, 0x0038);
		}

		// ScriptStruct Engine.Engine.LevelStreamingStatus
		TEST_METHOD(ScriptStruct__Engine__Engine__LevelStreamingStatus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, UnknownData_AP5K, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, LODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingStatus, 0x0010);
		}

		// ScriptStruct Engine.Engine.NamedNetDriver
		TEST_METHOD(ScriptStruct__Engine__Engine__NamedNetDriver)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, NetDriver, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, UnknownData_U3H1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedNetDriver, 0x0010);
		}

		// ScriptStruct Engine.Engine.WorldContext
		TEST_METHOD(ScriptStruct__Engine__Engine__WorldContext)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_WWY6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastURL, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastRemoteURL, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingNetGame, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PackagesToFullyLoad, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_V1UO, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LoadedLevelsForPendingMapChange, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_5LX7, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ObjectReferencers, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingLevelStreamingStatusUpdates, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, GameViewport, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, OwningGameInstance, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ActiveNetDrivers, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_UEVY, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldContext, 0x0268);
		}

		// ScriptStruct Engine.Font.FontData
		TEST_METHOD(ScriptStruct__Engine__Font__FontData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, UnknownData_ESNO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontData, 0x0010);
		}

		// ScriptStruct Engine.InterpGroup.InterpEdSelKey
		TEST_METHOD(ScriptStruct__Engine__InterpGroup__InterpEdSelKey)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Track, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, KeyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, UnsnappedPosition, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpEdSelKey, 0x0018);
		}

		// ScriptStruct Engine.InterpGroupCamera.CameraPreviewInfo
		TEST_METHOD(ScriptStruct__Engine__InterpGroupCamera__CameraPreviewInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnInst, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraPreviewInfo, 0x0030);
		}

		// ScriptStruct Engine.InterpTrack.SubTrackGroup
		TEST_METHOD(ScriptStruct__Engine__InterpTrack__SubTrackGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, TrackIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, UnknownData_5RNT, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubTrackGroup, 0x0028);
		}

		// ScriptStruct Engine.InterpTrack.SupportedSubTrackInfo
		TEST_METHOD(ScriptStruct__Engine__InterpTrack__SupportedSubTrackInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SupportedClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SubTrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, groupIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, UnknownData_L3QY, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedSubTrackInfo, 0x0020);
		}

		// ScriptStruct Engine.LandscapeInfo.LandscapeInfoLayerSettings
		TEST_METHOD(ScriptStruct__Engine__LandscapeInfo__LandscapeInfoLayerSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerInfoObj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, UnknownData_1CU5, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, UnknownData_NOZI, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeInfoLayerSettings, 0x0020);
		}

		// ScriptStruct Engine.LandscapeInfo.LandscapeAddCollision
		TEST_METHOD(ScriptStruct__Engine__LandscapeInfo__LandscapeAddCollision)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeAddCollision, UnknownData_I4O9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeAddCollision, 0x0030);
		}

		// ScriptStruct Engine.LandscapeSplineSegment.LandscapeSplineMeshEntry
		TEST_METHOD(ScriptStruct__Engine__LandscapeSplineSegment__LandscapeSplineMeshEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, MaterialOverrides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_8QE3, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Offset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_WQIR, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Orientation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, ForwardAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UpAxis, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_EXJE, 0x0037);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineMeshEntry, 0x0038);
		}

		// ScriptStruct Engine.LocalMessage.ClientReceiveData
		TEST_METHOD(ScriptStruct__Engine__LocalMessage__ClientReceiveData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, LocalPC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, UnknownData_16X1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, OptionalObject, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReceiveData, 0x0040);
		}

		// ScriptStruct Engine.ParticleModule.ParticleCurvePair
		TEST_METHOD(ScriptStruct__Engine__ParticleModule__ParticleCurvePair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveObject, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleCurvePair, 0x0018);
		}

		// ScriptStruct Engine.ParticleModuleTypeDataBeam2.BeamTargetData
		TEST_METHOD(ScriptStruct__Engine__ParticleModuleTypeDataBeam2__BeamTargetData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetPercentage, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamTargetData, 0x000C);
		}

		// ScriptStruct Engine.ParticleSystemReplay.ParticleSystemReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemReplay__ParticleSystemReplayFrame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemReplayFrame, UnknownData_IFBG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemReplayFrame, 0x0010);
		}

		// ScriptStruct Engine.ParticleSystemReplay.ParticleEmitterReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemReplay__ParticleEmitterReplayFrame)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEmitterReplayFrame, UnknownData_3RJH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEmitterReplayFrame, 0x0010);
		}

		// ScriptStruct Engine.SoundCue.SoundNodeEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundCue__SoundNodeEditorData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundNodeEditorData, UnknownData_9GT2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundNodeEditorData, 0x0008);
		}

		// ScriptStruct Engine.SoundWave.StreamedAudioPlatformData
		TEST_METHOD(ScriptStruct__Engine__SoundWave__StreamedAudioPlatformData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamedAudioPlatformData, UnknownData_54PN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamedAudioPlatformData, 0x0020);
		}

		// ScriptStruct Engine.SoundClass.SoundClassEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundClass__SoundClassEditorData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassEditorData, UnknownData_2OZG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassEditorData, 0x0008);
		}

		// ScriptStruct Engine.StaticMesh.AssetEditorOrbitCameraPosition
		TEST_METHOD(ScriptStruct__Engine__StaticMesh__AssetEditorOrbitCameraPosition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, bIsSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, UnknownData_AQXL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitZoom, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetEditorOrbitCameraPosition, 0x0028);
		}

		// ScriptStruct Engine.StaticMesh.MeshSectionInfoMap
		TEST_METHOD(ScriptStruct__Engine__StaticMesh__MeshSectionInfoMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfoMap, UnknownData_GO21, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfoMap, 0x0050);
		}

		// ScriptStruct Engine.StaticMesh.MeshSectionInfo
		TEST_METHOD(ScriptStruct__Engine__StaticMesh__MeshSectionInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, MaterialIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bEnableCollision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bCastShadow, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, UnknownData_P09Q, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfo, 0x0008);
		}

		// ScriptStruct Engine.StaticMesh.StaticMeshSourceModel
		TEST_METHOD(ScriptStruct__Engine__StaticMesh__StaticMeshSourceModel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, BuildSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ReductionSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, LODDistance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ScreenSize, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshSourceModel, 0x0060);
		}

		// ScriptStruct Engine.StaticMesh.StaticMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__StaticMesh__StaticMeshOptimizationSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ReductionMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_BAEY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, MaxDeviationPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, bRecalcNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_3VJP, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, SilhouetteImportance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, TextureImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ShadingImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_4L87, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshOptimizationSettings, 0x001C);
		}

		// ScriptStruct Engine.PoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLinkBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, LinkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, UnknownData_CKP1, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLinkBase, 0x0018);
		}

		// ScriptStruct Engine.PoseLink
		TEST_METHOD(ScriptStruct__Engine__PoseLink)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLink, 0x0018);
		}

		// ScriptStruct Engine.ComponentSpacePoseLink
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePoseLink)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePoseLink, 0x0018);
		}

		// ScriptStruct Engine.ExposedValueHandler
		TEST_METHOD(ScriptStruct__Engine__ExposedValueHandler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, BoundFunction, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueHandler, 0x0008);
		}

		// ScriptStruct Engine.AnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Base)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, UnknownData_LMGD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, EvaluateGraphExposedInputs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Base, 0x0010);
		}

		// ScriptStruct Engine.InputScaleBias
		TEST_METHOD(ScriptStruct__Engine__InputScaleBias)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Bias, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBias, 0x0008);
		}

		// ScriptStruct Engine.AnimNode_ApplyAdditive
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ApplyAdditive)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, additive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Alpha, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBias, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_1Y4X, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyAdditive, 0x0050);
		}

		// ScriptStruct Engine.AnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__Engine__AnimNode_BlendListBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendWeights, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, RemainingBlendTimes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, LastActiveChildIndex, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_ROOF, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListBase, 0x0058);
		}

		// ScriptStruct Engine.AnimNode_BlendListByBool
		TEST_METHOD(ScriptStruct__Engine__AnimNode_BlendListByBool)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, bActiveValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, UnknownData_VX6G, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByBool, 0x0060);
		}

		// ScriptStruct Engine.AnimNode_BlendListByEnum
		TEST_METHOD(ScriptStruct__Engine__AnimNode_BlendListByEnum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, EnumToPoseIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, ActiveEnumValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, UnknownData_ZAXH, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByEnum, 0x0070);
		}

		// ScriptStruct Engine.AnimNode_BlendListByInt
		TEST_METHOD(ScriptStruct__Engine__AnimNode_BlendListByInt)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, ActiveChildIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, UnknownData_67GT, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByInt, 0x0060);
		}

		// ScriptStruct Engine.AnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__Engine__AnimNode_BlendSpacePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, X, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Y, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Z, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PlayRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bLoop, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_YK5W, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSpace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, groupIndex, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, GroupRole, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_MIH6, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, InternalTimeAccumulator, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_ALWD, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendFilter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSampleDataCache, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpacePlayer, 0x00E0);
		}

		// ScriptStruct Engine.AnimNode_BlendSpaceEvaluator
		TEST_METHOD(ScriptStruct__Engine__AnimNode_BlendSpaceEvaluator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, NormalizedTime, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, UnknownData_B5YP, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpaceEvaluator, 0x00E8);
		}

		// ScriptStruct Engine.AnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SkeletalControlBase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ComponentPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, Alpha, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBias, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_BZOY, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SkeletalControlBase, 0x0038);
		}

		// ScriptStruct Engine.AnimNode_BoneDrivenController
		TEST_METHOD(ScriptStruct__Engine__AnimNode_BoneDrivenController)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceBone, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetBone, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetComponent, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_69RU, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, Multiplier, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, bUseRange, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_UKWL, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMin, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMax, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_5N87, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BoneDrivenController, 0x0068);
		}

		// ScriptStruct Engine.AnimNode_CopyBone
		TEST_METHOD(ScriptStruct__Engine__AnimNode_CopyBone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, TargetBone, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, SourceBone, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyTranslation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyRotation, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyScale, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, UnknownData_XK81, 0x0053);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBone, 0x0058);
		}

		// ScriptStruct Engine.ABRIKChainLink
		TEST_METHOD(ScriptStruct__Engine__ABRIKChainLink)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FABRIKChainLink, UnknownData_1VUV, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FABRIKChainLink, ChildZeroLengthTransformIndices, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FABRIKChainLink, 0x0028);
		}

		// ScriptStruct Engine.AnimNode_Fabrik
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Fabrik)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_9JN9, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformSpace, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_8KEJ, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformBone, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorRotationSource, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_HSDS, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, TipBone, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, RootBone, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, Precision, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, MaxIterations, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, bEnableDebugDraw, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_QI1F, 0x00A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Fabrik, 0x00B0);
		}

		// ScriptStruct Engine.AnimNode_GroundBones
		TEST_METHOD(ScriptStruct__Engine__AnimNode_GroundBones)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_GroundBones, UnknownData_LX92, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_GroundBones, 0x00B8);
		}

		// ScriptStruct Engine.AnimNode_HandIKRetargeting
		TEST_METHOD(ScriptStruct__Engine__AnimNode_HandIKRetargeting)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandFK, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandFK, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandIK, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandIK, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, IKBonesToMove, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, HandFKWeight, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, UnknownData_VPW8, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_HandIKRetargeting, 0x0080);
		}

		// ScriptStruct Engine.AnimNode_LayeredBoneBlend
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LayeredBoneBlend)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendPoses, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LayerSetup, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendWeights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_7XPL, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LayeredBoneBlend, 0x0080);
		}

		// ScriptStruct Engine.AnimNode_LookAt
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LookAt)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, BoneToModify, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtBone, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtLocation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtAxis, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_58JZ, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LookAt, 0x0070);
		}

		// ScriptStruct Engine.AnimNode_ModifyBone
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ModifyBone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, BoneToModify, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Translation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Rotation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, UnknownData_JZXP, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, BoneTransform, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, bUseRotationTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, bIgnoreOnDedicatedServer, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, bAllowUpdatingOutsideOfGameWorld, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, UnknownData_A03S, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Scale, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationMode, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleMode, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationSpace, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationSpace, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleSpace, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, UnknownData_DVDS, 0x00A6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyBone, 0x00B0);
		}

		// ScriptStruct Engine.AnimNode_ModifyBones
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ModifyBones)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBones, UnknownData_R0PB, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyBones, 0x0040);
		}

		// ScriptStruct Engine.AnimNode_MultiFabrik
		TEST_METHOD(ScriptStruct__Engine__AnimNode_MultiFabrik)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiFabrik, Precision, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiFabrik, bEnableDebugDraw, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiFabrik, UnknownData_E43H, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiFabrik, NodeName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MultiFabrik, 0x0048);
		}

		// ScriptStruct Engine.AnimNode_MultiFabrik_Dinos
		TEST_METHOD(ScriptStruct__Engine__AnimNode_MultiFabrik_Dinos)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiFabrik_Dinos, Precision, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiFabrik_Dinos, bEnableDebugDraw, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiFabrik_Dinos, UnknownData_HB2H, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiFabrik_Dinos, RootOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiFabrik_Dinos, RootRotationOffset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiFabrik_Dinos, bInitOffset, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiFabrik_Dinos, UnknownData_UH91, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MultiFabrik_Dinos, 0x0058);
		}

		// ScriptStruct Engine.AnimNode_RefPose
		TEST_METHOD(ScriptStruct__Engine__AnimNode_RefPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, RefPoseType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, UnknownData_Z63I, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RefPose, 0x0018);
		}

		// ScriptStruct Engine.AnimNode_MeshSpaceRefPose
		TEST_METHOD(ScriptStruct__Engine__AnimNode_MeshSpaceRefPose)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MeshSpaceRefPose, 0x0010);
		}

		// ScriptStruct Engine.AnimNode_Root
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Root)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Result, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Root, 0x0028);
		}

		// ScriptStruct Engine.AnimNode_RotateRootBone
		TEST_METHOD(ScriptStruct__Engine__AnimNode_RotateRootBone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Pitch, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Yaw, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, MeshToComponent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, UnknownData_QZ5I, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotateRootBone, 0x0040);
		}

		// ScriptStruct Engine.AnimNode_RotationMultiplier
		TEST_METHOD(ScriptStruct__Engine__AnimNode_RotationMultiplier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, TargetBone, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, SourceBone, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, Multiplier, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, RotationAxisToRefer, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, UnknownData_L5HT, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationMultiplier, 0x0058);
		}

		// ScriptStruct Engine.AnimNode_RotationOffsetBlendSpace
		TEST_METHOD(ScriptStruct__Engine__AnimNode_RotationOffsetBlendSpace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, BasePose, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationOffsetBlendSpace, 0x00F8);
		}

		// ScriptStruct Engine.AnimNode_SaveCachedPose
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SaveCachedPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, LastInitializedContextCounter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, LastCacheBonesContextCounter, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, LastUpdatedContextCounter, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, LastEvaluatedContextCounter, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, Pose, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, UnknownData_QI9J, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SaveCachedPose, 0x0040);
		}

		// ScriptStruct Engine.AnimNode_SequenceEvaluator
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SequenceEvaluator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, Sequence, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ExplicitTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_EBWS, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequenceEvaluator, 0x0020);
		}

		// ScriptStruct Engine.AnimNode_SequencePlayer
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SequencePlayer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, Sequence, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, InternalTimeAccumulator, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, bLoopAnimation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, UnknownData_P8ER, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, groupIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, GroupRole, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, UnknownData_HR4Y, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequencePlayer, 0x0030);
		}

		// ScriptStruct Engine.AnimNode_Slot
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Slot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, SlotName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, UnknownData_RWTG, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Slot, 0x0038);
		}

		// ScriptStruct Engine.AnimNode_SpringBone
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SpringBone)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringBone, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bLimitDisplacement, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_OA0A, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, MaxDisplacement, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringStiffness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringDamping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, ErrorResetThresh, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bNoZSpring, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_MW6X, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SpringBone, 0x0080);
		}

		// ScriptStruct Engine.AnimationActiveTransitionEntry
		TEST_METHOD(ScriptStruct__Engine__AnimationActiveTransitionEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_TUBC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationActiveTransitionEntry, 0x0060);
		}

		// ScriptStruct Engine.AnimationPotentialTransition
		TEST_METHOD(ScriptStruct__Engine__AnimationPotentialTransition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationPotentialTransition, UnknownData_E56P, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationPotentialTransition, 0x0010);
		}

		// ScriptStruct Engine.AnimNode_StateMachine
		TEST_METHOD(ScriptStruct__Engine__AnimNode_StateMachine)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, StateMachineIndexInClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, MaxTransitionsPerFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_JOEL, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, CurrentState, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, ElapsedTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_D3Y0, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateMachine, 0x0060);
		}

		// ScriptStruct Engine.AnimNode_Trail
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Trail)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailBone, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainLength, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainBoneAxis, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, bInvertChainBoneAxis, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, bLimitStretch, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_JC97, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailRelaxation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, StretchLimit, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, FakeVelocity, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, bActorSpaceFakeVel, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_4FYG, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Trail, 0x00C0);
		}

		// ScriptStruct Engine.AnimNode_TransitionPoseEvaluator
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionPoseEvaluator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, DataSource, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, EvaluatorMode, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_4ATH, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, FramesToCachePose, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, CachedPose, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, CacheFramesRemaining, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_R6OS, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionPoseEvaluator, 0x0030);
		}

		// ScriptStruct Engine.AnimNode_TransitionResult
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionResult)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, bCanEnterTransition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, UnknownData_SEH8, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionResult, 0x0018);
		}

		// ScriptStruct Engine.AnimNode_TwoBoneIK
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TwoBoneIK)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, IKBone, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StretchLimits, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorSpaceBoneName, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_AXM6, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocationSpace, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocationSpace, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_7I6F, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetSpaceBoneName, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_BYA9, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoBoneIK, 0x0080);
		}

		// ScriptStruct Engine.AnimationNode_TwoWayBlend
		TEST_METHOD(ScriptStruct__Engine__AnimationNode_TwoWayBlend)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationNode_TwoWayBlend, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationNode_TwoWayBlend, B, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationNode_TwoWayBlend, Alpha, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationNode_TwoWayBlend, AlphaScaleBias, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationNode_TwoWayBlend, UnknownData_I7IM, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationNode_TwoWayBlend, 0x0050);
		}

		// ScriptStruct Engine.AnimNode_UseCachedPose
		TEST_METHOD(ScriptStruct__Engine__AnimNode_UseCachedPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, LinkToCachingNode, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_UseCachedPose, 0x0028);
		}

		// ScriptStruct Engine.AnimNode_WheelHandler
		TEST_METHOD(ScriptStruct__Engine__AnimNode_WheelHandler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WheelHandler, VehicleSimComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WheelHandler, UnknownData_G35A, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_WheelHandler, 0x0050);
		}

		// ScriptStruct Engine.AnimNode_ConvertComponentToLocalSpace
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertComponentToLocalSpace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertComponentToLocalSpace, ComponentPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertComponentToLocalSpace, 0x0028);
		}

		// ScriptStruct Engine.AnimNode_ConvertLocalToComponentSpace
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertLocalToComponentSpace)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertLocalToComponentSpace, LocalPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertLocalToComponentSpace, 0x0028);
		}

		// ScriptStruct Engine.DummySpacerCameraTypes
		TEST_METHOD(ScriptStruct__Engine__DummySpacerCameraTypes)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummySpacerCameraTypes, UnknownData_MNBB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDummySpacerCameraTypes, 0x0001);
		}

		// ScriptStruct Engine.StreamableManager
		TEST_METHOD(ScriptStruct__Engine__StreamableManager)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamableManager, UnknownData_PS2W, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamableManager, 0x00A0);
		}

		// ScriptStruct CoreUObject.Object.Int32RangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__Object__Int32RangeBound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, UnknownData_GEN7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32RangeBound, 0x0008);
		}

		// ScriptStruct CoreUObject.Object.Int32Range
		TEST_METHOD(ScriptStruct__CoreUObject__Object__Int32Range)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Range, 0x0010);
		}

		// ScriptStruct CoreUObject.Object.FloatRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__Object__FloatRangeBound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, UnknownData_VHVK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRangeBound, 0x0008);
		}

		// ScriptStruct CoreUObject.Object.FloatRange
		TEST_METHOD(ScriptStruct__CoreUObject__Object__FloatRange)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRange, 0x0010);
		}

		// ScriptStruct CoreUObject.Object.FallbackStruct
		TEST_METHOD(ScriptStruct__CoreUObject__Object__FallbackStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallbackStruct, UnknownData_TK9K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFallbackStruct, 0x0001);
		}

		// ScriptStruct CoreUObject.Object.StringAssetReference
		TEST_METHOD(ScriptStruct__CoreUObject__Object__StringAssetReference)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringAssetReference, AssetLongPathname, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringAssetReference, 0x0010);
		}

		// ScriptStruct CoreUObject.Object.StringClassReference
		TEST_METHOD(ScriptStruct__CoreUObject__Object__StringClassReference)
		{
			// Fields

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringClassReference, 0x0010);
		}

		// ScriptStruct CoreUObject.Object.Timespan
		TEST_METHOD(ScriptStruct__CoreUObject__Object__Timespan)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimespan, UnknownData_PZ5R, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimespan, 0x0008);
		}

		// ScriptStruct CoreUObject.Object.DateTime
		TEST_METHOD(ScriptStruct__CoreUObject__Object__DateTime)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTime, UnknownData_PQ6M, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTime, 0x0008);
		}

		// ScriptStruct CoreUObject.Object.RandomStream
		TEST_METHOD(ScriptStruct__CoreUObject__Object__RandomStream)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, InitialSeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, UnknownData_UHYK, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomStream, 0x0008);
		}

		// ScriptStruct CoreUObject.Object.Quat
		TEST_METHOD(ScriptStruct__CoreUObject__Object__Quat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuat, 0x0010);
		}

		// ScriptStruct CoreUObject.Object.Vector
		TEST_METHOD(ScriptStruct__CoreUObject__Object__Vector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector, 0x000C);
		}

		// ScriptStruct CoreUObject.Object.Transform
		TEST_METHOD(ScriptStruct__CoreUObject__Object__Transform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Translation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_ALSD, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Scale3D, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_SWND, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransform, 0x0030);
		}

		// ScriptStruct CoreUObject.Object.LinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__Object__LinearColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, A, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearColor, 0x0010);
		}

		// ScriptStruct CoreUObject.Object.InterpCurvePointLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__Object__InterpCurvePointLinearColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, ArriveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, LeaveTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InterpMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, UnknownData_9BS9, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointLinearColor, 0x0038);
		}

		// ScriptStruct CoreUObject.Object.InterpCurveLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__Object__InterpCurveLinearColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveLinearColor, 0x0010);
		}

		// ScriptStruct CoreUObject.Object.TwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__Object__TwoVectors)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwoVectors, 0x0018);
		}

		// ScriptStruct CoreUObject.Object.InterpCurvePointTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__Object__InterpCurvePointTwoVectors)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, ArriveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, LeaveTangent, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InterpMode, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, UnknownData_9R3M, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointTwoVectors, 0x0050);
		}

		// ScriptStruct CoreUObject.Object.InterpCurveTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__Object__InterpCurveTwoVectors)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveTwoVectors, 0x0010);
		}

		// ScriptStruct CoreUObject.Object.InterpCurvePointVector
		TEST_METHOD(ScriptStruct__CoreUObject__Object__InterpCurvePointVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InterpMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, UnknownData_6GQ7, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector, 0x002C);
		}

		// ScriptStruct CoreUObject.Object.InterpCurveVector
		TEST_METHOD(ScriptStruct__CoreUObject__Object__InterpCurveVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector, 0x0010);
		}

		// ScriptStruct CoreUObject.Object.Vector2D
		TEST_METHOD(ScriptStruct__CoreUObject__Object__Vector2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2D, 0x0008);
		}

		// ScriptStruct CoreUObject.Object.InterpCurvePointVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__Object__InterpCurvePointVector2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InterpMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, UnknownData_7OCL, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector2D, 0x0020);
		}

		// ScriptStruct CoreUObject.Object.InterpCurveVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__Object__InterpCurveVector2D)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector2D, 0x0010);
		}

		// ScriptStruct CoreUObject.Object.InterpCurvePointFloat
		TEST_METHOD(ScriptStruct__CoreUObject__Object__InterpCurvePointFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, ArriveTangent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, LeaveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InterpMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, UnknownData_EVL1, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointFloat, 0x0014);
		}

		// ScriptStruct CoreUObject.Object.InterpCurveFloat
		TEST_METHOD(ScriptStruct__CoreUObject__Object__InterpCurveFloat)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveFloat, 0x0010);
		}

		// ScriptStruct CoreUObject.Object.Plane
		TEST_METHOD(ScriptStruct__CoreUObject__Object__Plane)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlane, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlane, 0x0010);
		}

		// ScriptStruct CoreUObject.Object.Matrix
		TEST_METHOD(ScriptStruct__CoreUObject__Object__Matrix)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, XPlane, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, YPlane, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, ZPlane, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, WPlane, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatrix, 0x0040);
		}

		// ScriptStruct CoreUObject.Object.OrientedBox
		TEST_METHOD(ScriptStruct__CoreUObject__Object__OrientedBox)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentZ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrientedBox, 0x003C);
		}

		// ScriptStruct CoreUObject.Object.BoxSphereBounds
		TEST_METHOD(ScriptStruct__CoreUObject__Object__BoxSphereBounds)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, Origin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, BoxExtent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, SphereRadius, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoxSphereBounds, 0x001C);
		}

		// ScriptStruct CoreUObject.Object.Box
		TEST_METHOD(ScriptStruct__CoreUObject__Object__Box)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Max, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, IsValid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, UnknownData_EU5H, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox, 0x001C);
		}

		// ScriptStruct CoreUObject.Object.Color
		TEST_METHOD(ScriptStruct__CoreUObject__Object__Color)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, R, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColor, 0x0004);
		}

		// ScriptStruct CoreUObject.Object.IntVector
		TEST_METHOD(ScriptStruct__CoreUObject__Object__IntVector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntVector, 0x000C);
		}

		// ScriptStruct CoreUObject.Object.IntPoint
		TEST_METHOD(ScriptStruct__CoreUObject__Object__IntPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntPoint, 0x0008);
		}

		// ScriptStruct CoreUObject.Object.PackedNormal
		TEST_METHOD(ScriptStruct__CoreUObject__Object__PackedNormal)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Z, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, W, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedNormal, 0x0004);
		}

		// ScriptStruct CoreUObject.Object.Rotator
		TEST_METHOD(ScriptStruct__CoreUObject__Object__Rotator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Yaw, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Roll, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator, 0x000C);
		}

		// ScriptStruct CoreUObject.Object.Vector4
		TEST_METHOD(ScriptStruct__CoreUObject__Object__Vector4)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4, 0x0010);
		}

		// ScriptStruct CoreUObject.Object.NetworkGUID
		TEST_METHOD(ScriptStruct__CoreUObject__Object__NetworkGUID)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkGUID, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetworkGUID, 0x0004);
		}

		// ScriptStruct CoreUObject.Object.Guid
		TEST_METHOD(ScriptStruct__CoreUObject__Object__Guid)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, D, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGuid, 0x0010);
		}

		// ScriptStruct UMG.WidgetTransform
		TEST_METHOD(ScriptStruct__UMG__WidgetTransform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Shear, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Angle, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetTransform, 0x001C);
		}

		// ScriptStruct UMG.EventReply
		TEST_METHOD(ScriptStruct__UMG__EventReply)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventReply, UnknownData_X5WA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventReply, 0x00A0);
		}

		// ScriptStruct UMG.Anchors
		TEST_METHOD(ScriptStruct__UMG__Anchors)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Minimum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Maximum, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchors, 0x0010);
		}

		// ScriptStruct UMG.UserWidget.PaintContext
		TEST_METHOD(ScriptStruct__UMG__UserWidget__PaintContext)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintContext, UnknownData_9EGB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintContext, 0x0030);
		}

		// ScriptStruct UMG.CanvasPanelSlot.AnchorData
		TEST_METHOD(ScriptStruct__UMG__CanvasPanelSlot__AnchorData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Offsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Anchors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Alignment, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchorData, 0x0028);
		}

		// ScriptStruct UMG.SlateChildSize
		TEST_METHOD(ScriptStruct__UMG__SlateChildSize)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, SizeRule, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, UnknownData_Y242, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateChildSize, 0x0008);
		}

		// ScriptStruct UMG.WidgetAnimation.WidgetAnimationBinding
		TEST_METHOD(ScriptStruct__UMG__WidgetAnimation__WidgetAnimationBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, WidgetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, SlotWidgetName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, AnimationGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetAnimationBinding, 0x0020);
		}

		// ScriptStruct UMG.WidgetBlueprintGeneratedClass.DelegateRuntimeBinding
		TEST_METHOD(ScriptStruct__UMG__WidgetBlueprintGeneratedClass__DelegateRuntimeBinding)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, PropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, Kind, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, UnknownData_OQ07, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateRuntimeBinding, 0x0028);
		}

		// ScriptStruct OnlineSubsystemUtils.PartyBeaconState.PlayerReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PartyBeaconState__PlayerReservation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UniqueID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ValidationStr, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ElapsedTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UnknownData_MKKK, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerReservation, 0x0028);
		}

		// ScriptStruct OnlineSubsystemUtils.PartyBeaconState.PartyReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PartyBeaconState__PartyReservation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, TeamNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, UnknownData_8KWC, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyLeader, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyMembers, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyReservation, 0x0028);
		}

		// ScriptStruct SlateCore.SlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateWidgetStyle, UnknownData_TTGN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateWidgetStyle, 0x0008);
		}

		// ScriptStruct SlateCore.Margin
		TEST_METHOD(ScriptStruct__SlateCore__Margin)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMargin, 0x0010);
		}

		// ScriptStruct SlateCore.SlateColor
		TEST_METHOD(ScriptStruct__SlateCore__SlateColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, SpecifiedColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, ColorUseRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, UnknownData_P2LN, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateColor, 0x0028);
		}

		// ScriptStruct SlateCore.SlateBrush
		TEST_METHOD(ScriptStruct__SlateCore__SlateBrush)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, DrawAs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_F8FI, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Margin, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Tint, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_7ZIB, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, TintColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Tiling, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Mirroring, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageType, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_JISU, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceObject, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, bIsDynamicallyLoaded, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, bHasUObject, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_GO6B, 0x0072);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateBrush, 0x0078);
		}

		// ScriptStruct SlateCore.SlateSound
		TEST_METHOD(ScriptStruct__SlateCore__SlateSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, ResourceObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, UnknownData_O6XE, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateSound, 0x0018);
		}

		// ScriptStruct SlateCore.SlateTypes.ButtonStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__ButtonStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Normal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Hovered, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Pressed, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Disabled, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, NormalPadding, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedPadding, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedSlateSound, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, HoveredSlateSound, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedSound, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, HoveredSound, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonStyle, 0x0248);
		}

		// ScriptStruct SlateCore.SlateFontInfo
		TEST_METHOD(ScriptStruct__SlateCore__SlateFontInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontDrawScalar, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, EnableOutlineAndGlowInShader, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_WDPU, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, Size, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, Hinting, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_4H1X, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateFontInfo, 0x0020);
		}

		// ScriptStruct SlateCore.SlateTypes.TextBlockStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__TextBlockStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ColorAndOpacity, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowOffset, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowColorAndOpacity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, SelectedBackgroundColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightColor, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightShape, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextBlockStyle, 0x0118);
		}

		// ScriptStruct SlateCore.SlateTypes.WindowStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__WindowStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MinimizeButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MaximizeButtonStyle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, RestoreButtonStyle, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, CloseButtonStyle, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, TitleTextStyle, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ActiveTitleBrush, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, InactiveTitleBrush, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, FlashTitleBrush, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineBrush, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineColor, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BorderBrush, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundBrush, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ChildBackgroundBrush, 0x0D38);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowStyle, 0x0DB0);
		}

		// ScriptStruct SlateCore.SlateTypes.ScrollBorderStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__ScrollBorderStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, BottomShadowBrush, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBorderStyle, 0x00F8);
		}

		// ScriptStruct SlateCore.SlateTypes.ScrollBoxStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__ScrollBoxStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, BottomShadowBrush, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, LeftShadowBrush, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, RightShadowBrush, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBoxStyle, 0x01E8);
		}

		// ScriptStruct SlateCore.SlateTypes.DockTabStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__DockTabStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, CloseButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, NormalBrush, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ActiveBrush, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayBrush, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ForegroundBrush, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, HoveredBrush, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ContentAreaBrush, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabWellBrush, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabPadding, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, OverlapWidth, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, UnknownData_H4A9, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, FlashColor, 0x05B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDockTabStyle, 0x05D8);
		}

		// ScriptStruct SlateCore.SlateTypes.TableColumnHeaderStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__TableColumnHeaderStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryAscendingImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryDescendingImage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryAscendingImage, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryDescendingImage, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, NormalBrush, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, HoveredBrush, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownImage, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownNormalBorderBrush, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownHoveredBorderBrush, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableColumnHeaderStyle, 0x0440);
		}

		// ScriptStruct SlateCore.SlateTypes.SplitterStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__SplitterStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleNormalBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleHighlightBrush, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplitterStyle, 0x00F8);
		}

		// ScriptStruct SlateCore.SlateTypes.HeaderRowStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__HeaderRowStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, LastColumnStyle, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnSplitterStyle, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, BackgroundBrush, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ForegroundColor, 0x09F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeaderRowStyle, 0x0A20);
		}

		// ScriptStruct SlateCore.SlateTypes.TableRowStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__TableRowStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectorFocusedBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHoveredBrush, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveBrush, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHoveredBrush, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveBrush, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundHoveredBrush, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundBrush, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundHoveredBrush, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundBrush, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DragDropLineIndicatorBrush, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DragDropBorderIndicatorBrush, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, TextColor, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectedTextColor, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowStyle, 0x0580);
		}

		// ScriptStruct SlateCore.SlateTypes.SpinBoxStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__SpinBoxStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, BackgroundBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, HoveredBackgroundBrush, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ActiveFillBrush, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, InactiveFillBrush, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ArrowsImage, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ForegroundColor, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, TextPadding, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpinBoxStyle, 0x0298);
		}

		// ScriptStruct SlateCore.SlateTypes.InlineTextImageStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__InlineTextImageStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Image, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Baseline, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, UnknownData_38DR, 0x0082);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineTextImageStyle, 0x0088);
		}

		// ScriptStruct SlateCore.SlateTypes.SliderStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__SliderStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalBarImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledBarImage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalThumbImage, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledThumbImage, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSliderStyle, 0x01E8);
		}

		// ScriptStruct SlateCore.SlateTypes.VolumeControlStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__VolumeControlStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, SliderStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, HighVolumeImage, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MidVolumeImage, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, LowVolumeImage, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, NoVolumeImage, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MutedImage, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVolumeControlStyle, 0x0448);
		}

		// ScriptStruct SlateCore.SlateTypes.ScrollBarStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__ScrollBarStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBackgroundImage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, NormalThumbImage, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HoveredThumbImage, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, DraggedThumbImage, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBarStyle, 0x0260);
		}

		// ScriptStruct SlateCore.SlateTypes.EditableTextBoxStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__EditableTextBoxStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageHovered, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageFocused, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageReadOnly, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Padding, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Font, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ForegroundColor, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundColor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ReadOnlyForegroundColor, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, HScrollBarPadding, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, VScrollBarPadding, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ScrollBarStyle, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextBoxStyle, 0x0510);
		}

		// ScriptStruct SlateCore.SlateTypes.SearchBoxStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__SearchBoxStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, TextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ActiveFontInfo, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UpArrowImage, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, DownArrowImage, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, GlassImage, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ClearImage, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchBoxStyle, 0x0718);
		}

		// ScriptStruct SlateCore.SlateTypes.ExpandableAreaStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__ExpandableAreaStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, CollapsedImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, ExpandedImage, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpandableAreaStyle, 0x00F8);
		}

		// ScriptStruct SlateCore.SlateTypes.ProgressBarStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__ProgressBarStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, BackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, FillImage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, MarqueeImage, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProgressBarStyle, 0x0170);
		}

		// ScriptStruct SlateCore.SlateTypes.InlineEditableTextBlockStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__InlineEditableTextBlockStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, EditableTextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, TextStyle, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineEditableTextBlockStyle, 0x0630);
		}

		// ScriptStruct SlateCore.SlateTypes.EditableTextStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__EditableTextStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, ColorAndOpacity, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageSelected, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageSelectionTarget, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageComposing, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, CaretImage, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextStyle, 0x0230);
		}

		// ScriptStruct SlateCore.SlateTypes.HyperlinkStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__HyperlinkStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, UnderlineStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, TextStyle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, Padding, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHyperlinkStyle, 0x0378);
		}

		// ScriptStruct SlateCore.SlateTypes.ComboButtonStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__ComboButtonStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, DownArrowImage, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderBrush, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderPadding, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboButtonStyle, 0x0350);
		}

		// ScriptStruct SlateCore.SlateTypes.ComboBoxStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__ComboBoxStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, ComboButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, PressedSlateSound, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, SelectionChangeSlateSound, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, PressedSound, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, SelectionChangeSound, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboBoxStyle, 0x0398);
		}

		// ScriptStruct SlateCore.SlateTypes.CheckBoxStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateTypes__CheckBoxStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckBoxType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UnknownData_LKAL, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedImage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedHoveredImage, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedPressedImage, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedImage, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedHoveredImage, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedPressedImage, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedImage, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedHoveredImage, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedPressedImage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, Padding, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, ForegroundColor, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, BorderBackgroundColor, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedSlateSound, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedSlateSound, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, HoveredSlateSound, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedSound, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedSound, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, HoveredSound, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCheckBoxStyle, 0x0508);
		}

		// ScriptStruct SlateCore.InputEvent
		TEST_METHOD(ScriptStruct__SlateCore__InputEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputEvent, UnknownData_3SYV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputEvent, 0x0020);
		}

		// ScriptStruct SlateCore.PointerEvent
		TEST_METHOD(ScriptStruct__SlateCore__PointerEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerEvent, UnknownData_ZHF9, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerEvent, 0x0078);
		}

		// ScriptStruct SlateCore.Geometry
		TEST_METHOD(ScriptStruct__SlateCore__Geometry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometry, UnknownData_N8ZX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometry, 0x0034);
		}

		// ScriptStruct SlateCore.ControllerEvent
		TEST_METHOD(ScriptStruct__SlateCore__ControllerEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FControllerEvent, UnknownData_UZK0, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FControllerEvent, 0x0040);
		}

		// ScriptStruct SlateCore.KeyboardFocusEvent
		TEST_METHOD(ScriptStruct__SlateCore__KeyboardFocusEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyboardFocusEvent, UnknownData_WJ93, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyboardFocusEvent, 0x0008);
		}

		// ScriptStruct SlateCore.CharacterEvent
		TEST_METHOD(ScriptStruct__SlateCore__CharacterEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterEvent, UnknownData_GZTI, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterEvent, 0x0028);
		}

		// ScriptStruct SlateCore.KeyboardEvent
		TEST_METHOD(ScriptStruct__SlateCore__KeyboardEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyboardEvent, UnknownData_8TS2, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyboardEvent, 0x0040);
		}

		// ScriptStruct SlateCore.MotionEvent
		TEST_METHOD(ScriptStruct__SlateCore__MotionEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionEvent, UnknownData_R012, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionEvent, 0x0058);
		}

		// ScriptStruct ShooterGame.PrimalGameData.PrimalCharacterStatusValueDefinition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__PrimalCharacterStatusValueDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusValueDefinition, StatusValueIcon, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusValueDefinition, StatusValueName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusValueDefinition, bLevelUpSetToMaxValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusValueDefinition, bDisplayHideCurrentValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusValueDefinition, bDisplayAsPercent, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusValueDefinition, UnknownData_OBKM, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalCharacterStatusValueDefinition, 0x0020);
		}

		// ScriptStruct ShooterGame.PrimalGameData.PrimalCharacterStatusStateDefinition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__PrimalCharacterStatusStateDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateDefinition, StatusValueType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateDefinition, UnknownData_0JT5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateDefinition, StatusValueThresholdIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateDefinition, StatusStateIcon, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateDefinition, StatusStateName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateDefinition, StatusStateDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateDefinition, StatusStateNameColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateDefinition, bUsed, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateDefinition, bDisplayHUDMessage, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateDefinition, UnknownData_FKIR, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateDefinition, HUDMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateDefinition, HUDMessageColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateDefinition, BuffType, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalCharacterStatusStateDefinition, 0x0050);
		}

		// ScriptStruct ShooterGame.PrimalGameData.PrimalItemStatDefinition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__PrimalItemStatDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalItemStatDefinition, ItemStatIcon, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalItemStatDefinition, ItemStatName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalItemStatDefinition, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalGameData.PrimalItemDefinition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__PrimalItemDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalItemDefinition, ItemTypeIcon, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalItemDefinition, ItemTypeName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalItemDefinition, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalGameData.PrimalEquipmentDefinition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__PrimalEquipmentDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalEquipmentDefinition, EquipmentTypeIcon, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalEquipmentDefinition, EquipmentTypeName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalEquipmentDefinition, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalGameData.PrimalItemQuality
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__PrimalItemQuality)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalItemQuality, QualityColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalItemQuality, QualityName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalItemQuality, QualityRandomMultiplierThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalItemQuality, CraftingXPMultiplier, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalItemQuality, RepairingXPMultiplier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalItemQuality, CraftingResourceRequirementsMultiplier, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalItemQuality, 0x0030);
		}

		// ScriptStruct ShooterGame.PrimalGameData.StatusValueModifierDescription
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__StatusValueModifierDescription)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusValueModifierDescription, ModifierIcon, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusValueModifierDescription, ModifierName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusValueModifierDescription, ModifierDescription, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusValueModifierDescription, ModifierColor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusValueModifierDescription, bDisplayHUDMessage, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusValueModifierDescription, UnknownData_NG9S, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusValueModifierDescription, HUDMessage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusValueModifierDescription, HUDMessageColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusValueModifierDescription, bPreventDrawingBuffDescription, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusValueModifierDescription, UnknownData_VRN6, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusValueModifierDescription, BuffType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusValueModifierDescription, UnknownData_LWW0, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatusValueModifierDescription, 0x0050);
		}

		// ScriptStruct ShooterGame.PrimalGameData.AppIDItem
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__AppIDItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppIDItem, AchievementID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppIDItem, AchievementIDs, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppIDItem, GiveItemIfEmoteNameUnlocked, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppIDItem, AppID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppIDItem, PlayerBadgeGroup, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppIDItem, bForceNewDefaultCosmetic, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppIDItem, UnknownData_IMDY, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppIDItem, PlayerIDStrings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppIDItem, ItemClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppIDItem, ItemClasses, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAppIDItem, 0x0060);
		}

		// ScriptStruct ShooterGame.RangedValues
		TEST_METHOD(ScriptStruct__ShooterGame__RangedValues)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRangedValues, Range, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRangedValues, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRangedValues, 0x0008);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ColorDefinition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ColorDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorDefinition, ColorName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorDefinition, ColorValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorDefinition, bHasOverridePriority, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorDefinition, UnknownData_066X, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorDefinition, 0x001C);
		}

		// ScriptStruct ShooterGame.PrimalGameData.BoneModifierRange
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__BoneModifierRange)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifierRange, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifierRange, MinScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifierRange, MaxScale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifierRange, MinTranslation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifierRange, MaxTranslation, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifierRange, Recursive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifierRange, UnknownData_DKM0, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneModifierRange, 0x003C);
		}

		// ScriptStruct ShooterGame.PrimalGameData.BoneModifierRangeArray
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__BoneModifierRangeArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifierRangeArray, UnknownData_959P, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifierRangeArray, MinLegLengthMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifierRangeArray, MaxLegLengthMultiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifierRangeArray, UnknownData_YN15, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifierRangeArray, BoneArray, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneModifierRangeArray, 0x0020);
		}

		// ScriptStruct ShooterGame.PrimalGameData.PlayerCharacterGenderDefinition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__PlayerCharacterGenderDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCharacterGenderDefinition, GenderString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCharacterGenderDefinition, CharacterBlueprint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCharacterGenderDefinition, ColorSetBody, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCharacterGenderDefinition, ColorSetHair, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCharacterGenderDefinition, ColorSetEyes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCharacterGenderDefinition, CharacterPreviewMaterial, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCharacterGenderDefinition, DefaultCharacterNames, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCharacterGenderDefinition, DefaultCharacterNameWeights, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCharacterGenderDefinition, CharacterBoneModifierRanges, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCharacterGenderDefinition, ExtraCharacterBoneModifierMax, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerCharacterGenderDefinition, 0x05F0);
		}

		// ScriptStruct ShooterGame.PrimalGameData.LevelExperienceRamp
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__LevelExperienceRamp)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelExperienceRamp, ExperiencePointsForLevel, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelExperienceRamp, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalGameData.NamedTeamDefinition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__NamedTeamDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTeamDefinition, TeamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTeamDefinition, UnknownData_ETKN, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTeamDefinition, TeamNameList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTeamDefinition, TargetingMultiplierTeamNames, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTeamDefinition, DontGiveDamageTeamList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTeamDefinition, DontReceiveDamageTeamList, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTeamDefinition, MaximumTargetableDistanceTeams, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTeamDefinition, MaximumTargetableDistances, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTeamDefinition, TargetingMultiplierTeamWeights, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedTeamDefinition, 0x0080);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ExplorerNoteAchievement
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ExplorerNoteAchievement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteAchievement, AchievementName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteAchievement, ExplorerNoteIndices, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExplorerNoteAchievement, 0x0020);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ClassRemapping
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ClassRemapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRemapping, FromClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRemapping, ToClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassRemapping, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ActiveEventSupplyCrateWeight
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ActiveEventSupplyCrateWeight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveEventSupplyCrateWeight, ReplacementCrateClasses, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveEventSupplyCrateWeight, Weights, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveEventSupplyCrateWeight, ActiveEvent, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveEventSupplyCrateWeight, 0x0028);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ClassAddition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ClassAddition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassAddition, ForClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassAddition, ClassAdditions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassAddition, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalGameData.BuffAddition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__BuffAddition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuffAddition, ForClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuffAddition, BuffAdditions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuffAddition, 0x0018);
		}

		// ScriptStruct ShooterGame.AvailableMission
		TEST_METHOD(ScriptStruct__ShooterGame__AvailableMission)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvailableMission, MissionClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvailableMission, UnknownData_M0NE, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAvailableMission, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalGameData.RandValueRange
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__RandValueRange)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandValueRange, MinVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandValueRange, MaxVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandValueRange, RandPower, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandValueRange, 0x000C);
		}

		// ScriptStruct ShooterGame.PrimalGameData.DinoBabySetup
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__DinoBabySetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoBabySetup, DinoNameTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoBabySetup, BabyBoneModifierRanges, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoBabySetup, WildRandomScaleRangeWeights, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoBabySetup, WildRandomScaleRanges, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDinoBabySetup, 0x0038);
		}

		// ScriptStruct ShooterGame.PrimalGameData.MultiAchievement
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__MultiAchievement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiAchievement, UnlockAchievement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiAchievement, RequiredAchievements, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiAchievement, 0x0020);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ClassRemappingWeight
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ClassRemappingWeight)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRemappingWeight, FromClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRemappingWeight, ToClasses, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRemappingWeight, Weights, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRemappingWeight, ActiveEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRemappingWeight, UnknownData_KO9S, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassRemappingWeight, 0x0038);
		}

		// ScriptStruct ShooterGame.PrimalGameData.NPCDifficultyLevelRange
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__NPCDifficultyLevelRange)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCDifficultyLevelRange, EnemyLevelsMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCDifficultyLevelRange, EnemyLevelsMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCDifficultyLevelRange, GameDifficulties, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNPCDifficultyLevelRange, 0x0030);
		}

		// ScriptStruct ShooterGame.PrimalGameData.NPCSpawnEntry
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__NPCSpawnEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, AnEntryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, NPCsToSpawn, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, NPCsToSpawnStrings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, NPCRandomSpawnClassWeights, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, NPCsSpawnOffsets, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, NPCsToSpawnPercentageChance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, NPCMinLevelOffset, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, NPCMaxLevelOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, NPCMinLevelMultiplier, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, NPCMaxLevelMultiplier, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, UnknownData_VDRZ, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, NPCOverrideLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, ExtentCheck, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, GroupSpawnOffset, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, EntryWeight, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, ManualSpawnPointSpreadRadius, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, WaterOnlySpawnMinimumWaterHeight, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, MaximumWaterHeight, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, ColorSets, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, NPCDifficultyLevelRanges, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, LevelDifficultyTestOverride, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, SpawnMinDistanceFromStructuresMultiplier, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, SpawnMinDistanceFromPlayersMultiplier, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, SpawnMinDistanceFromTamedDinosMultiplier, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, RandGroupSpawnOffsetZMin, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntry, RandGroupSpawnOffsetZMax, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNPCSpawnEntry, 0x0110);
		}

		// ScriptStruct ShooterGame.PrimalGameData.NPCSpawnLimit
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__NPCSpawnLimit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnLimit, NPCClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnLimit, NPCClassString, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnLimit, MaxPercentageOfDesiredNumToAllow, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnLimit, UnknownData_W1P9, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNPCSpawnLimit, 0x0020);
		}

		// ScriptStruct ShooterGame.PrimalGameData.NPCSpawnEntriesContainerAdditions
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__NPCSpawnEntriesContainerAdditions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntriesContainerAdditions, SpawnEntriesContainerClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntriesContainerAdditions, AdditionalNPCSpawnEntries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNPCSpawnEntriesContainerAdditions, AdditionalNPCSpawnLimits, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNPCSpawnEntriesContainerAdditions, 0x0028);
		}

		// ScriptStruct ShooterGame.PrimalGameData.LocalizedSoundCueEntry
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__LocalizedSoundCueEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSoundCueEntry, TwoLetterISOLanguageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSoundCueEntry, LocalizedSoundCue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedSoundCueEntry, 0x0020);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ExplorerNoteEntry
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ExplorerNoteEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteEntry, UnknownData_RYJE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteEntry, ExplorerNoteType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteEntry, UnknownData_YEKK, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteEntry, ExplorerNoteDescription, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteEntry, DossierTameableDinoNameTag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteEntry, ExplorerNoteMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteEntry, ExplorerNoteAnimBP, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteEntry, ExplorerNoteTexture, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteEntry, ExplorerNoteIcon, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteEntry, ExplorerNoteIconMaterial, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteEntry, UnlockedSoundOverride, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteEntry, ShowExplorerNoteTitleDelayTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteEntry, UnknownData_4S41, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteEntry, ExplorerNoteOpenSound, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteEntry, ExplorerNoteCloseSound, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteEntry, LocalizedSubtitle, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorerNoteEntry, LocalizedAudio, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExplorerNoteEntry, 0x0098);
		}

		// ScriptStruct ShooterGame.PrimalGameData.UnlockableEmoteEntry
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__UnlockableEmoteEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockableEmoteEntry, EmoteName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockableEmoteEntry, EmoteDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockableEmoteEntry, EmoteGroup, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockableEmoteEntry, UseEmoteMessage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockableEmoteEntry, MaleAnim, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockableEmoteEntry, FemaleAnim, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockableEmoteEntry, EmotePlayMinimumInterval, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockableEmoteEntry, bGiveDefault, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockableEmoteEntry, UnknownData_OZ79, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUnlockableEmoteEntry, 0x0048);
		}

		// ScriptStruct ShooterGame.PrimalGameData.EmoteGroup
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__EmoteGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmoteGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmoteGroup, GroupColor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmoteGroup, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ObjectCorrelation
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ObjectCorrelation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectCorrelation, FromObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectCorrelation, ToObject, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FObjectCorrelation, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalGameData.OverrideAnimBlueprintEntry
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__OverrideAnimBlueprintEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverrideAnimBlueprintEntry, FromBPClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverrideAnimBlueprintEntry, ToBPClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverrideAnimBlueprintEntry, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalGameData.HairStyleDefinition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__HairStyleDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStyleDefinition, bIsHairStyleLocked, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStyleDefinition, UnknownData_GS0V, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStyleDefinition, UnlockHairStyleName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStyleDefinition, UnknownData_GZDL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStyleDefinition, HairStyleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStyleDefinition, HairMeshMale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStyleDefinition, MaleBeginHairMorphTargetRange, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStyleDefinition, UnknownData_A1XZ, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStyleDefinition, HairMeshFemale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStyleDefinition, FemaleBeginHairMorphTargetRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStyleDefinition, UnknownData_UKIB, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairStyleDefinition, 0x0040);
		}

		// ScriptStruct ShooterGame.PrimalGameData.GrinderItemReplacer
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__GrinderItemReplacer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrinderItemReplacer, current, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrinderItemReplacer, replacement, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrinderItemReplacer, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalGameData.InvalidReferenceRedirector
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__InvalidReferenceRedirector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInvalidReferenceRedirector, InvalidReferenceKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInvalidReferenceRedirector, RedirectedClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInvalidReferenceRedirector, RedirectedClassSoftReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInvalidReferenceRedirector, LimitedToMaps, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInvalidReferenceRedirector, 0x0038);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ExtraEggItem
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ExtraEggItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExtraEggItem, DropItem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExtraEggItem, ActiveEventFilter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExtraEggItem, ForDinoCharacter, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExtraEggItem, DropChance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExtraEggItem, UnknownData_Q6ML, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExtraEggItem, 0x0028);
		}

		// ScriptStruct ShooterGame.PrimalGameData.WorldDefaultItemSet
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__WorldDefaultItemSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldDefaultItemSet, ItemSetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldDefaultItemSet, MapName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldDefaultItemSet, bFirstTimeEquip, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldDefaultItemSet, bOnlyGiveItemSetOnce, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldDefaultItemSet, bEquipOnNewPawn, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldDefaultItemSet, UnknownData_WO8I, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldDefaultItemSet, ForceEquipIfAppID, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldDefaultItemSet, ItemsToGive, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldDefaultItemSet, 0x0030);
		}

		// ScriptStruct ShooterGame.PrimalGameData.CryopodPersistantBuffs
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__CryopodPersistantBuffs)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCryopodPersistantBuffs, BuffClassString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCryopodPersistantBuffs, IDBitMask, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCryopodPersistantBuffs, UnknownData_KTZN, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCryopodPersistantBuffs, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ExtraItemAttachmentInfo
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ExtraItemAttachmentInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FExtraItemAttachmentInfo, ExtraComponentsToAttach, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExtraItemAttachmentInfo, SocketToAttachTo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExtraItemAttachmentInfo, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ItemAttachmentInfo
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ItemAttachmentInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAttachmentInfo, ComponentToAttach, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAttachmentInfo, ExtraItemAttachmentInfos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAttachmentInfo, SocketToAttachTo, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAttachmentInfo, UnknownData_0VAZ, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAttachmentInfo, OnlyUseAttachmentForActorClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAttachmentInfo, IgnoreAttachmentWhenEquipmentOfType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAttachmentInfo, UnknownData_4312, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAttachmentInfo, AttachedCompName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAttachmentInfo, AttachedCompReference, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAttachmentInfo, UnknownData_YOGM, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemAttachmentInfo, 0x0048);
		}

		// ScriptStruct ShooterGame.PrimalItem.ActorClassAttachmentInfo
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalItem__ActorClassAttachmentInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorClassAttachmentInfo, OwnerActorClassParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorClassAttachmentInfo, ItemAttachmentInfos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorClassAttachmentInfo, PlayerMeshTextureMaskParamName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorClassAttachmentInfo, PlayerMeshTextureMask, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorClassAttachmentInfo, PlayerMeshNoItemDefaultTextureMask, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorClassAttachmentInfo, PlayerMeshTextureMaskMaterialIndex, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorClassAttachmentInfo, PlayerMeshTextureMaskMaterialIndexAlt, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorClassAttachmentInfo, FPVHandsMeshTextureMaskParamName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorClassAttachmentInfo, FPVHandsMeshTextureMask, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorClassAttachmentInfo, FPVHandsMeshTextureMaskMaterialIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorClassAttachmentInfo, FPVHandsMeshTextureMaskMaterialIndex2, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorClassAttachmentInfo, 0x0050);
		}

		// ScriptStruct ShooterGame.ItemNetID
		TEST_METHOD(ScriptStruct__ShooterGame__ItemNetID)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetID, ItemID1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetID, ItemID2, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemNetID, 0x0008);
		}

		// ScriptStruct ShooterGame.PrimalGameData.CraftingResourceRequirement
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__CraftingResourceRequirement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingResourceRequirement, BaseResourceRequirement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingResourceRequirement, UnknownData_YBNP, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingResourceRequirement, ResourceItemType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingResourceRequirement, bCraftingRequireExactResourceType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingResourceRequirement, UnknownData_YOW3, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCraftingResourceRequirement, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalItem.UseItemAddCharacterStatusValue
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalItem__UseItemAddCharacterStatusValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUseItemAddCharacterStatusValue, BaseAmountToAdd, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUseItemAddCharacterStatusValue, UnknownData_C4SA, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUseItemAddCharacterStatusValue, LimitExistingModifierDescriptionToMaxAmount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUseItemAddCharacterStatusValue, AddOverTimeSpeed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUseItemAddCharacterStatusValue, PercentAbsoluteMaxValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUseItemAddCharacterStatusValue, PercentAbsoluteMinValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUseItemAddCharacterStatusValue, StatusValueModifierDescriptionIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUseItemAddCharacterStatusValue, ItemQualityAddValueMultiplier, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUseItemAddCharacterStatusValue, StatusValueType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUseItemAddCharacterStatusValue, StopAtValueNearMax, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUseItemAddCharacterStatusValue, UnknownData_TBDO, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUseItemAddCharacterStatusValue, ScaleValueByCharacterDamageType, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUseItemAddCharacterStatusValue, 0x0030);
		}

		// ScriptStruct ShooterGame.PrimalItem.ItemStatInfo
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalItem__ItemStatInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemStatInfo, UnknownData_QAF5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemStatInfo, DefaultModifierValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemStatInfo, RandomizerRangeOverride, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemStatInfo, RandomizerRangeMultiplier, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemStatInfo, TheRandomizerPower, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemStatInfo, StateModifierScale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemStatInfo, InitialValueConstant, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemStatInfo, RatingValueMultiplier, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemStatInfo, AbsoluteMaxValue, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemStatInfo, 0x0024);
		}

		// ScriptStruct ShooterGame.PrimalItem.CropItemPhaseData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalItem__CropItemPhaseData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, NextStageFertilizerCacheThreshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, UnknownData_L0GT, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, StageStaticMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, StageStaticMeshes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, HasFruitStageStaticMesh, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, HasFruitStageStaticMeshes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, StageStaticMeshScale3D, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, StageStaticMeshTranslationOffset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, StageStaticMeshRotationOffset, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, UnknownData_J4HK, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, StageStaticMeshScales3D, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, StageStaticMeshTranslationOffsets, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, StageStaticMeshRotationOffsets, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, StageReachedItemsToGive, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, StageReachedItemsToGiveWeights, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, StageBlockCollisions, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, bUseStageStructure, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, UnknownData_MJZ4, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, StageStructure, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, StageStructureOffset, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCropItemPhaseData, UnknownData_YC1M, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCropItemPhaseData, 0x00D0);
		}

		// ScriptStruct ShooterGame.PrimalItem.SaddlePassengerSeatDefinition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalItem__SaddlePassengerSeatDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, AttachBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, AttachBoneNameEnemyDino, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, AttachBoneNameDino, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, BoardActionText, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, UnboardLocationOffset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, UnknownData_GTTR, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, BoardingRequiresEngram, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, FPVCameraLocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, AttachRelativeLocation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, AttachRelativeRotation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, DinoOverrideAttachRelativeRotation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, CharacterAdditiveAnim, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, UnknownData_K0AO, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, CameraYawRange, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, AimOffsetYawFactor, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, AimOffsetPitchFactor, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, AimOffsetYawBias, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, AimOffsetPitchBias, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, ExtraHypoThermalInsulation, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, ExtraHyperThermalInsulation, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, UnknownData_XLRP, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, TurretPitchMin, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, TurretPitchMax, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaddlePassengerSeatDefinition, UnknownData_C9B1, 0x00A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSaddlePassengerSeatDefinition, 0x00A8);
		}

		// ScriptStruct ShooterGame.PrimalGameData.DinoAncestorsEntry
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__DinoAncestorsEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAncestorsEntry, MaleName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAncestorsEntry, MaleDinoID1, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAncestorsEntry, MaleDinoID2, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAncestorsEntry, FemaleName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAncestorsEntry, FemaleDinoID1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAncestorsEntry, FemaleDinoID2, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDinoAncestorsEntry, 0x0030);
		}

		// ScriptStruct ShooterGame.PrimalItem.CustomItemByteArray
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalItem__CustomItemByteArray)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomItemByteArray, Bytes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomItemByteArray, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalItem.CustomItemByteArrays
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalItem__CustomItemByteArrays)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomItemByteArrays, ByteArrays, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomItemByteArrays, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalItem.CustomItemDoubles
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalItem__CustomItemDoubles)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomItemDoubles, Doubles, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomItemDoubles, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalItem.CustomItemData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalItem__CustomItemData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomItemData, CustomDataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomItemData, CustomDataStrings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomItemData, CustomDataFloats, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomItemData, CustomDataObjects, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomItemData, CustomDataClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomItemData, CustomDataNames, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomItemData, CustomDataBytes, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomItemData, CustomDataDoubles, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomItemData, 0x0078);
		}

		// ScriptStruct ShooterGame.PrimalItem.CustomContextSubmenu
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalItem__CustomContextSubmenu)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomContextSubmenu, SubmenuName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomContextSubmenu, SubmenuOptions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomContextSubmenu, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalItem.CustomContextMenuData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalItem__CustomContextMenuData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomContextMenuData, ContextItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomContextMenuData, DisplayString, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomContextMenuData, OptionalKeybindName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomContextMenuData, 0x0020);
		}

		// ScriptStruct ShooterGame.PrimalGameData.DinoAncestorsEntryBlueprint
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__DinoAncestorsEntryBlueprint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAncestorsEntryBlueprint, MaleName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAncestorsEntryBlueprint, MaleDinoID1, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAncestorsEntryBlueprint, MaleDinoID2, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAncestorsEntryBlueprint, FemaleName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAncestorsEntryBlueprint, FemaleDinoID1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAncestorsEntryBlueprint, FemaleDinoID2, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDinoAncestorsEntryBlueprint, 0x0030);
		}

		// ScriptStruct ShooterGame.PrimalItem.UnreplicatedEggData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalItem__UnreplicatedEggData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnreplicatedEggData, EggNumberOfLevelUpPointsApplied, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnreplicatedEggData, EggTamedIneffectivenessModifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnreplicatedEggData, UnknownData_U19A, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnreplicatedEggData, EggColorSetIndices, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnreplicatedEggData, EggDinoAncestors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnreplicatedEggData, EggDinoAncestorsMale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnreplicatedEggData, EggRandomMutationsFemale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnreplicatedEggData, EggRandomMutationsMale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnreplicatedEggData, EggGenderOverride, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnreplicatedEggData, UnknownData_D75U, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUnreplicatedEggData, 0x0058);
		}

		// ScriptStruct ShooterGame.PrimalItem.ItemNetInfo
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalItem__ItemNetInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, ItemArchetype, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, ItemId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, ItemQuantity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, CustomItemID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, SlotIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, UnknownData_1YB1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, CreationTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, CustomItemName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, CustomItemDescription, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, UploadEarliestValidTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, SteamUserItemID, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, UnknownData_4DTA, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, CraftQueue, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, UnknownData_VP2X, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, NextCraftCompletionTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, CraftingSkill, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, CraftedSkillBonus, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, CrafterCharacterName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, CrafterTribeName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, WeaponClipAmmo, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, ItemDurability, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, ItemRating, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, ExpirationTimeUTC, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, ItemQualityIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, UnknownData_KALI, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, ItemCustomClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, ItemStatValues, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, ItemColorID, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, UnknownData_QSYS, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, ItemSkinTemplate, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, CustomItemDatas, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, CustomItemColors, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, CustomResourceRequirements, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, NextSpoilingTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, LastSpoilingTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, OwnerPlayerDataID, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, LastOwnerPlayer, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, LastAutoDurabilityDecreaseTime, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, ItemStatClampsMultiplier, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, OriginalItemDropLocation, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, PreSkinItemColorID, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, EggNumberOfLevelUpPointsApplied, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, EggTamedIneffectivenessModifier, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, EggColorSetIndices, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, UnknownData_DPRC, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, EggGenderOverride, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, ItemVersion, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, UnknownData_3UE2, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, ClusterSpoilingTimeUTC, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, EggDinoAncestors, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, EggDinoAncestorsMale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, EggRandomMutationsFemale, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, EggRandomMutationsMale, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, ItemProfileVersion, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, bNetInfoFromClient, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemNetInfo, UnknownData_S4XD, 0x01AA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemNetInfo, 0x01B0);
		}

		// ScriptStruct ShooterGame.PrimalLocalProfile.EngramCustomFolder
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalLocalProfile__EngramCustomFolder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngramCustomFolder, FolderName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngramCustomFolder, EngramCustomFolderItemClasses, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngramCustomFolder, 0x0020);
		}

		// ScriptStruct ShooterGame.PrimalLocalProfile.PrimalMapMarkerEntryData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalLocalProfile__PrimalMapMarkerEntryData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalMapMarkerEntryData, coord1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalMapMarkerEntryData, coord2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalMapMarkerEntryData, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalMapMarkerEntryData, bOverrideMarkerTextColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalMapMarkerEntryData, UnknownData_C351, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalMapMarkerEntryData, OverrideMarkerTextColor, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalMapMarkerEntryData, coord1f, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalMapMarkerEntryData, coord2f, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalMapMarkerEntryData, 0x0028);
		}

		// ScriptStruct ShooterGame.PrimalLocalProfile.ArkTributeEntity
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalLocalProfile__ArkTributeEntity)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributeEntity, UploadTime, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArkTributeEntity, 0x0004);
		}

		// ScriptStruct ShooterGame.PrimalLocalProfile.ArkTributeInventoryItem
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalLocalProfile__ArkTributeInventoryItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributeInventoryItem, UnknownData_EZ3V, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributeInventoryItem, ArkTributeItem, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributeInventoryItem, Version, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributeInventoryItem, UnknownData_VI2I, 0x01BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArkTributeInventoryItem, 0x01C0);
		}

		// ScriptStruct ShooterGame.PrimalLocalProfile.ARKTributeDino
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalLocalProfile__ARKTributeDino)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDino, UnknownData_VPSB, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDino, DinoClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDino, DinoClass, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDino, DinoData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDino, DinoName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDino, DinoNameInMap, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDino, DinoStats, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDino, DinoExperiencePoints, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDino, Version, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDino, DinoID1, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDino, DinoID2, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARKTributeDino, 0x0120);
		}

		// ScriptStruct ShooterGame.PrimalLocalProfile.ArkTributePlayerData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalLocalProfile__ArkTributePlayerData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerData, UnknownData_2972, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerData, PlayerDataID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerData, PlayerDataBytes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerData, PlayerName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerData, PlayerStats, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerData, UploadingServerMapName, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerData, UploadingServerName, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerData, bWasAllowDPCUpload, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerData, bWithItems, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerData, UnknownData_SRNW, 0x0112);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerData, ItemCount, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerData, bForServerTransfer, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerData, UnknownData_2NKB, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerData, Version, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArkTributePlayerData, 0x0120);
		}

		// ScriptStruct ShooterGame.PrimalLocalProfile.ArkInventoryData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalLocalProfile__ArkInventoryData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkInventoryData, ArkItems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkInventoryData, ArkTamedDinosData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkInventoryData, ArkPlayerData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArkInventoryData, 0x0030);
		}

		// ScriptStruct ShooterGame.FogOfWar.FogOfWarInfoStruct
		TEST_METHOD(ScriptStruct__ShooterGame__FogOfWar__FogOfWarInfoStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFogOfWarInfoStruct, MapName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFogOfWarInfoStruct, CompressedVisibilityBuffer, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFogOfWarInfoStruct, UnCompressedVisibilityBufferSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFogOfWarInfoStruct, UnknownData_HISR, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFogOfWarInfoStruct, UnlockMask, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFogOfWarInfoStruct, 0x0038);
		}

		// ScriptStruct ShooterGame.PrimalLocalProfile.MapMarkerPerMapInfo
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalLocalProfile__MapMarkerPerMapInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerPerMapInfo, MapName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerPerMapInfo, MapMarkers, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapMarkerPerMapInfo, 0x0020);
		}

		// ScriptStruct ShooterGame.HazardTrigger.FloorSlopeData
		TEST_METHOD(ScriptStruct__ShooterGame__HazardTrigger__FloorSlopeData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloorSlopeData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloorSlopeData, SlopeDir, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloorSlopeData, 0x0018);
		}

		// ScriptStruct ShooterGame.HazardTrigger_Slide.SlideData
		TEST_METHOD(ScriptStruct__ShooterGame__HazardTrigger_Slide__SlideData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlideData, SplineComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlideData, Emitter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlideData, CurTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlideData, Duration, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlideData, Points, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlideData, Tangents, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlideData, Location, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlideData, Tangent, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlideData, 0x0050);
		}

		// ScriptStruct ShooterGame.PointOfInterestData
		TEST_METHOD(ScriptStruct__ShooterGame__PointOfInterestData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, PointType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, UnknownData_Z62V, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, PointTag, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, UnknownData_7RBY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, PointTitle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, PointDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, PointLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, PointRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, PointActor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, PointVisibleDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, PointVisibleDotProductRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, PointIcon, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, ViewedPointVFX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, ViewedPointSFX, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, PointCosmeticActorClass, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, UnknownData_N58L, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, PointCosmeticActorOffsetTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, UnknownData_UCZ5, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, LocationAddedSound, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, LocationReachedSound, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, WidgetLocationOffset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, WidgetHiddenDistance, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, IndicatorColor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, IconColor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, UnknownData_0SKB, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, ProgressValue, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, ProgressLabelText, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, ProgressBarColor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, ProgressLabelColor, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData, UnknownData_A3XR, 0x0131);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointOfInterestData, 0x0140);
		}

		// ScriptStruct ShooterGame.SoundWaveAnimTexturePairs
		TEST_METHOD(ScriptStruct__ShooterGame__SoundWaveAnimTexturePairs)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveAnimTexturePairs, LocalizedSoundWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveAnimTexturePairs, MatchingAnimTexture, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveAnimTexturePairs, 0x0020);
		}

		// ScriptStruct ShooterGame.LocalizedSoundWaveAnimTexturePairArrays
		TEST_METHOD(ScriptStruct__ShooterGame__LocalizedSoundWaveAnimTexturePairArrays)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSoundWaveAnimTexturePairArrays, TwoLetterISOLanguageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSoundWaveAnimTexturePairArrays, SoundWaveAnimTexturePairs, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedSoundWaveAnimTexturePairArrays, 0x0020);
		}

		// ScriptStruct ShooterGame.CompanionReactionData
		TEST_METHOD(ScriptStruct__ShooterGame__CompanionReactionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, ReactionPriority, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, ReactionType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, UnknownData_T3UX, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, ReactionTimePadding_Start, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, ReactionTimePadding_End, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, ForceReactionDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, UnknownData_RZ3X, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, ReactionAnim, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, ReactionStartDelay_Anim, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, ReactionForceDuration_Anim, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, ReactionVFX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, ReactionStartDelay_VFX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, ReactionForceDuration_VFX, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, ReactionSFXArray, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, ReactionStartDelay_SFX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, ReactionForceDuration_SFX, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, UnknownData_I0RR, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, ReactionStartTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, ReactionEndTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, RequiredSecondsSincePreviousReactionInOrderToBePlayed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, UnknownData_IO44, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, ChanceToOccur, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, UnknownData_5D1O, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, FallbackSharedAnimTexture, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, LocalizedSoundWaves, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, ExplorerNoteIndexToUnlock, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionReactionData, UnknownData_G078, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompanionReactionData, 0x00A0);
		}

		// ScriptStruct ShooterGame.PointOfInterestCompanionBehavior
		TEST_METHOD(ScriptStruct__ShooterGame__PointOfInterestCompanionBehavior)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestCompanionBehavior, CompanionFocusRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestCompanionBehavior, CompanionOrbitWithinRange, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestCompanionBehavior, CompanionOrbitRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestCompanionBehavior, OrbitOriginOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestCompanionBehavior, CompanionReachedOrbitWithinDistOverride, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestCompanionBehavior, InterpToOrbitSpeedOverride, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestCompanionBehavior, InterpAroundOrbitSpeedOverride, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestCompanionBehavior, UnknownData_84JW, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestCompanionBehavior, CompanionReaction_WithinRange, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestCompanionBehavior, CompanionReaction_StartOrbit, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestCompanionBehavior, CompanionReaction_ReachedOrbit, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestCompanionBehavior, CompanionReaction_PointViewed, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestCompanionBehavior, UnknownData_D2T3, 0x02A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointOfInterestCompanionBehavior, 0x02B0);
		}

		// ScriptStruct ShooterGame.ShooterHUD.HintReplacementKeysForKeyboardControls
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterHUD__HintReplacementKeysForKeyboardControls)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHintReplacementKeysForKeyboardControls, KeyboardControl, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHintReplacementKeysForKeyboardControls, ReplacementGamepadControls, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHintReplacementKeysForKeyboardControls, 0x0020);
		}

		// ScriptStruct ShooterGame.RadialSelectorHUD_Custom.CustomWheelSettings
		TEST_METHOD(ScriptStruct__ShooterGame__RadialSelectorHUD_Custom__CustomWheelSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelSettings, CenterText, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelSettings, CenterTextColorOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelSettings, CenterImageSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelSettings, CenterImage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelSettings, MinNumDivisions, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelSettings, InnerDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelSettings, OuterDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelSettings, UnknownData_Y9K1, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomWheelSettings, 0x0040);
		}

		// ScriptStruct ShooterGame.RadialSelectorHUD_Custom.CustomWheelEntry
		TEST_METHOD(ScriptStruct__ShooterGame__RadialSelectorHUD_Custom__CustomWheelEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelEntry, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelEntry, TargetFunctionName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelEntry, Label, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelEntry, Priority, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelEntry, ActivationTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelEntry, ActivationSound, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelEntry, CustomDataInt, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelEntry, CustomDataName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelEntry, TextColorOverride, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelEntry, BackgroundColorOverride, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomWheelEntry, UnknownData_K9HT, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomWheelEntry, 0x0068);
		}

		// ScriptStruct ShooterGame.MissionAlertEntry
		TEST_METHOD(ScriptStruct__ShooterGame__MissionAlertEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionAlertEntry, Icon, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionAlertEntry, Count, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionAlertEntry, UnknownData_HIZQ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionAlertEntry, Label, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionAlertEntry, ItemType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionAlertEntry, UnknownData_37AN, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionAlertEntry, 0x0030);
		}

		// ScriptStruct ShooterGame.PrimalGameData.NameScalarPair
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__NameScalarPair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameScalarPair, MaterialParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameScalarPair, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameScalarPair, 0x000C);
		}

		// ScriptStruct ShooterGame.PrimalGameData.NameColorPair
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__NameColorPair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameColorPair, MaterialParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameColorPair, Color, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameColorPair, 0x0018);
		}

		// ScriptStruct ShooterGame.ShooterHUD.HUDRichTextOverlayData
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterHUD__HUDRichTextOverlayData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDRichTextOverlayData, DisplayText, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDRichTextOverlayData, DefaultTextColor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDRichTextOverlayData, UnknownData_IDI3, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDRichTextOverlayData, Position, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDRichTextOverlayData, TextAlignment, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDRichTextOverlayData, HorizontalScreenAnchor, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDRichTextOverlayData, VerticalScreenAnchor, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDRichTextOverlayData, HorizontalWidgetAlignment, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDRichTextOverlayData, VerticalWidgetAlignment, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDRichTextOverlayData, UnknownData_6CAN, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDRichTextOverlayData, Scale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDRichTextOverlayData, UnknownData_D4YE, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDRichTextOverlayData, AutoSizeOverride, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDRichTextOverlayData, UnknownData_E851, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDRichTextOverlayData, Instigator, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDRichTextOverlayData, UnknownData_SYUR, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHUDRichTextOverlayData, 0x0060);
		}

		// ScriptStruct ShooterGame.PrimalItem.ItemCraftQueueEntry
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalItem__ItemCraftQueueEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemCraftQueueEntry, ItemId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemCraftQueueEntry, Quantity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemCraftQueueEntry, bIsRepair, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemCraftQueueEntry, bIgnoreInventoryRequirement, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemCraftQueueEntry, UnknownData_23U9, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemCraftQueueEntry, RepairPercentage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemCraftQueueEntry, RepairSpeedMultiplier, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemCraftQueueEntry, 0x0018);
		}

		// ScriptStruct ShooterGame.ItemMultiplier
		TEST_METHOD(ScriptStruct__ShooterGame__ItemMultiplier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemMultiplier, ItemClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemMultiplier, ItemMultiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemMultiplier, UnknownData_MZ7H, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemMultiplier, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalInventoryComponent.EventItem
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalInventoryComponent__EventItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventItem, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventItem, Item, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventItem, bIsEngram, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventItem, UnknownData_Z4XE, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventItem, 0x0020);
		}

		// ScriptStruct ShooterGame.PrimalInventoryComponent.ItemSpawnActorClassOverride
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalInventoryComponent__ItemSpawnActorClassOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnActorClassOverride, ItemClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnActorClassOverride, ActorClassOverride, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemSpawnActorClassOverride, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalInventoryComponent.ItemCraftingConsumptionReplenishment
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalInventoryComponent__ItemCraftingConsumptionReplenishment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemCraftingConsumptionReplenishment, ItemResourceClasses, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemCraftingConsumptionReplenishment, ToReplaceWithClass, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemCraftingConsumptionReplenishment, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalGameData.SupplyCrateItemEntry
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__SupplyCrateItemEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, ItemEntryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, EntryWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, UnknownData_5Y5G, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, Items, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, ItemClassStrings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, ItemsWeights, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, ItemQuantityOverrides, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, MinQuantity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, MaxQuantity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, bApplyQuantityToSingleItem, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, UnknownData_TOIP, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, QuantityPower, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, MinRandomQuality, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, MinQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, MaxQuality, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, QualityPower, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, UnknownData_IL6F, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, ChanceToBeBlueprintOverride, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, ItemStatClampsMultiplier, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, ChanceToActuallyGiveItem, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, RequiresMinQuality, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemEntry, UnknownData_9E16, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupplyCrateItemEntry, 0x0090);
		}

		// ScriptStruct ShooterGame.PrimalGameData.SupplyCrateItemSet
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__SupplyCrateItemSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemSet, SetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemSet, ItemEntries, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemSet, MinNumItems, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemSet, MaxNumItems, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemSet, NumItemsPower, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemSet, SetWeight, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemSet, bItemsRandomWithoutReplacement, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemSet, UnknownData_Z0YO, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateItemSet, ItemSetOverride, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupplyCrateItemSet, 0x0040);
		}

		// ScriptStruct ShooterGame.PrimalInventoryComponent.ServerCustomFolder
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalInventoryComponent__ServerCustomFolder)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCustomFolder, InventoryCompType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCustomFolder, UnknownData_4IHY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCustomFolder, FolderName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCustomFolder, CustomFolderItemIds, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerCustomFolder, 0x0028);
		}

		// ScriptStruct ShooterGame.CustomButtonWidgetStyle
		TEST_METHOD(ScriptStruct__ShooterGame__CustomButtonWidgetStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomButtonWidgetStyle, NormalChildTintColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomButtonWidgetStyle, HoveredChildTintColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomButtonWidgetStyle, PressedChildTintColor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomButtonWidgetStyle, DisabledChildTintColor, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomButtonWidgetStyle, 0x0048);
		}

		// ScriptStruct ShooterGame.PrimalInventoryComponent.OverrideMultiuseButtonStyle
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalInventoryComponent__OverrideMultiuseButtonStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverrideMultiuseButtonStyle, Style, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverrideMultiuseButtonStyle, ExtendedStyle, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverrideMultiuseButtonStyle, 0x0290);
		}

		// ScriptStruct ShooterGame.PrimalPlayerCharacterConfigStruct
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalPlayerCharacterConfigStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerCharacterConfigStruct, UnknownData_NECD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerCharacterConfigStruct, BodyColors, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerCharacterConfigStruct, OverrideHeadHairColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerCharacterConfigStruct, OverrideFacialHairColor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerCharacterConfigStruct, FacialHairIndex, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerCharacterConfigStruct, HeadHairIndex, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerCharacterConfigStruct, UnknownData_URZT, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerCharacterConfigStruct, PlayerCharacterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerCharacterConfigStruct, RawBoneModifiers, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerCharacterConfigStruct, PlayerSpawnRegionIndex, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerCharacterConfigStruct, UnknownData_OSNT, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalPlayerCharacterConfigStruct, 0x00D8);
		}

		// ScriptStruct ShooterGame.PrimalPlayerData.DinoOrderID
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalPlayerData__DinoOrderID)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoOrderID, DinoID1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoOrderID, DinoID2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoOrderID, DinoName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDinoOrderID, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalPlayerData.DinoOrderGroup
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalPlayerData__DinoOrderGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoOrderGroup, DinoOrderGroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoOrderGroup, DinoOrderClasses, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoOrderGroup, DinoOrderIDs, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDinoOrderGroup, 0x0030);
		}

		// ScriptStruct ShooterGame.PrimalPlayerData.PrimalPersistentCharacterStatsStruct
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalPlayerData__PrimalPersistentCharacterStatsStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, CharacterStatusComponent_ExtraCharacterLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, UnknownData_I8LA, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, CharacterStatusComponent_ExperiencePoints, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, PlayerState_TotalEngramPoints, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, PlayerState_PurchasedEngramPoints, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, CharacterStatusComponent_HighestExtraCharacterLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, CharacterStatusComponent_LastRespecAtExtraCharacterLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, CharacterStatusComponent_LastRespecUtcTimeSeconds, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, PerMapExplorerNoteUnlocks, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, EmoteUnlocks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, PlayerState_EngramBlueprints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, CharacterStatusComponent_NumberOfLevelUpPointsApplied, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, UnknownData_GGQW, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, PlayerState_DefaultItemSlotClasses, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, PlayerState_DefaultItemSlotEngrams, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, UnknownData_MMCD, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, DinoOrderGroups, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, CurrentlySelectedDinoOrderGroup, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, PercentageOfHeadHairGrowth, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, bHasUnlockedAllExplorerNotes, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, UnknownData_LVJE, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, PercentageOfFacialHairGrowth, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, FacialHairIndex, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, HeadHairIndex, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, UnknownData_P0GF, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPersistentCharacterStatsStruct, ForcedUnlockDefaultCosmetics, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalPersistentCharacterStatsStruct, 0x02C8);
		}

		// ScriptStruct ShooterGame.LeaderboardRow
		TEST_METHOD(ScriptStruct__ShooterGame__LeaderboardRow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardRow, MissionTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardRow, PlayerNetId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardRow, TribeId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardRow, UnknownData_JJUS, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardRow, TimestampUtc, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardRow, FloatValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardRow, IntValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardRow, NameValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardRow, StringValue, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardRow, 0x0048);
		}

		// ScriptStruct ShooterGame.PrimalPlayerData.LatestMissionScore
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalPlayerData__LatestMissionScore)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatestMissionScore, MissionTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatestMissionScore, LatestScore, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatestMissionScore, BestScore, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatestMissionScore, bHasValidScore, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatestMissionScore, UnknownData_ZC2D, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatestMissionScore, 0x00A0);
		}

		// ScriptStruct ShooterGame.PrimalPlayerData.PrimalPlayerDataStruct
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalPlayerData__PrimalPlayerDataStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, PlayerDataID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, UniqueID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, SavedNetworkAddress, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, PlayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, LocalPlayerIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, UnknownData_ER5Q, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, MyPlayerCharacterConfig, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, LastPinCodeUsed, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, UnknownData_GTQG, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, MyPersistentCharacterStats, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, NumPersonalDinos, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, TribeId, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, AppIDSet, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, PlayerDataVersion, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, UnknownData_V3MR, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, NextAllowedRespawnTime, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, LastTimeDiedToEnemyTeam, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, LoginTime, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, LastLoginTime, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, AllowedRespawnInterval, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, NumOfDeaths, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, SpawnDayNumber, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, SpawnDayTime, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerDataStruct, LatestMissionScores, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalPlayerDataStruct, 0x0448);
		}

		// ScriptStruct ShooterGame.PrimalPlayerData.EngramsSetSoftReferenceMapping
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalPlayerData__EngramsSetSoftReferenceMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngramsSetSoftReferenceMapping, EngramSetToUnlock, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngramsSetSoftReferenceMapping, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalPlayerData.BossEngramsSoftReferenceMapping
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalPlayerData__BossEngramsSoftReferenceMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossEngramsSoftReferenceMapping, EngramSets, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBossEngramsSoftReferenceMapping, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalGameData.TribeAlliance
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__TribeAlliance)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeAlliance, AllianceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeAlliance, AllianceID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeAlliance, UnknownData_JOSQ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeAlliance, MembersTribeName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeAlliance, MembersTribeID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeAlliance, AdminsTribeID, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTribeAlliance, 0x0048);
		}

		// ScriptStruct ShooterGame.PrimalGameData.TribeGovernment
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__TribeGovernment)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeGovernment, TribeGovern_PINCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeGovernment, TribeGovern_DinoOwnership, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeGovernment, TribeGovern_StructureOwnership, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeGovernment, TribeGovern_DinoTaming, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeGovernment, TribeGovern_DinoUnclaimAdminOnly, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTribeGovernment, 0x0014);
		}

		// ScriptStruct ShooterGame.PrimalGameData.TribeWar
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__TribeWar)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeWar, EnemyTribeID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeWar, StartDayNumber, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeWar, EndDayNumber, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeWar, StartDayTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeWar, EndDayTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeWar, bIsApproved, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeWar, UnknownData_QWX0, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeWar, InitiatingTribeID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeWar, UnknownData_SGEU, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeWar, EnemyTribeName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTribeWar, 0x0030);
		}

		// ScriptStruct ShooterGame.PrimalGameData.TribeRankGroup
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__TribeRankGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeRankGroup, RankGroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeRankGroup, RankGroupRank, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeRankGroup, InventoryRank, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeRankGroup, StructureActivationRank, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeRankGroup, NewStructureActivationRank, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeRankGroup, NewStructureInventoryRank, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeRankGroup, PetOrderRank, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeRankGroup, PetRidingRank, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeRankGroup, InviteToGroupRank, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeRankGroup, MaxPromotionGroupRank, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeRankGroup, MaxDemotionGroupRank, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeRankGroup, MaxBanishmentGroupRank, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeRankGroup, NumInvitesRemaining, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeRankGroup, UnknownData_M74T, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeRankGroup, TeleportMembersRank, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeRankGroup, TeleportDinosRank, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeRankGroup, UnknownData_Q66Y, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeRankGroup, UnknownData_M26L, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTribeRankGroup, 0x0028);
		}

		// ScriptStruct ShooterGame.PrimalGameData.TribeData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__TribeData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, TribeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, LastNameChangeTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, OwnerPlayerDataID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, TribeId, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, MembersPlayerName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, MembersPlayerDataID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, MembersRankGroups, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, SlotFreedTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, TribeAdmins, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, TribeAlliances, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, bSetGovernment, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, UnknownData_RC1V, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, TribeGovernment, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, MembersConfigs, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, TribeWars, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, TribeLog, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, LogIndex, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, UnknownData_HNPK, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, TribeRankGroups, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, NumTribeDinos, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, UnknownData_5IBM, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, LastMergedTime, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTribeData, UnknownData_RXG2, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTribeData, 0x0140);
		}

		// ScriptStruct ShooterGame.PrimalPlayerData.PrimalPlayerCharacterConfigStructReplicated
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalPlayerData__PrimalPlayerCharacterConfigStructReplicated)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerCharacterConfigStructReplicated, UnknownData_OCA9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerCharacterConfigStructReplicated, BodyColors, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerCharacterConfigStructReplicated, UnknownData_RJ7H, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerCharacterConfigStructReplicated, PlayerCharacterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerCharacterConfigStructReplicated, RawBoneModifiers, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerCharacterConfigStructReplicated, PlayerSpawnRegionIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalPlayerCharacterConfigStructReplicated, UnknownData_B93K, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalPlayerCharacterConfigStructReplicated, 0x00B8);
		}

		// ScriptStruct ShooterGame.ShooterPlayerState.SpawnPointInfo
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterPlayerState__SpawnPointInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnPointInfo, SpawnPointID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnPointInfo, UnknownData_5G56, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnPointInfo, BedName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnPointInfo, SpawnPointVolume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnPointInfo, SpawnPointActorClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnPointInfo, AtLocation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnPointInfo, UnknownData_Q32A, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnPointInfo, NextAllowedUseTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnPointInfo, bAllowedUse, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnPointInfo, UnknownData_18CH, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnPointInfo, 0x0048);
		}

		// ScriptStruct ShooterGame.ShooterPlayerState.ServerOptions
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterPlayerState__ServerOptions)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, MaxStructuresInRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, DifficultyOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, GlobalVoiceChat, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, ProximityChat, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, NoTributeDownloads, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, AllowThirdPersonPlayer, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, AlwaysNotifyPlayerLeft, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, DontAlwaysNotifyPlayerJoined, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, ServerHardcore, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, ServerPVE, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, ServerCrosshair, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, ServerForceNoHUD, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, ShowMapPlayerLocation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, ServerPassword, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, ServerAdminPassword, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, SpectatorPassword, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, DayCycleSpeedScale, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, DayTimeSpeedScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, NightTimeSpeedScale, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, DinoDamageMultiplier, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, PlayerDamageMultiplier, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, StructureDamageMultiplier, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, PlayerResistanceMultiplier, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, DinoResistanceMultiplier, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, StructureResistanceMultiplier, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, XPMultiplier, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, TamingSpeedMultiplier, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, HarvestAmountMultiplier, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, PlayerCharacterWaterDrainMultiplier, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, PlayerCharacterFoodDrainMultiplier, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, DinoCharacterFoodDrainMultiplier, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, PlayerCharacterStaminaDrainMultiplier, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, DinoCharacterStaminaDrainMultiplier, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, PlayerCharacterHealthRecoveryMultiplier, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, DinoCharacterHealthRecoveryMultiplier, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, DinoCountMultiplier, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, HarvestHealthMultiplier, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, PvEStructureDecayPeriodMultiplier, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, ResourcesRespawnPeriodMultiplier, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, EnablePvPGamma, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, DisableStructureDecayPvE, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerOptions, AllowFlyerCarryPvE, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerOptions, 0x02A0);
		}

		// ScriptStruct ShooterGame.ShooterPlayerState.AdminPlayerDataInfo
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterPlayerState__AdminPlayerDataInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminPlayerDataInfo, PlayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminPlayerDataInfo, PlayerSteamName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminPlayerDataInfo, SteamID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminPlayerDataInfo, LinkedPlayerID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminPlayerDataInfo, IsHost, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminPlayerDataInfo, UnknownData_EI8R, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminPlayerDataInfo, 0x0040);
		}

		// ScriptStruct ShooterGame.ShooterPlayerState.AliveNameAndLocation
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterPlayerState__AliveNameAndLocation)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAliveNameAndLocation, PlayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAliveNameAndLocation, TribeName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAliveNameAndLocation, TargetingTeam, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAliveNameAndLocation, UnknownData_STSY, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAliveNameAndLocation, PlayerId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAliveNameAndLocation, Location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAliveNameAndLocation, UnknownData_0UAU, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAliveNameAndLocation, 0x0040);
		}

		// ScriptStruct ShooterGame.ShooterPlayerState.AlivePlayerDataInfo
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterPlayerState__AlivePlayerDataInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlivePlayerDataInfo, PlayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlivePlayerDataInfo, PlayerSteamName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlivePlayerDataInfo, PlayerId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlivePlayerDataInfo, TribeName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlivePlayerDataInfo, TargetingTeamID, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlivePlayerDataInfo, 0x0040);
		}

		// ScriptStruct ShooterGame.ShooterPlayerController.DinoMapMarkerInfo
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterPlayerController__DinoMapMarkerInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoMapMarkerInfo, Dino, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoMapMarkerInfo, MarkerComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoMapMarkerInfo, DinoLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoMapMarkerInfo, PreviousLatitudeNumber, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoMapMarkerInfo, PreviousLongitudeNumber, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoMapMarkerInfo, MarkerColor, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDinoMapMarkerInfo, 0x0028);
		}

		// ScriptStruct ShooterGame.ShooterPlayerController.PingData
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterPlayerController__PingData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPingData, PingID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPingData, UnknownData_TUQN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPingData, PingedLocation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPingData, PingedComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPingData, PingIcon, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPingData, CreatedByPlayerID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPingData, UnknownData_6V8U, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPingData, CreatedByPlayerChar, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPingData, RespondedPlayerChars, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPingData, PingCreationTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPingData, UnknownData_SA24, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPingData, 0x0050);
		}

		// ScriptStruct ShooterGame.PointOfInterestData_ForCompanion
		TEST_METHOD(ScriptStruct__ShooterGame__PointOfInterestData_ForCompanion)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData_ForCompanion, PointData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointOfInterestData_ForCompanion, PointCompanionBehavior, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointOfInterestData_ForCompanion, 0x03F0);
		}

		// ScriptStruct ShooterGame.MissionWaypointInfo
		TEST_METHOD(ScriptStruct__ShooterGame__MissionWaypointInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWaypointInfo, bWaypointActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWaypointInfo, UnknownData_H9AY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWaypointInfo, WaypointDestination, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWaypointInfo, WaypointTitle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWaypointInfo, WaypointID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionWaypointInfo, 0x0028);
		}

		// ScriptStruct ShooterGame.TamingDinoInfo
		TEST_METHOD(ScriptStruct__ShooterGame__TamingDinoInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, TameAffinityPercent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, HealthPercent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, HealthCurrent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, HealthMax, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, HungerPercent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, HungerCurrent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, HungerMax, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, TorpidityPercent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, TameEffectivenessPercent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, TameEffectivenessLvlModifier, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, Location, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, bIsConcious, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, bUseGender, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, bIsFemale, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, bIsTamed, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, DataID1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, DataID2, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingDinoInfo, DinoEntry, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTamingDinoInfo, 0x0058);
		}

		// ScriptStruct ShooterGame.TamingWaypointInfo
		TEST_METHOD(ScriptStruct__ShooterGame__TamingWaypointInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingWaypointInfo, bWaypointActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingWaypointInfo, UnknownData_BJGS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingWaypointInfo, WaypointDestination, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingWaypointInfo, WaypointTitle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingWaypointInfo, WaypointID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingWaypointInfo, UnknownData_JEH1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingWaypointInfo, Icon, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingWaypointInfo, DinoInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingWaypointInfo, ProgressBarPercent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingWaypointInfo, bIsTamed, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTamingWaypointInfo, UnknownData_JD3H, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTamingWaypointInfo, 0x0090);
		}

		// ScriptStruct ShooterGame.ShooterPlayerController.StructHighlightInfo
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterPlayerController__StructHighlightInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructHighlightInfo, Structure, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructHighlightInfo, HighlightColor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructHighlightInfo, 0x0018);
		}

		// ScriptStruct ShooterGame.PaintItem
		TEST_METHOD(ScriptStruct__ShooterGame__PaintItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintItem, InventoryComp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintItem, ItemId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintItem, ColorCode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintItem, UnknownData_AYYI, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintItem, X, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintItem, Y, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintItem, UnknownData_64CR, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintItem, 0x0020);
		}

		// ScriptStruct ShooterGame.DataSet
		TEST_METHOD(ScriptStruct__ShooterGame__DataSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSet, DataSetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSet, ListNames, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSet, ListStrings, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSet, ListInts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSet, ListFloats, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSet, ListObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSet, ListActors, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSet, UnknownData_3SZI, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataSet, 0x0078);
		}

		// ScriptStruct ShooterGame.ShooterPlayerController.ReplicatePingData
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterPlayerController__ReplicatePingData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatePingData, Rep_PingID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatePingData, UnknownData_0DXP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatePingData, Rep_PingedLocation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatePingData, Rep_PingedComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatePingData, Rep_PingedByPlayerID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatePingData, UnknownData_EYYV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatePingData, Rep_PingedByPlayerChar, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatePingData, 0x0028);
		}

		// ScriptStruct ShooterGame.HitMarkerSettings
		TEST_METHOD(ScriptStruct__ShooterGame__HitMarkerSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitMarkerSettings, UnknownData_MU3B, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitMarkerSettings, Color, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitMarkerSettings, DrawDuration, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitMarkerSettings, Scale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitMarkerSettings, HitSound, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitMarkerSettings, 0x0028);
		}

		// ScriptStruct ShooterGame.PrimalLocalProfile.ARKTributeDinoListing
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalLocalProfile__ARKTributeDinoListing)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDinoListing, DinoName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDinoListing, DinoStats, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDinoListing, DinoExperiencePoints, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDinoListing, UnknownData_Y4FF, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDinoListing, DinoClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDinoListing, DinoID1, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDinoListing, DinoID2, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDinoListing, ExpirationTimeUTC, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeDinoListing, UnknownData_A2K5, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARKTributeDinoListing, 0x00F0);
		}

		// ScriptStruct ShooterGame.PrimalLocalProfile.ArkTributePlayerDataListing
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalLocalProfile__ArkTributePlayerDataListing)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerDataListing, PlayerDataID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerDataListing, PlayerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerDataListing, PlayerStats, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerDataListing, bWasAllowDPCUpload, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerDataListing, UnknownData_HKKX, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerDataListing, UploadingServerMapName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerDataListing, UploadingServerName, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerDataListing, bWithItems, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerDataListing, UnknownData_SWRE, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerDataListing, ItemCount, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerDataListing, Version, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArkTributePlayerDataListing, ExpirationTimeUTC, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArkTributePlayerDataListing, 0x0110);
		}

		// ScriptStruct ShooterGame.ShooterPlayerController.StructuresOnFloor
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterPlayerController__StructuresOnFloor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructuresOnFloor, FloorStructure, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructuresOnFloor, StructuresOnFloor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructuresOnFloor, 0x0018);
		}

		// ScriptStruct ShooterGame.ChatMessage
		TEST_METHOD(ScriptStruct__ShooterGame__ChatMessage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, SenderName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, SenderSteamName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, SenderTribeName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, SenderId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, UnknownData_C8LA, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, Message, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, Receiver, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, SenderTeamIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, UnknownData_TQ9X, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, ReceivedTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, SendMode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, UnknownData_G8YT, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, RadioFrequency, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, ChatType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, UnknownData_6SKP, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, SenderIcon, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, UserId, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChatMessage, 0x0090);
		}

		// ScriptStruct ShooterGame.DecalData
		TEST_METHOD(ScriptStruct__ShooterGame__DecalData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalData, DecalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalData, DecalSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalData, DecalDepth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalData, DecalImpactNormalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalData, LifeSpan, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalData, RandomAngleRange, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalData, UnknownData_DXKA, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDecalData, 0x0020);
		}

		// ScriptStruct ShooterGame.BiomeZoneVolumeEffectUtility.BiomeZoneVolumeEffect
		TEST_METHOD(ScriptStruct__ShooterGame__BiomeZoneVolumeEffectUtility__BiomeZoneVolumeEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBiomeZoneVolumeEffect, BiomeZone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBiomeZoneVolumeEffect, UnknownData_ENZS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBiomeZoneVolumeEffect, ParticleSystem, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBiomeZoneVolumeEffect, DecalData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBiomeZoneVolumeEffect, UnknownData_KD1I, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBiomeZoneVolumeEffect, Weight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBiomeZoneVolumeEffect, MinSpawnDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBiomeZoneVolumeEffect, MaxSpawnDistance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBiomeZoneVolumeEffect, ScaleAtMinDistance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBiomeZoneVolumeEffect, ScaleAtMaxDistance, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBiomeZoneVolumeEffect, 0x0048);
		}

		// ScriptStruct ShooterGame.BiomeZoneVolumeEffectUtility.BiomeZoneImpactEffect
		TEST_METHOD(ScriptStruct__ShooterGame__BiomeZoneVolumeEffectUtility__BiomeZoneImpactEffect)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBiomeZoneImpactEffect, SpawnActors, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBiomeZoneImpactEffect, 0x0080);
		}

		// ScriptStruct ShooterGame.ObjectInfo
		TEST_METHOD(ScriptStruct__ShooterGame__ObjectInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectInfo, Asset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectInfo, ActorToSpawn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectInfo, HeightOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectInfo, Radius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectInfo, MinimumProbability, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectInfo, MinimumScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectInfo, MaximumScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectInfo, UnknownData_IDP9, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FObjectInfo, 0x0030);
		}

		// ScriptStruct ShooterGame.ObjectListItem
		TEST_METHOD(ScriptStruct__ShooterGame__ObjectListItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectListItem, ObjectInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectListItem, Probability, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectListItem, UnknownData_MCAI, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FObjectListItem, 0x0038);
		}

		// ScriptStruct ShooterGame.TerrainGenerator.BiomeMiniMapColor
		TEST_METHOD(ScriptStruct__ShooterGame__TerrainGenerator__BiomeMiniMapColor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBiomeMiniMapColor, Height, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBiomeMiniMapColor, Color, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBiomeMiniMapColor, 0x0014);
		}

		// ScriptStruct ShooterGame.TerrainGenerator.BiomeMiniMap
		TEST_METHOD(ScriptStruct__ShooterGame__TerrainGenerator__BiomeMiniMap)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBiomeMiniMap, Map, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBiomeMiniMap, HeightsColors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBiomeMiniMap, 0x0018);
		}

		// ScriptStruct ShooterGame.DataListEntryButton_PrimalFolder.PrimalFolderIcons
		TEST_METHOD(ScriptStruct__ShooterGame__DataListEntryButton_PrimalFolder__PrimalFolderIcons)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalFolderIcons, NormalFolder, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalFolderIcons, CustomFolder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalFolderIcons, Back, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalFolderIcons, TextColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalFolderIcons, UnknownData_LET4, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalFolderIcons, 0x0020);
		}

		// ScriptStruct ShooterGame.DataListEntryButton.DataListEntryButtonBorderColors
		TEST_METHOD(ScriptStruct__ShooterGame__DataListEntryButton__DataListEntryButtonBorderColors)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataListEntryButtonBorderColors, Normal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataListEntryButtonBorderColors, Hovered, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataListEntryButtonBorderColors, Pressed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataListEntryButtonBorderColors, Disabled, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataListEntryButtonBorderColors, 0x0010);
		}

		// ScriptStruct ShooterGame.DamageVolumeBase.DamageNegatingItem
		TEST_METHOD(ScriptStruct__ShooterGame__DamageVolumeBase__DamageNegatingItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageNegatingItem, ItemSubclass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageNegatingItem, NegationFactor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageNegatingItem, UnknownData_NAT5, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageNegatingItem, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ItemSetup
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ItemSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSetup, ItemType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSetup, ItemBlueprintPath, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSetup, MinQuality, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSetup, MaxQuality, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSetup, Quantity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSetup, UnknownData_70V4, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemSetup, 0x0028);
		}

		// ScriptStruct ShooterGame.PrimalGameData.DinoSetup
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__DinoSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, DinoType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, DinoSoftReference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, UnknownData_J4J7, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, DinoBlueprintPath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, DinoName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, DinoLevel, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, BasePointsPerStat, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, PlayerAddedPointsPerStat, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, SpawnOffset, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, DinoState, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, UnknownData_W8H5, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, PrioritizeStats, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, TamedDinoInventory, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, SaddleType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, SaddleSoftReference, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, UnknownData_Y393, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, SaddleBlueprintPath, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, SaddleQuality, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, SaddleMinRandomQuality, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, RandomWeight, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, UnknownData_Y32J, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, WildRandomScaleOverride, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, DinoImprintingQuality, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, bNetInfoFromClient, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetup, UnknownData_56X4, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDinoSetup, 0x00F0);
		}

		// ScriptStruct ShooterGame.FlockingBehavior.Boid
		TEST_METHOD(ScriptStruct__ShooterGame__FlockingBehavior__Boid)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoid, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoid, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoid, Velocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoid, Acceleration, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoid, MaxSpeed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoid, MaxForce, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoid, TurnRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoid, UnknownData_A629, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoid, SpiralTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoid, TargetLocation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoid, Type, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoid, UnknownData_7I5U, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoid, 0x0054);
		}

		// ScriptStruct ShooterGame.FlockingBehavior.AvoidanceArea
		TEST_METHOD(ScriptStruct__ShooterGame__FlockingBehavior__AvoidanceArea)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvoidanceArea, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvoidanceArea, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvoidanceArea, UnknownData_T2D4, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvoidanceArea, Transform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvoidanceArea, BoxExtents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvoidanceArea, SphereRadius, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvoidanceArea, CreationTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvoidanceArea, UnknownData_K46A, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAvoidanceArea, 0x0070);
		}

		// ScriptStruct ShooterGame.FlockingBehavior.FlockPersistentData
		TEST_METHOD(ScriptStruct__ShooterGame__FlockingBehavior__FlockPersistentData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlockPersistentData, AvoidanceAreaDecayRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlockPersistentData, AvoidanceTraceInterval, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlockPersistentData, AvoidanceTraceInferredBoxSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlockPersistentData, AvoidanceTraceInferredSphereRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlockPersistentData, AvoidanceTraceForwardDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlockPersistentData, AvoidanceTraceDownDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlockPersistentData, LastAvoidanceTraceTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlockPersistentData, MaxNumAvoidanceAreas, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlockPersistentData, UnknownData_J18U, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlockPersistentData, DynamicAvoidanceAreas, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFlockPersistentData, 0x0038);
		}

		// ScriptStruct ShooterGame.FlockingBehavior.BoidBehavior
		TEST_METHOD(ScriptStruct__ShooterGame__FlockingBehavior__BoidBehavior)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoidBehavior, AvoidanceAreas, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoidBehavior, DesiredSeparation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoidBehavior, NeighborDist, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoidBehavior, SeparationMultiplier, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoidBehavior, AlignmentMultiplier, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoidBehavior, CohesionMultiplier, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoidBehavior, AvoidanceMultiplier, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoidBehavior, TargetingMultiplier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoidBehavior, MaxDistanceToLeaders, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoidBehavior, MaxSpeedMultiplier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoidBehavior, MaxForceMultiplier, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoidBehavior, bUseBoundsCulling, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoidBehavior, UnknownData_5DT9, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoidBehavior, BoundsCullingMultiplier, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoidBehavior, 0x0040);
		}

		// ScriptStruct ShooterGame.HordeCrateManager.HordeCrateNPCGroup
		TEST_METHOD(ScriptStruct__ShooterGame__HordeCrateManager__HordeCrateNPCGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateNPCGroup, NPCClasses, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateNPCGroup, NPCAssets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateNPCGroup, NPCWeights, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateNPCGroup, MinLevels, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateNPCGroup, MaxLevels, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHordeCrateNPCGroup, 0x0050);
		}

		// ScriptStruct ShooterGame.HordeCrateManager.HordeCrateWave
		TEST_METHOD(ScriptStruct__ShooterGame__HordeCrateManager__HordeCrateWave)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateWave, MinNumOfNPCs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateWave, MaxNumOfNPCs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateWave, TimeToPrepareForWave, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateWave, UnknownData_7BA7, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateWave, NPCsToSpawn, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHordeCrateWave, 0x0060);
		}

		// ScriptStruct ShooterGame.HordeCrateManager.HordeCrateDifficultyLevel
		TEST_METHOD(ScriptStruct__ShooterGame__HordeCrateManager__HordeCrateDifficultyLevel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, bEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, UnknownData_LFAO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, MaxNumOfEventsForDifficulty, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, DifficultyLevel, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, MinNPCsToStart, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, MaxNPCsToStart, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, UnknownData_OBSI, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, StartingNPCs, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, NPCWavesToComplete, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, MinTimeBeforeSelfDestruct, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, MaxTimeBeforeSelfDestruct, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, ActorTemplate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, MinQualityMultiplier, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, MaxQualityMultiplier, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, MinAmtRewardItems, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, MaxAmtRewardItems, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, DifficultyColor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, MainNodeElementPct, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateDifficultyLevel, UnknownData_L6W9, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHordeCrateDifficultyLevel, 0x00B0);
		}

		// ScriptStruct ShooterGame.HordeCrateManager.HordeCrateEvent
		TEST_METHOD(ScriptStruct__ShooterGame__HordeCrateManager__HordeCrateEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateEvent, EventStartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateEvent, HordeSpawnNetwork, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateEvent, HordeModeCrate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateEvent, bHasBeenInitiated, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateEvent, EventType, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHordeCrateEvent, UnknownData_89TI, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHordeCrateEvent, 0x0020);
		}

		// ScriptStruct ShooterGame.LeaderboardDisplayRow
		TEST_METHOD(ScriptStruct__ShooterGame__LeaderboardDisplayRow)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardDisplayRow, RowIcon, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardDisplayRow, Columns, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardDisplayRow, UnknownData_RB14, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardDisplayRow, 0x0020);
		}

		// ScriptStruct ShooterGame.MissionMetaTagInfo.MetaTagIDInfo
		TEST_METHOD(ScriptStruct__ShooterGame__MissionMetaTagInfo__MetaTagIDInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMetaTagIDInfo, MetaTagEnumIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMetaTagIDInfo, MetaTagDisplayName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMetaTagIDInfo, 0x000C);
		}

		// ScriptStruct ShooterGame.PrimalGameData.DamageTypeAdjuster
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__DamageTypeAdjuster)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageTypeAdjuster, DamageTypeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageTypeAdjuster, DamageMultiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageTypeAdjuster, UnknownData_B7II, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageTypeAdjuster, 0x0010);
		}

		// ScriptStruct ShooterGame.BoneDamageAdjuster
		TEST_METHOD(ScriptStruct__ShooterGame__BoneDamageAdjuster)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneDamageAdjuster, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneDamageAdjuster, DamageMultiplier, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneDamageAdjuster, 0x000C);
		}

		// ScriptStruct ShooterGame.PrimalStructure.StructureVariant
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalStructure__StructureVariant)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructureVariant, VariantName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructureVariant, bUseBPAllowSwitchToVariant, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructureVariant, UnknownData_5CQC, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructureVariant, Mesh, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructureVariant, bUseMeshTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructureVariant, UnknownData_8ANV, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructureVariant, MeshTransform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructureVariant, DestroyedMeshOverride, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructureVariant, UnknownData_FKKP, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructureVariant, 0x0070);
		}

		// ScriptStruct ShooterGame.PrimalStructure.PrimalStructureSnapTagSettings
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalStructure__PrimalStructureSnapTagSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapTagSettings, SnapToStructureTagsToExclude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapTagSettings, SnapFromStructureTagsToExclude, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapTagSettings, SnapToStructureTagsToInclude, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapTagSettings, SnapFromStructureTagsToInclude, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalStructureSnapTagSettings, 0x0040);
		}

		// ScriptStruct ShooterGame.PrimalStructure.PrimalStructureSnapPoint
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalStructure__PrimalStructureSnapPoint)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapPoint, SnapPointDescription, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapPoint, PointLocOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapPoint, PointRotOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapPoint, PointComparisonExtraRotOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapPoint, UnknownData_KKNU, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapPoint, ToPointSnapTypeFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapPoint, ToPointSnapTypeExcludeFlags, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapPoint, SnapPointMatchGroup, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapPoint, StaticMeshSnapSocketName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapPoint, UnknownData_3SLR, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapPoint, SnapToStructureTypesToExclude, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapPoint, SnapFromStructureTypesToExclude, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapPoint, SnapToStructureTypesToInclude, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapPoint, SnapFromStructureTypesToInclude, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStructureSnapPoint, SnapTags, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalStructureSnapPoint, 0x00C8);
		}

		// ScriptStruct ShooterGame.PrimalStructure.PlacementData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalStructure__PlacementData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlacementData, AdjustedLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlacementData, AdjustedRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlacementData, bSnapped, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlacementData, bDisableEncroachmentCheck, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlacementData, UnknownData_8ZQR, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlacementData, MySnapToIndex, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlacementData, TheirSnapToIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlacementData, UnknownData_KGMN, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlacementData, FloorHitActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlacementData, ParentStructure, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlacementData, ForcePlacedOnFloorParentStructure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlacementData, ReplacesStructure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlacementData, AttachToPawn, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlacementData, AttachToBone, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlacementData, DinoCharacter, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlacementData, 0x0060);
		}

		// ScriptStruct ShooterGame.PrimalStructureItemContainer.ItemToDisplayInStructureTooltip
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalStructureItemContainer__ItemToDisplayInStructureTooltip)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemToDisplayInStructureTooltip, PrimalItem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemToDisplayInStructureTooltip, Quantity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemToDisplayInStructureTooltip, UnknownData_VZ82, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemToDisplayInStructureTooltip, ModuleGroupHeader, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemToDisplayInStructureTooltip, 0x0020);
		}

		// ScriptStruct ShooterGame.LootTableEntry
		TEST_METHOD(ScriptStruct__ShooterGame__LootTableEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootTableEntry, LootItemType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootTableEntry, UnknownData_X7MZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootTableEntry, LootItemClasses, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootTableEntry, Weight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootTableEntry, QuantityCurve, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootTableEntry, UnknownData_VZ7U, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootTableEntry, MinQuantity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootTableEntry, MaxQuantity, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootTableEntry, QualityCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootTableEntry, UnknownData_182T, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootTableEntry, QualityRange, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootTableEntry, UnknownData_XSM4, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLootTableEntry, 0x0038);
		}

		// ScriptStruct ShooterGame.TimeRange
		TEST_METHOD(ScriptStruct__ShooterGame__TimeRange)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeRange, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeRange, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeRange, 0x0008);
		}

		// ScriptStruct ShooterGame.MissionType.MissionPhase
		TEST_METHOD(ScriptStruct__ShooterGame__MissionType__MissionPhase)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhase, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhase, DisplayText, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhase, UnknownData_VUAL, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhase, WaitTimeAfterPhaseCompletes, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhase, NextPhaseName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhase, AutoSwitchPhaseAttemptInterval, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhase, PhaseStartSound, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhase, PhaseEndSound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhase, PhaseMusicLoop, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionPhase, 0x0048);
		}

		// ScriptStruct ShooterGame.MissionType.MissionPhaseData
		TEST_METHOD(ScriptStruct__ShooterGame__MissionType__MissionPhaseData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhaseData, UnknownData_5TCD, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionPhaseData, 0x0004);
		}

		// ScriptStruct ShooterGame.MissionType.MissionWorldBuffData
		TEST_METHOD(ScriptStruct__ShooterGame__MissionType__MissionWorldBuffData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldBuffData, WorldBuffIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldBuffData, StacksToGive, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionWorldBuffData, 0x000C);
		}

		// ScriptStruct ShooterGame.MissionType.TaggedString
		TEST_METHOD(ScriptStruct__ShooterGame__MissionType__TaggedString)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTaggedString, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTaggedString, String, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTaggedString, 0x0018);
		}

		// ScriptStruct ShooterGame.MissionType.CharacterAndControllerPair
		TEST_METHOD(ScriptStruct__ShooterGame__MissionType__CharacterAndControllerPair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterAndControllerPair, Character, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterAndControllerPair, Controller, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterAndControllerPair, 0x0010);
		}

		// ScriptStruct ShooterGame.MissionType.TeleportedCharacter
		TEST_METHOD(ScriptStruct__ShooterGame__MissionType__TeleportedCharacter)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportedCharacter, Character, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportedCharacter, Controller, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportedCharacter, OriginalLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportedCharacter, OriginalRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTeleportedCharacter, 0x0028);
		}

		// ScriptStruct ShooterGame.MissionType.PlayerItems
		TEST_METHOD(ScriptStruct__ShooterGame__MissionType__PlayerItems)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerItems, Character, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerItems, ItemIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerItems, 0x0018);
		}

		// ScriptStruct ShooterGame.MissionType.MissionWorldIndicator
		TEST_METHOD(ScriptStruct__ShooterGame__MissionType__MissionWorldIndicator)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, DescriptionTagString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, Icon, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, ItemType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, WorldPosition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, UnknownData_TX8K, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, TargetActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, Priority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, UnknownData_NJ8P, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, CustomData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, UnknownData_UXE9, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, IndicatorColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, IconColor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, UnknownData_A458, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, ProgressValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, UnknownData_ICQO, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, ProgressLabelText, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, ProgressBarColor, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, ProgressLabelColor, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionWorldIndicator, UnknownData_RVP0, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionWorldIndicator, 0x00A8);
		}

		// ScriptStruct ShooterGame.MissionType.RacePlayerData
		TEST_METHOD(ScriptStruct__ShooterGame__MissionType__RacePlayerData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRacePlayerData, Controller, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRacePlayerData, Character, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRacePlayerData, TargetCheckpoint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRacePlayerData, UnknownData_GDXR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRacePlayerData, CheckpointsHit, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRacePlayerData, CheckpointTimes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRacePlayerData, 0x0038);
		}

		// ScriptStruct ShooterGame.MissionType.MissionRelatedActorData
		TEST_METHOD(ScriptStruct__ShooterGame__MissionType__MissionRelatedActorData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionRelatedActorData, RelatedActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionRelatedActorData, RelatedActorPropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionRelatedActorData, RelatedActorPropertyType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionRelatedActorData, RelatedActorPropertyUsage, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionRelatedActorData, UnknownData_QW4U, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionRelatedActorData, RelatedActorPropertyTextColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionRelatedActorData, LocalIndexMatchColorModifier, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionRelatedActorData, bUseLocalIndexMatchColorModifier, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionRelatedActorData, UnknownData_0LF5, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionRelatedActorData, IndexMatchRangeOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionRelatedActorData, UnknownData_FYFK, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionRelatedActorData, 0x0040);
		}

		// ScriptStruct ShooterGame.MissionType.MissionPhaseRequirement
		TEST_METHOD(ScriptStruct__ShooterGame__MissionType__MissionPhaseRequirement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhaseRequirement, DescriptionStringTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhaseRequirement, RelatedType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhaseRequirement, UnknownData_5OXZ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhaseRequirement, OptionalRelatedActorData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhaseRequirement, UnknownData_L1DF, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhaseRequirement, CurrentCount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhaseRequirement, MaxCount, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhaseRequirement, Progress, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhaseRequirement, PhaseRequirementWidgetVisualState, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhaseRequirement, UnknownData_17BB, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhaseRequirement, CustomPhaseRequirementTextColor, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhaseRequirement, CustomPhaseRequirementProgressBarColor, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionPhaseRequirement, UnknownData_6FKY, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionPhaseRequirement, 0x0090);
		}

		// ScriptStruct ShooterGame.NewMissionModuleBase.Struct_MissionModule_Travel
		TEST_METHOD(ScriptStruct__ShooterGame__NewMissionModuleBase__Struct_MissionModule_Travel)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStruct_MissionModule_Travel, RequirementsTitle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStruct_MissionModule_Travel, RequirementsMessage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStruct_MissionModule_Travel, DelayAfterModule, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStruct_MissionModule_Travel, DelayBeforeModule, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStruct_MissionModule_Travel, TriggerKeyOfPointToGoTo, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStruct_MissionModule_Travel, DistanceFromPointToHideIcon, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStruct_MissionModule_Travel, NavPointLabel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStruct_MissionModule_Travel, UnknownData_DI71, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStruct_MissionModule_Travel, 0x0038);
		}

		// ScriptStruct ShooterGame.HUDElement
		TEST_METHOD(ScriptStruct__ShooterGame__HUDElement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, UnknownData_2REZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, UnknownData_DC2V, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, Title, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, TextAlignment_Title, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, UnknownData_YTDC, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, Label, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, TextAlignment_Label, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, TextContainerHorizontalAlignment, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, TextContainerVerticalAlignment, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, UnknownData_M434, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, ZOrder, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, Progress, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, TextColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, TextScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, TextPadding, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, BackgroundImageColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, ProgressColor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, ProgressBarFillType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, AnchorMode, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, UnknownData_EDY7, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, Anchor, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, Location, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, UnknownData_G11J, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, LocationAtMinScale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, LocationAtDefaultScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, LocationAtMaxScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, Size, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, Scale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, BackgroundImage, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, ProgressBarFillImage, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, ProgressBarPadding, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, ProgressBarScale, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, Icon, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, IconSize, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, IconScale, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, IconColor, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, IconPadding, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, IconRotation, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, ProgressBarFillImageMargin, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, ProgressBarBackgroundImageMargin, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHUDElement, UnknownData_5YR3, 0x014C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHUDElement, 0x0150);
		}

		// ScriptStruct ShooterGame.NPCZoneManager.LinkedZoneSpawnVolumeEntry
		TEST_METHOD(ScriptStruct__ShooterGame__NPCZoneManager__LinkedZoneSpawnVolumeEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinkedZoneSpawnVolumeEntry, LinkedZoneSpawnVolume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinkedZoneSpawnVolumeEntry, ZoneSpawnVolumeFloors, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinkedZoneSpawnVolumeEntry, ZoneSpawnVolumeFloorTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinkedZoneSpawnVolumeEntry, EntryWeight, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinkedZoneSpawnVolumeEntry, UnknownData_DI5R, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinkedZoneSpawnVolumeEntry, 0x0030);
		}

		// ScriptStruct ShooterGame.NPCZoneVolume.HibernationCountInfo
		TEST_METHOD(ScriptStruct__ShooterGame__NPCZoneVolume__HibernationCountInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHibernationCountInfo, ClassType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHibernationCountInfo, Count, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHibernationCountInfo, UnknownData_ND42, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHibernationCountInfo, 0x0010);
		}

		// ScriptStruct ShooterGame.OceanDinoManager.OceanDinoSpawnEntry
		TEST_METHOD(ScriptStruct__ShooterGame__OceanDinoManager__OceanDinoSpawnEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOceanDinoSpawnEntry, EntryFriendlyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOceanDinoSpawnEntry, SpawnDinoClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOceanDinoSpawnEntry, SpawnDinoWeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOceanDinoSpawnEntry, EntrySpawnDistanceMultiplier, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOceanDinoSpawnEntry, SpawnZOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOceanDinoSpawnEntry, MinimumDepthFromWaterSurface, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOceanDinoSpawnEntry, MaxSpawnZ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOceanDinoSpawnEntry, NetworkAndStasisRangeMultiplier, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOceanDinoSpawnEntry, MinimumAllowedFreeDepthForSpawn, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOceanDinoSpawnEntry, OverrideMaxValidSpawnPointAttempts, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOceanDinoSpawnEntry, 0x0038);
		}

		// ScriptStruct ShooterGame.OceanDinoManager.OceanDinoDepthEntry
		TEST_METHOD(ScriptStruct__ShooterGame__OceanDinoManager__OceanDinoDepthEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOceanDinoDepthEntry, OceanDinoSpawnEntries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOceanDinoDepthEntry, SectionFriendlyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOceanDinoDepthEntry, StartAtDepthZ, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOceanDinoDepthEntry, UnknownData_CXJ2, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOceanDinoDepthEntry, 0x0038);
		}

		// ScriptStruct ShooterGame.DamagePrimalCharacterStatusValueModifier
		TEST_METHOD(ScriptStruct__ShooterGame__DamagePrimalCharacterStatusValueModifier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamagePrimalCharacterStatusValueModifier, ValueType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamagePrimalCharacterStatusValueModifier, UnknownData_WSWR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamagePrimalCharacterStatusValueModifier, UnknownData_0LBK, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamagePrimalCharacterStatusValueModifier, LimitExistingModifierDescriptionToMaxAmount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamagePrimalCharacterStatusValueModifier, UseAbsoluteDamageAmount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamagePrimalCharacterStatusValueModifier, DamageMultiplierAmountToAdd, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamagePrimalCharacterStatusValueModifier, SpeedToAdd, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamagePrimalCharacterStatusValueModifier, StatusValueModifierDescriptionIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamagePrimalCharacterStatusValueModifier, UnknownData_X79A, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamagePrimalCharacterStatusValueModifier, PercentualDamage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamagePrimalCharacterStatusValueModifier, UnknownData_7E9E, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamagePrimalCharacterStatusValueModifier, ScaleValueByCharacterDamageType, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamagePrimalCharacterStatusValueModifier, 0x0030);
		}

		// ScriptStruct ShooterGame.PrimalBuff.MaxStatScaler
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalBuff__MaxStatScaler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaxStatScaler, LevelUpValueType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaxStatScaler, UnknownData_W1J1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaxStatScaler, TargetValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaxStatScaler, TargetValueIsPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaxStatScaler, UnknownData_EIRY, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaxStatScaler, 0x000C);
		}

		// ScriptStruct ShooterGame.PrimalBuff.PostProcessMaterialAdjuster
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalBuff__PostProcessMaterialAdjuster)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessMaterialAdjuster, PostProcessParentMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessMaterialAdjuster, ScalarParameterNames, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessMaterialAdjuster, ScalarParameterValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessMaterialAdjuster, VectorParameterNames, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessMaterialAdjuster, VectorParameterValues, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostProcessMaterialAdjuster, 0x0048);
		}

		// ScriptStruct ShooterGame.PrimalBuff_Companion.CompanionEventSegmentData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalBuff_Companion__CompanionEventSegmentData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventSegmentData, SegmentDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventSegmentData, UnknownData_V5FR, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventSegmentData, SegmentCompanionReaction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventSegmentData, UnknownData_U2UP, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventSegmentData, MoveCompanionToLocationOffset, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventSegmentData, MakeCompanionLookAtActor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventSegmentData, MakeCompanionLookAtLocation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventSegmentData, CompanionLocationInterpSpeed, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventSegmentData, CompanionRotationInterpSpeed, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventSegmentData, UnknownData_TJCP, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompanionEventSegmentData, 0x00D8);
		}

		// ScriptStruct ShooterGame.PrimalBuff_Companion.CompanionEventData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalBuff_Companion__CompanionEventData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventData, EventType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventData, UnknownData_YHOJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventData, EventTitle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventData, EventSegmentArray, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventData, EventTotalDuration, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventData, UnknownData_XOOO, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventData, EventStartTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventData, CurrentSegmentIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventData, UnknownData_YNYF, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventData, LastSegmentStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompanionEventData, EventEndTime, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompanionEventData, 0x0050);
		}

		// ScriptStruct ShooterGame.PrimalBuffPersistentData_MissionData.SerializedMissionData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalBuffPersistentData_MissionData__SerializedMissionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSerializedMissionData, MissionTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSerializedMissionData, SerializedData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSerializedMissionData, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalCableComponent.CableParticle
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalCableComponent__CableParticle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCableParticle, bFree, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCableParticle, UnknownData_1CEJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCableParticle, Position, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCableParticle, OldPosition, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCableParticle, 0x001C);
		}

		// ScriptStruct ShooterGame.PrimalCharacter.PrimalSnapshotPose
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalCharacter__PrimalSnapshotPose)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalSnapshotPose, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalSnapshotPose, Sequence, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalSnapshotPose, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalSnapshotPose, Pedestal, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalSnapshotPose, UnknownData_8Q7S, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalSnapshotPose, PedestalBone, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalSnapshotPose, RootOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalSnapshotPose, UnknownData_9WI8, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalSnapshotPose, 0x0040);
		}

		// ScriptStruct ShooterGame.PrimalCharacter.DefaultTextureParamOverride
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalCharacter__DefaultTextureParamOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDefaultTextureParamOverride, TextureParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDefaultTextureParamOverride, TextureValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDefaultTextureParamOverride, 0x0010);
		}

		// ScriptStruct ShooterGame.BlueprintVisualLogEntry
		TEST_METHOD(ScriptStruct__ShooterGame__BlueprintVisualLogEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintVisualLogEntry, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintVisualLogEntry, Key, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintVisualLogEntry, Value, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintVisualLogEntry, 0x0030);
		}

		// ScriptStruct ShooterGame.PrimalDinoCharacter.DinoAttackInfo
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalDinoCharacter__DinoAttackInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, AttackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, AttackWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, AttackRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, MinAttackRange, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, ActivateAttackRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, AttackInterval, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, UnknownData_LYCI, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, ChildStateIndexes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, AttackWithJumpChance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, UnknownData_UOPG, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, LastAttackTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, RiderLastAttackTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, AttackSelectionExpirationTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, UnknownData_4KKY, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, AttackSelectionTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, AttackRotationRangeDegrees, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, AttackRotationGroundSpeedMultiplier, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, AttackRotationRate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, UnknownData_1OC4, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, MeleeSwingSockets, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, RangedSocket, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, MeleeDamageAmount, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, MeleeDamageImpulse, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, MeleeSwingRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, UnknownData_APFY, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, MeleeDamageType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, AttackOffset, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, StaminaCost, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, RiderAttackInterval, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, DotProductCheckMin, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, DotProductCheckMax, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, UnknownData_0EF4, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, AttackAnimations, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, AttackAnimationWeights, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, AttackAnimationsTimeFromEndToConsiderFinished, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, ProjectileClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, AttackStateTypeClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, AttackRunningSpeedModifier, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, SwimmingAttackRunningSpeedModifier, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, SetAttackTargetTime, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, UnknownData_GN5F, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, AttackStateType, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, LastSocketPositions, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoAttackInfo, LastProjectileSpawnTime, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDinoAttackInfo, 0x0130);
		}

		// ScriptStruct ShooterGame.PrimalDinoCharacter.HibernationZoneInfo
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalDinoCharacter__HibernationZoneInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHibernationZoneInfo, Volume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHibernationZoneInfo, Weight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHibernationZoneInfo, UnknownData_7633, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHibernationZoneInfo, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalDinoCharacter.DinoBaseLevelWeightEntry
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalDinoCharacter__DinoBaseLevelWeightEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoBaseLevelWeightEntry, EntryWeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoBaseLevelWeightEntry, BaseLevelMinRange, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoBaseLevelWeightEntry, BaseLevelMaxRange, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDinoBaseLevelWeightEntry, 0x000C);
		}

		// ScriptStruct ShooterGame.WeightedObjectList
		TEST_METHOD(ScriptStruct__ShooterGame__WeightedObjectList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedObjectList, Weights, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedObjectList, AssociatedObjects, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedObjectList, 0x0020);
		}

		// ScriptStruct ShooterGame.PrimalDinoCharacter.PrimalSaddleStructure
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalDinoCharacter__PrimalSaddleStructure)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalSaddleStructure, DinoRelativeLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalSaddleStructure, DinoRelativeRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalSaddleStructure, BoneName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalSaddleStructure, MyStructure, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalSaddleStructure, 0x0028);
		}

		// ScriptStruct ShooterGame.StatValuePair
		TEST_METHOD(ScriptStruct__ShooterGame__StatValuePair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatValuePair, Stat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatValuePair, UnknownData_P9CV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatValuePair, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatValuePair, 0x0008);
		}

		// ScriptStruct ShooterGame.PrimalDinoCharacter.DinoSaddleStruct
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalDinoCharacter__DinoSaddleStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSaddleStruct, Saddle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSaddleStruct, SkeletalMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSaddleStruct, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSaddleStruct, bJustRemoved, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSaddleStruct, UnknownData_WU54, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDinoSaddleStruct, 0x0020);
		}

		// ScriptStruct ShooterGame.PrimalDinoCharacter.DinoExtraDefaultItemList
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalDinoCharacter__DinoExtraDefaultItemList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoExtraDefaultItemList, MinimumDinoLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoExtraDefaultItemList, ChanceToGive, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoExtraDefaultItemList, DefaultItemsToGive, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDinoExtraDefaultItemList, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalDinoCharacter.ARKDinoData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalDinoCharacter__ARKDinoData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKDinoData, DinoClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKDinoData, DinoData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKDinoData, DinoNameInMap, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKDinoData, DinoName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKDinoData, bNetInfoFromClient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKDinoData, UnknownData_399L, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARKDinoData, 0x0040);
		}

		// ScriptStruct ShooterGame.ShooterCharacter.PlayerStatusStateCharacterSound
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterCharacter__PlayerStatusStateCharacterSound)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusStateCharacterSound, StateType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusStateCharacterSound, UnknownData_RSCZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusStateCharacterSound, SoundToPlay, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerStatusStateCharacterSound, 0x0010);
		}

		// ScriptStruct ShooterGame.ShooterCharacter.ShooterCharacterPostUpdateTickFunction
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterCharacter__ShooterCharacterPostUpdateTickFunction)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FShooterCharacterPostUpdateTickFunction, UnknownData_17RF, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShooterCharacterPostUpdateTickFunction, 0x0050);
		}

		// ScriptStruct ShooterGame.ShooterPlayerController.TransponderInfo
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterPlayerController__TransponderInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransponderInfo, TransName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransponderInfo, TransLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransponderInfo, Frequency, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransponderInfo, DrawingColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransponderInfo, UnknownData_7GQU, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransponderInfo, 0x0028);
		}

		// ScriptStruct ShooterGame.UI_Spawn.BoneModifierSlider
		TEST_METHOD(ScriptStruct__ShooterGame__UI_Spawn__BoneModifierSlider)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifierSlider, SliderWidgetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifierSlider, BoneModifierRanges, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifierSlider, BoneModifierType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneModifierSlider, UnknownData_T3Q1, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneModifierSlider, 0x0028);
		}

		// ScriptStruct ShooterGame.UI_Spawn.CharacterPreset
		TEST_METHOD(ScriptStruct__ShooterGame__UI_Spawn__CharacterPreset)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterPreset, BodyColorSliderValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterPreset, HairColorSliderValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterPreset, EyeColorSliderValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterPreset, UnknownData_JQ06, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterPreset, BoneModifierSliderValues, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterPreset, 0x0020);
		}

		// ScriptStruct ShooterGame.PrimalCharacterStatusComponent.PrimalCharacterStatusStateThresholds
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalCharacterStatusComponent__PrimalCharacterStatusStateThresholds)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateThresholds, HighThresholdStatusStateValues, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateThresholds, HighThresholdStatusStateType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateThresholds, LowThresholdStatusStateValues, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateThresholds, LowThresholdStatusStateType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateThresholds, StatusStateThresholdValuesAbsolute, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalCharacterStatusStateThresholds, UnknownData_B3IK, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalCharacterStatusStateThresholds, 0x0048);
		}

		// ScriptStruct ShooterGame.PrimalClimbingSettings.ClimbingTypeSettings
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalClimbingSettings__ClimbingTypeSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTypeSettings, UnknownData_QORV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTypeSettings, WaitTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTypeSettings, StaminaConsumption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTypeSettings, ConsumeDurabilityMultiplier, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTypeSettings, AttachMoveTraceDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTypeSettings, AttachBackTraceDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTypeSettings, AttachForwardTraceDistance, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClimbingTypeSettings, 0x001C);
		}

		// ScriptStruct ShooterGame.PrimalClimbingSettings.ClimbingTransitionParams
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalClimbingSettings__ClimbingTransitionParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTransitionParams, LocationInterpSpeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTransitionParams, RotationInterpSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTransitionParams, OvershootDuration, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTransitionParams, OvershootCurveExp, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTransitionParams, OvershootCurveStartOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTransitionParams, OvershootCurveDirectionBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTransitionParams, OvershootCurveStartBias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTransitionParams, OvershootCurveEndOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTransitionParams, OvershootCurveEndBias, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTransitionParams, CameraLocationInterpSpeed, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTransitionParams, CameraRotationInterpSpeed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTransitionParams, bCameraSwitch, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTransitionParams, UnknownData_9CGR, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTransitionParams, CameraTransitionDuration, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTransitionParams, CameraSwitchStrength, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTransitionParams, CameraSwitchLocationInterpSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTransitionParams, CameraSwitchRotationInterpSpeed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingTransitionParams, CameraSwitchOffset, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClimbingTransitionParams, 0x0054);
		}

		// ScriptStruct ShooterGame.PrimalColorSet.ColorSetDefinition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalColorSet__ColorSetDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorSetDefinition, RegionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorSetDefinition, ColorEntryNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorSetDefinition, RandomWeights, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorSetDefinition, MinLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorSetDefinition, MaxLevel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorSetDefinition, UnknownData_QRFD, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorSetDefinition, 0x0060);
		}

		// ScriptStruct ShooterGame.PrimalDinoCharacter.DinoFoodEffectivenessMultipliers
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalDinoCharacter__DinoFoodEffectivenessMultipliers)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoFoodEffectivenessMultipliers, FoodEffectivenessMultiplier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoFoodEffectivenessMultipliers, HealthEffectivenessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoFoodEffectivenessMultipliers, TorpidityEffectivenessMultiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoFoodEffectivenessMultipliers, AffinityEffectivenessMultiplier, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoFoodEffectivenessMultipliers, AffinityOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoFoodEffectivenessMultipliers, StaminaEffectivenessMultiplier, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoFoodEffectivenessMultipliers, FoodItemCategory, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoFoodEffectivenessMultipliers, UnknownData_JAJ5, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoFoodEffectivenessMultipliers, FoodItemParent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoFoodEffectivenessMultipliers, UntamedFoodConsumptionPriority, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoFoodEffectivenessMultipliers, UnknownData_ZACN, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDinoFoodEffectivenessMultipliers, 0x0030);
		}

		// ScriptStruct ShooterGame.PrimalBuff_Grappled.GrappleAnchor
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalBuff_Grappled__GrappleAnchor)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleAnchor, AnchorWorldLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleAnchor, UnknownData_GKKK, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleAnchor, AnchoredComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleAnchor, AnchoredItemIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleAnchor, UnknownData_1UWE, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleAnchor, AnchoredBoneName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleAnchor, AnchorRelativeOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleAnchor, UnknownData_NU00, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrappleAnchor, 0x0040);
		}

		// ScriptStruct ShooterGame.PrimalBuff_Grappled.GrappleTether
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalBuff_Grappled__GrappleTether)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleTether, TetherTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleTether, TetherAnchor_Start, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleTether, TetherAnchor_End, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleTether, TetherAnchor_Visual_Start, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleTether, TetherAnchor_Visual_End, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleTether, GrappledParentPrimalChar, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleTether, GrappleOwner, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleTether, MasterGrappleBuff, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleTether, TetherLifetime, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleTether, UnknownData_3RZJ, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleTether, TetherCreationTime, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleTether, UnknownData_II3W, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleTether, UnknownData_9SGT, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleTether, LastAboveBreakDistPastTetherLengthTime, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleTether, TetherLength_Current, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleTether, DirFromOwner_Current, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleTether, DistToOwner_Current, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrappleTether, OwnerDistFromTetherLimit_Current, 0x0164);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrappleTether, 0x0168);
		}

		// ScriptStruct ShooterGame.PrimalBuff_Grappled.ReplicatedGrappleTetherData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalBuff_Grappled__ReplicatedGrappleTetherData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedGrappleTetherData, Rep_TetherTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedGrappleTetherData, Rep_TetherAnchor_Start, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedGrappleTetherData, Rep_TetherAnchor_End, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedGrappleTetherData, Rep_TetherAnchor_Visual_Start, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedGrappleTetherData, Rep_TetherAnchor_Visual_End, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedGrappleTetherData, Rep_MasterGrappledBuff, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedGrappleTetherData, Rep_TetherLifetime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedGrappleTetherData, UnknownData_LYRT, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedGrappleTetherData, Rep_TetherCreationTime, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedGrappleTetherData, UnknownData_NV4Y, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedGrappleTetherData, Rep_TetherLength, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedGrappleTetherData, UnknownData_GYTN, 0x0131);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedGrappleTetherData, 0x0138);
		}

		// ScriptStruct ShooterGame.PrimalBuff_Grappled.CreateGrappleTetherData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalBuff_Grappled__CreateGrappleTetherData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGrappleTetherData, WithTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGrappleTetherData, WithTetherStartAnchor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGrappleTetherData, WithTetherEndAnchor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGrappleTetherData, WithTetherVisualStartAnchor, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGrappleTetherData, WithTetherVisualEndAnchor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGrappleTetherData, WithMasterGrappleBuff, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGrappleTetherData, WithTetherLifetime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateGrappleTetherData, UnknownData_56SG, 0x011D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateGrappleTetherData, 0x0120);
		}

		// ScriptStruct ShooterGame.PrimalBuff_MissionData.ClientMissionData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalBuff_MissionData__ClientMissionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMissionData, Mission, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMissionData, Requirements, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMissionData, LocalRequirements, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMissionData, MissionWorldIndicators, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMissionData, LocalWorldIndicators, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMissionData, Items, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientMissionData, 0x0058);
		}

		// ScriptStruct ShooterGame.PrimalBuff_MissionData.ClientMissionSubscriptionData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalBuff_MissionData__ClientMissionSubscriptionData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMissionSubscriptionData, MissionType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMissionSubscriptionData, UnknownData_JOFF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMissionSubscriptionData, Keys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientMissionSubscriptionData, 0x0030);
		}

		// ScriptStruct ShooterGame.PrimalBuff_MissionData.ClientMissionEligibility
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalBuff_MissionData__ClientMissionEligibility)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMissionEligibility, UnknownData_GD8O, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMissionEligibility, LastUpdateNetworkTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMissionEligibility, LastCompletedUtcTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMissionEligibility, MissionMaxDurationSeconds, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMissionEligibility, UnknownData_7E2M, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMissionEligibility, MissionStartNetworkTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMissionEligibility, Reason, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientMissionEligibility, 0x0038);
		}

		// ScriptStruct ShooterGame.PrimalBuff_MissionData.MissionEligibilityData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalBuff_MissionData__MissionEligibilityData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionEligibilityData, MissionType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionEligibilityData, IneligibleReasonType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionEligibilityData, LastCompletedUtcTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionEligibilityData, UnknownData_6CWA, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionEligibilityData, MissionMaxDurationSeconds, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionEligibilityData, MissionStartNetworkTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionEligibilityData, 0x0028);
		}

		// ScriptStruct ShooterGame.PrimalEngramEntry.EngramEntries
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalEngramEntry__EngramEntries)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngramEntries, EngramEntries, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngramEntries, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalHarvestingComponent.HarvestResourceEntry
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalHarvestingComponent__HarvestResourceEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHarvestResourceEntry, OverrideQuantityMax, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHarvestResourceEntry, OverrideQuantityMin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHarvestResourceEntry, OverrideQuantityRandomPower, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHarvestResourceEntry, EntryWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHarvestResourceEntry, EffectivenessQuantityMultiplier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHarvestResourceEntry, EffectivenessQualityMultiplier, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHarvestResourceEntry, ResourceItem, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHarvestResourceEntry, QualityMin, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHarvestResourceEntry, QualityMax, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHarvestResourceEntry, XPGainMax, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHarvestResourceEntry, XPGainMin, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHarvestResourceEntry, DamageTypeEntryValuesOverrides, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHarvestResourceEntry, DamageTypeEntryWeightOverrides, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHarvestResourceEntry, DamageTypeEntryMinQuantityOverrides, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHarvestResourceEntry, DamageTypeEntryMaxQuantityOverrides, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHarvestResourceEntry, UnknownData_ZIWV, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHarvestResourceEntry, 0x0078);
		}

		// ScriptStruct ShooterGame.PrimalHarvestingComponent.DamageHarvestingEntry
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalHarvestingComponent__DamageHarvestingEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageHarvestingEntry, DamageMultiplier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageHarvestingEntry, HarvestQuantityMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageHarvestingEntry, DamageHarvestAdditionalEffectiveness, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageHarvestingEntry, DamageDurabilityConsumptionMultiplier, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageHarvestingEntry, UnknownData_SYO8, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageHarvestingEntry, DamageTypeParent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageHarvestingEntry, HarvestDamageFXOverride, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageHarvestingEntry, 0x0028);
		}

		// ScriptStruct ShooterGame.PrimalHarvestingComponent.ComponentAttachmentEntry
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalHarvestingComponent__ComponentAttachmentEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentAttachmentEntry, ActorComponentClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentAttachmentEntry, ComponentLocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentAttachmentEntry, ComponentRotationOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentAttachmentEntry, 0x0020);
		}

		// ScriptStruct ShooterGame.PrimalTextStyle
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalTextStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalTextStyle, StyleName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalTextStyle, TextStyle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalTextStyle, 0x0120);
		}

		// ScriptStruct ShooterGame.PrimalImageStyle
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalImageStyle)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalImageStyle, StyleName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalImageStyle, ImageStyle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalImageStyle, 0x0090);
		}

		// ScriptStruct ShooterGame.PrimalStructureSeating.SeatingSpot
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalStructureSeating__SeatingSpot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatingSpot, SeatNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatingSpot, LocationOffset, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatingSpot, RotationOffset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSeatingSpot, 0x001C);
		}

		// ScriptStruct ShooterGame.LeaderboardRowWidget.LeaderboardColumnDefinition
		TEST_METHOD(ScriptStruct__ShooterGame__LeaderboardRowWidget__LeaderboardColumnDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardColumnDefinition, WidthPercent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardColumnDefinition, ColumnPadding, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardColumnDefinition, UnknownData_NLCT, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardColumnDefinition, Font, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardColumnDefinition, 0x0038);
		}

		// ScriptStruct ShooterGame.UI_OptionsMenu.KeyBindingItem
		TEST_METHOD(ScriptStruct__ShooterGame__UI_OptionsMenu__KeyBindingItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBindingItem, UnknownData_8TO1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBindingItem, WidgetName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBindingItem, UnknownData_J0QV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBindingItem, ActionName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBindingItem, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBindingItem, UnknownData_YEZ8, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBindingItem, 0x0030);
		}

		// ScriptStruct ShooterGame.UI_HostSession.MapDescription
		TEST_METHOD(ScriptStruct__ShooterGame__UI_HostSession__MapDescription)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapDescription, MapImage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapDescription, MapDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapDescription, MinAscensionLevelRequired, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapDescription, UnknownData_V8FN, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapDescription, 0x0020);
		}

		// ScriptStruct ShooterGame.PrimalWorldBuffData.PropertyModifierDefinition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalWorldBuffData__PropertyModifierDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyModifierDefinition, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyModifierDefinition, bNeedsManualReplication, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyModifierDefinition, BuffPropertyLocation, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyModifierDefinition, UnknownData_D5F0, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyModifierDefinition, ModifierValue, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyModifierDefinition, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalWorldBuffData.WorldBuffDefinition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalWorldBuffData__WorldBuffDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, WorldBuffIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, WorldBuffDisplayTitle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, WorldBuffDisplayTitleColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, WorldBuffDisplayText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, WorldBuffDisplayIcon, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, WorldBuffServerNotificationText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, WorldBuffServerNotificationTextColor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, WorldBuffServerNotificationIcon, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, WorldBuffServerNotificationSound, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, StackLimit, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, WorldBuffDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, WorldBuffsToRemoveOnStart, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, WorldBuffsToPreventWhileActive, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, TimeFromEndToAllowReplacement, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, WorldBuffSetName, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, BuffDifficulty, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, UnknownData_H3GO, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, DifficultyDisplayText, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, UnknownData_RKW3, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, WorldBuffCustomImplementation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffDefinition, PropertyModifiers, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldBuffDefinition, 0x00D8);
		}

		// ScriptStruct ShooterGame.PrimalWorldModifier.FoliageReskinDefinition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalWorldModifier__FoliageReskinDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageReskinDefinition, ForFoliage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageReskinDefinition, NewFoliageMaterials, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageReskinDefinition, OverrideDestructionMaterials, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageReskinDefinition, 0x0030);
		}

		// ScriptStruct ShooterGame.PrimalWorldModifier.SublevelOverrideDefinition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalWorldModifier__SublevelOverrideDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSublevelOverrideDefinition, SublevelPackageToReplace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSublevelOverrideDefinition, SublevelPackageToActivate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSublevelOverrideDefinition, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalWorldModifier.LevelStaticMeshReskinDefinition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalWorldModifier__LevelStaticMeshReskinDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStaticMeshReskinDefinition, MaterialNameToReplace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStaticMeshReskinDefinition, NewMaterial, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStaticMeshReskinDefinition, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalWorldModifier.SublevelOverrideGroup
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalWorldModifier__SublevelOverrideGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSublevelOverrideGroup, ForMapName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSublevelOverrideGroup, bUseSublevelOverrides, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSublevelOverrideGroup, UnknownData_2CPT, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSublevelOverrideGroup, SublevelOverrides, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSublevelOverrideGroup, StaticMeshReskins, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSublevelOverrideGroup, 0x0038);
		}

		// ScriptStruct ShooterGame.PrimalGameData.InventoryComponentDefaultItemsAppend
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__InventoryComponentDefaultItemsAppend)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryComponentDefaultItemsAppend, InventoryComponentClasses, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryComponentDefaultItemsAppend, AddItems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryComponentDefaultItemsAppend, RemoveItems, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryComponentDefaultItemsAppend, bAddToForceAllowCrafting, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryComponentDefaultItemsAppend, UnknownData_ET2G, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryComponentDefaultItemsAppend, 0x0038);
		}

		// ScriptStruct ShooterGame.MissionMetaData
		TEST_METHOD(ScriptStruct__ShooterGame__MissionMetaData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionMetaData, MissionTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionMetaData, MissionMetaDataClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionMetaData, 0x0010);
		}

		// ScriptStruct ShooterGame.PrimalWorldSettingsEventOverrides.ActiveEventUndeprecatedStructures
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalWorldSettingsEventOverrides__ActiveEventUndeprecatedStructures)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveEventUndeprecatedStructures, ActiveEvent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveEventUndeprecatedStructures, UndeprecatedStructuresDuringEvent, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveEventUndeprecatedStructures, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalWorldSettingsEventOverrides.ActiveEventUndeprecatedItems
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalWorldSettingsEventOverrides__ActiveEventUndeprecatedItems)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveEventUndeprecatedItems, ActiveEvent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveEventUndeprecatedItems, UndeprecatedItemsDuringEvent, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveEventUndeprecatedItems, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalWorldSettingsEventOverrides.ActiveEventUndeprecatedDinos
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalWorldSettingsEventOverrides__ActiveEventUndeprecatedDinos)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveEventUndeprecatedDinos, ActiveEvent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveEventUndeprecatedDinos, UndeprecatedDinosDuringEvent, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveEventUndeprecatedDinos, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalWorldSettingsEventOverrides.ActiveEventGlobalStatusAdjustments
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalWorldSettingsEventOverrides__ActiveEventGlobalStatusAdjustments)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveEventGlobalStatusAdjustments, ActiveEvent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveEventGlobalStatusAdjustments, GlobalStatusAdjustmentRateMultipliersPositive, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveEventGlobalStatusAdjustments, GlobalStatusAdjustmentRateMultipliersNegative, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveEventGlobalStatusAdjustments, 0x0068);
		}

		// ScriptStruct ShooterGame.ShooterDamageType.OverrideDamageHarvestingEntry
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterDamageType__OverrideDamageHarvestingEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverrideDamageHarvestingEntry, ForHarvestingComponents, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverrideDamageHarvestingEntry, HarvestEntryOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverrideDamageHarvestingEntry, HarvestResourceEntriesOverride, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverrideDamageHarvestingEntry, 0x0048);
		}

		// ScriptStruct ShooterGame.ShooterDamageType.TargetClassDamageScaler
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterDamageType__TargetClassDamageScaler)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetClassDamageScaler, TargetClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetClassDamageScaler, DamageScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetClassDamageScaler, UnknownData_OF2H, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTargetClassDamageScaler, 0x0010);
		}

		// ScriptStruct ShooterGame.ShooterGame_Menu.ActiveEventMainMenuOverride
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterGame_Menu__ActiveEventMainMenuOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveEventMainMenuOverride, ActiveEvent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveEventMainMenuOverride, MainMenuBG, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveEventMainMenuOverride, MusicFilename, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveEventMainMenuOverride, 0x0020);
		}

		// ScriptStruct ShooterGame.ShooterGameInstance.AssetPathObjectPair
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterGameInstance__AssetPathObjectPair)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetPathObjectPair, AssetPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetPathObjectPair, AssetObject, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetPathObjectPair, 0x0018);
		}

		// ScriptStruct ShooterGame.TerrainComponent.InstancedFoligeData
		TEST_METHOD(ScriptStruct__ShooterGame__TerrainComponent__InstancedFoligeData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedFoligeData, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedFoligeData, FoliageType, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedFoligeData, 0x0010);
		}

		// ScriptStruct ShooterGame.TerrainComponent.TerrainInfo
		TEST_METHOD(ScriptStruct__ShooterGame__TerrainComponent__TerrainInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTerrainInfo, FoliageActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTerrainInfo, InstancedFoligeData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTerrainInfo, PGPropertiesBufferSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTerrainInfo, UnknownData_0YGZ, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTerrainInfo, PGPropertiesBuffer, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTerrainInfo, Version, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTerrainInfo, UnknownData_WLVF, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTerrainInfo, FromFloatCacheInputs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTerrainInfo, FromFloatCacheRawOutputs, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTerrainInfo, 0x0058);
		}

		// ScriptStruct ShooterGame.ShooterGameMode.PlayerDeathReason
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterGameMode__PlayerDeathReason)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerDeathReason, PlayerId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerDeathReason, UnknownData_KLTI, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerDeathReason, DeathReason, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerDeathReason, DiedAtTime, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerDeathReason, 0x0020);
		}

		// ScriptStruct ShooterGame.ShooterGameMode.EngramEntryOverride
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterGameMode__EngramEntryOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngramEntryOverride, EngramClassName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngramEntryOverride, EngramIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngramEntryOverride, EngramHidden, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngramEntryOverride, UnknownData_6NTU, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngramEntryOverride, EngramPointsCost, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngramEntryOverride, EngramLevelRequirement, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngramEntryOverride, RemoveEngramPreReq, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngramEntryOverride, UnknownData_HYMS, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngramEntryOverride, 0x0028);
		}

		// ScriptStruct ShooterGame.ShooterGameMode.EngramEntryAutoUnlock
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterGameMode__EngramEntryAutoUnlock)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngramEntryAutoUnlock, EngramClassName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngramEntryAutoUnlock, LevelToAutoUnlock, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngramEntryAutoUnlock, UnknownData_43RR, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngramEntryAutoUnlock, 0x0018);
		}

		// ScriptStruct ShooterGame.ShooterGameMode.DinoSpawnWeightMultiplier
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterGameMode__DinoSpawnWeightMultiplier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSpawnWeightMultiplier, DinoNameTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSpawnWeightMultiplier, SpawnWeightMultiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSpawnWeightMultiplier, OverrideSpawnLimitPercentage, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSpawnWeightMultiplier, UnknownData_5P5N, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSpawnWeightMultiplier, SpawnLimitPercentage, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDinoSpawnWeightMultiplier, 0x0014);
		}

		// ScriptStruct ShooterGame.ShooterGameMode.ClassMultiplier
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterGameMode__ClassMultiplier)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassMultiplier, ClassName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassMultiplier, Multiplier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassMultiplier, UnknownData_XCGX, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassMultiplier, 0x0018);
		}

		// ScriptStruct ShooterGame.ClassNameReplacement
		TEST_METHOD(ScriptStruct__ShooterGame__ClassNameReplacement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassNameReplacement, FromClassName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassNameReplacement, ToClassName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassNameReplacement, 0x0020);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ItemCraftingCostOverride
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ItemCraftingCostOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemCraftingCostOverride, ItemClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemCraftingCostOverride, BaseCraftingResourceRequirements, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemCraftingCostOverride, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ConfigCraftingResourceRequirement
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ConfigCraftingResourceRequirement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigCraftingResourceRequirement, BaseResourceRequirement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigCraftingResourceRequirement, UnknownData_B2E4, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigCraftingResourceRequirement, ResourceItemTypeString, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigCraftingResourceRequirement, bCraftingRequireExactResourceType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigCraftingResourceRequirement, UnknownData_P90I, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConfigCraftingResourceRequirement, 0x0020);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ConfigItemCraftingCostOverride
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ConfigItemCraftingCostOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigItemCraftingCostOverride, ItemClassString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigItemCraftingCostOverride, BaseCraftingResourceRequirements, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConfigItemCraftingCostOverride, 0x0020);
		}

		// ScriptStruct ShooterGame.PrimalGameData.MaxItemQuantityOverride
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__MaxItemQuantityOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaxItemQuantityOverride, MaxItemQuantity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaxItemQuantityOverride, bIgnoreMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaxItemQuantityOverride, UnknownData_A236, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaxItemQuantityOverride, 0x0008);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ConfigMaxItemQuantityOverride
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ConfigMaxItemQuantityOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigMaxItemQuantityOverride, ItemClassString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigMaxItemQuantityOverride, Quantity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConfigMaxItemQuantityOverride, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ConfigSupplyCrateItemsOverride
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ConfigSupplyCrateItemsOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigSupplyCrateItemsOverride, SupplyCrateClassString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigSupplyCrateItemsOverride, MinItemSets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigSupplyCrateItemsOverride, MaxItemSets, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigSupplyCrateItemsOverride, NumItemSetsPower, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigSupplyCrateItemsOverride, bSetsRandomWithoutReplacement, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigSupplyCrateItemsOverride, UnknownData_7J1S, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigSupplyCrateItemsOverride, ItemSets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigSupplyCrateItemsOverride, bAppendItemSets, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigSupplyCrateItemsOverride, bAppendPreventIncreasingMinMaxItemSets, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigSupplyCrateItemsOverride, UnknownData_UFIP, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConfigSupplyCrateItemsOverride, 0x0038);
		}

		// ScriptStruct ShooterGame.ShooterGameMode.ConfigNPCSpawnEntriesContainer
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterGameMode__ConfigNPCSpawnEntriesContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigNPCSpawnEntriesContainer, NPCSpawnEntriesContainerClassString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigNPCSpawnEntriesContainer, NPCSpawnEntries, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConfigNPCSpawnEntriesContainer, NPCSpawnLimits, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConfigNPCSpawnEntriesContainer, 0x0030);
		}

		// ScriptStruct ShooterGame.Leaderboard.LeaderboardEntry
		TEST_METHOD(ScriptStruct__ShooterGame__Leaderboard__LeaderboardEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardEntry, MissionTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardEntry, Rows, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardEntry, 0x0018);
		}

		// ScriptStruct ShooterGame.Leaderboard.LeaderboardsContainer
		TEST_METHOD(ScriptStruct__ShooterGame__Leaderboard__LeaderboardsContainer)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardsContainer, Leaderboards, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardsContainer, 0x0010);
		}

		// ScriptStruct ShooterGame.CrateTemporaryQualityModifiers
		TEST_METHOD(ScriptStruct__ShooterGame__CrateTemporaryQualityModifiers)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrateTemporaryQualityModifiers, CustomTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrateTemporaryQualityModifiers, ClassString, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrateTemporaryQualityModifiers, QualityMultiplierModifier, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrateTemporaryQualityModifiers, UnknownData_H3VT, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrateTemporaryQualityModifiers, 0x0020);
		}

		// ScriptStruct ShooterGame.CrateTemporaryQualityModifierSet
		TEST_METHOD(ScriptStruct__ShooterGame__CrateTemporaryQualityModifierSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrateTemporaryQualityModifierSet, SetTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrateTemporaryQualityModifierSet, Modifiers, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrateTemporaryQualityModifierSet, 0x0018);
		}

		// ScriptStruct ShooterGame.ResourceTemporaryAmountModifiers
		TEST_METHOD(ScriptStruct__ShooterGame__ResourceTemporaryAmountModifiers)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FResourceTemporaryAmountModifiers, CustomTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResourceTemporaryAmountModifiers, HarvestComponentClassString, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResourceTemporaryAmountModifiers, ResourceAmountMultiplierModifier, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResourceTemporaryAmountModifiers, UnknownData_HZD5, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResourceTemporaryAmountModifiers, 0x0020);
		}

		// ScriptStruct ShooterGame.ResourceTemporaryAmountModifierSet
		TEST_METHOD(ScriptStruct__ShooterGame__ResourceTemporaryAmountModifierSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FResourceTemporaryAmountModifierSet, SetTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResourceTemporaryAmountModifierSet, Modifiers, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResourceTemporaryAmountModifierSet, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ItemMaxItemQuantityOverride
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ItemMaxItemQuantityOverride)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemMaxItemQuantityOverride, ItemClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemMaxItemQuantityOverride, Quantity, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemMaxItemQuantityOverride, 0x0010);
		}

		// ScriptStruct ShooterGame.ShooterGameState.DinoDownloadData
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterGameState__DinoDownloadData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoDownloadData, AllowDownloadTimeUTC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoDownloadData, UnknownData_BOU9, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoDownloadData, UniqueDino, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDinoDownloadData, 0x0010);
		}

		// ScriptStruct ShooterGame.TeleportDestination
		TEST_METHOD(ScriptStruct__ShooterGame__TeleportDestination)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportDestination, DestinationTitle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportDestination, DestinationLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeleportDestination, DestinationRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTeleportDestination, 0x0028);
		}

		// ScriptStruct ShooterGame.MassTeleportData
		TEST_METHOD(ScriptStruct__ShooterGame__MassTeleportData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMassTeleportData, MyTeleportDestination, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMassTeleportData, MyTeleportStartTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMassTeleportData, MyTeleportDuration, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMassTeleportData, MyTeleportRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMassTeleportData, InitiatedByActor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMassTeleportData, InitiatedAtTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMassTeleportData, BuffToApply, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMassTeleportData, MyTeleportingActors, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMassTeleportData, UnknownData_0GRB, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMassTeleportData, MyTeleportingActorTransformOffsets, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMassTeleportData, MyTeleportingDelays, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMassTeleportData, MyTeleportationAttemptMap, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMassTeleportData, UnknownData_OPVI, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMassTeleportData, 0x00D0);
		}

		// ScriptStruct ShooterGame.ShooterGameState.WorldBuffPersistantData
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterGameState__WorldBuffPersistantData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffPersistantData, WorldBuffIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffPersistantData, StackCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffPersistantData, UnknownData_0MO4, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldBuffPersistantData, WorldBuffStartTime, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldBuffPersistantData, 0x0018);
		}

		// ScriptStruct ShooterGame.ShooterGameState.GameIniData
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterGameState__GameIniData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameIniData, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameIniData, PropertyValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameIniData, 0x0020);
		}

		// ScriptStruct ShooterGame.ActionReportItem
		TEST_METHOD(ScriptStruct__ShooterGame__ActionReportItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FActionReportItem, PlayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActionReportItem, TribeName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActionReportItem, TimeOfDeath, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActionReportItem, LevelOfDeath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActionReportItem, DeathMessage, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActionReportItem, 0x0050);
		}

		// ScriptStruct ShooterGame.BattleGameState.PlayerDeathNotification
		TEST_METHOD(ScriptStruct__ShooterGame__BattleGameState__PlayerDeathNotification)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerDeathNotification, PlayerDeathStringEnemy, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerDeathNotification, PlayerDeathStringAlly, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerDeathNotification, PlayerDeathStringYou, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerDeathNotification, DeathReason, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerDeathNotification, DeadPlayerNames, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerDeathNotification, bIsTribeDeath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerDeathNotification, UnknownData_UF99, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerDeathNotification, DeathTribeName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerDeathNotification, TargetingTeam, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerDeathNotification, UnknownData_UUV7, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerDeathNotification, LinkedPlayerID, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerDeathNotification, PlayersData, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerDeathNotification, 0x0088);
		}

		// ScriptStruct ShooterGame.BattleGameState.BattleTribeData
		TEST_METHOD(ScriptStruct__ShooterGame__BattleGameState__BattleTribeData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBattleTribeData, TribeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBattleTribeData, TribeId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBattleTribeData, UnknownData_EBHE, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBattleTribeData, 0x0018);
		}

		// ScriptStruct ShooterGame.BattleGameState.BattlePlayerData
		TEST_METHOD(ScriptStruct__ShooterGame__BattleGameState__BattlePlayerData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBattlePlayerData, PlayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBattlePlayerData, bConnected, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBattlePlayerData, bAlive, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBattlePlayerData, UnknownData_SL2U, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBattlePlayerData, TribeId, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBattlePlayerData, PlayerId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBattlePlayerData, UnknownData_LWIU, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBattlePlayerData, 0x0020);
		}

		// ScriptStruct ShooterGame.ShooterGameUserSettings.DepthOfFieldSetting
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterGameUserSettings__DepthOfFieldSetting)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthOfFieldSetting, FocalDistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthOfFieldSetting, FocalRegion, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthOfFieldSetting, NearTransitionRegion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthOfFieldSetting, FarTransitionRegion, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthOfFieldSetting, Scale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthOfFieldSetting, MaxBokehSize, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthOfFieldSetting, Occlusion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthOfFieldSetting, UseGaussianBlur, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthOfFieldSetting, UnknownData_1HHE, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDepthOfFieldSetting, 0x0020);
		}

		// ScriptStruct ShooterGame.ShooterWeapon.WeaponData
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterWeapon__WeaponData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, bInfiniteAmmo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, bNeverReload, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, bUsesAmmo, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, bDontTakeAmmoOnReload, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, bFullReloadFromSingleItem, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, bShowAmmoInClipAsPercent, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, bDontReloadEmptyClipOnEquip, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, UnknownData_HXIH, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, AmmoPerClip, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, AmmoPerShot, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, bSilentOverflowReload, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, UnknownData_7KBB, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, TimeBetweenShots, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, NoAnimReloadDuration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, bForceReloadDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, bLoopedReloadAnim, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, UnknownData_W25N, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, ReloadDurationPerAmmoCount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, ItemDurabilityToConsumePerShot, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponData, HarvestResourceMultiplier, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponData, 0x002C);
		}

		// ScriptStruct ShooterGame.ShooterWeapon.WeaponAnim
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterWeapon__WeaponAnim)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponAnim, Pawn1P, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponAnim, Pawn3P, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponAnim, 0x0010);
		}

		// ScriptStruct ShooterGame.ShooterWeapon.InstantWeaponData
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterWeapon__InstantWeaponData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstantWeaponData, WeaponSpread, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstantWeaponData, TargetingSpreadMod, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstantWeaponData, FinalWeaponSpreadMultiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstantWeaponData, FiringSpreadIncrement, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstantWeaponData, FiringSpreadMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstantWeaponData, WeaponRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstantWeaponData, HitDamage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstantWeaponData, DamageImpulse, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstantWeaponData, DamageType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstantWeaponData, ClientSideHitLeeway, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstantWeaponData, AllowedViewDotHitDir, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstantWeaponData, 0x0030);
		}

		// ScriptStruct ShooterGame.ShooterProjectile.ProjectileWeaponData
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterProjectile__ProjectileWeaponData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileWeaponData, ProjectileLife, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileWeaponData, ExplosionDamage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileWeaponData, ExplosionImpulse, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileWeaponData, DirectDamage, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileWeaponData, DirectImpulse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileWeaponData, ExplosionRadius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileWeaponData, DamageType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileWeaponData, DirectDamageType, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProjectileWeaponData, 0x0028);
		}

		// ScriptStruct ShooterGame.VictoryCore.ProjectileArc
		TEST_METHOD(ScriptStruct__ShooterGame__VictoryCore__ProjectileArc)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileArc, StartLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileArc, StartDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileArc, LaunchSpeed, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileArc, WorldRotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileArc, bApplyRotationToGravityDirection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileArc, UnknownData_EPC4, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectileArc, OverrideGravityZ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProjectileArc, 0x0030);
		}

		// ScriptStruct ShooterGame.VictoryCore.OverlappedFoliageElement
		TEST_METHOD(ScriptStruct__ShooterGame__VictoryCore__OverlappedFoliageElement)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlappedFoliageElement, HarvestActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlappedFoliageElement, InstancedStaticMeshComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlappedFoliageElement, HarvestingComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlappedFoliageElement, HarvestLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlappedFoliageElement, HitBodyIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlappedFoliageElement, MaxHarvestHealth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlappedFoliageElement, CurrentHarvestHealth, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlappedFoliageElement, UnknownData_2SJ7, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlappedFoliageElement, 0x0038);
		}

		// ScriptStruct ShooterGame.VictoryCore.PenetrationTraceHit
		TEST_METHOD(ScriptStruct__ShooterGame__VictoryCore__PenetrationTraceHit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPenetrationTraceHit, Hit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPenetrationTraceHit, DistanceFromLastHit, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPenetrationTraceHit, TotalDistance, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPenetrationTraceHit, 0x0090);
		}

		// ScriptStruct ShooterGame.PrimalGameData.DinoSetupGroup
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__DinoSetupGroup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetupGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetupGroup, RandomWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetupGroup, UnknownData_2O4E, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetupGroup, Entries, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoSetupGroup, EntriesSpawnNumberLimits, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDinoSetupGroup, 0x0030);
		}

		// ScriptStruct ShooterGame.PrimalProjectileNetGun.ManagedBoneSetup
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalProjectileNetGun__ManagedBoneSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedBoneSetup, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedBoneSetup, TraceType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedBoneSetup, UnknownData_89GQ, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedBoneSetup, StartOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedBoneSetup, LineTraceLength, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedBoneSetup, LaunchSpeed, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedBoneSetup, GravityOverride, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FManagedBoneSetup, 0x001C);
		}

		// ScriptStruct ShooterGame.ShooterWeapon_Climb.ClimbingAnims
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterWeapon_Climb__ClimbingAnims)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingAnims, LeftHandAnchored, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClimbingAnims, RightHandAnchored, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClimbingAnims, 0x0400);
		}

		// ScriptStruct ShooterGame.SkyBoxLoader.SkyBoxLoadedStatus
		TEST_METHOD(ScriptStruct__ShooterGame__SkyBoxLoader__SkyBoxLoadedStatus)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkyBoxLoadedStatus, UnknownData_EVSE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkyBoxLoadedStatus, LoadedTextureResources, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkyBoxLoadedStatus, 0x0020);
		}

		// ScriptStruct ShooterGame.SOTFNotification.SOTFNotificationInfo
		TEST_METHOD(ScriptStruct__ShooterGame__SOTFNotification__SOTFNotificationInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSOTFNotificationInfo, bIsActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSOTFNotificationInfo, UnknownData_DFDJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSOTFNotificationInfo, PlayerNames, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSOTFNotificationInfo, PlayerDeathReason, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSOTFNotificationInfo, TribeName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSOTFNotificationInfo, CustomDrawString, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSOTFNotificationInfo, StartDisplayTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSOTFNotificationInfo, DisplayInterval, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSOTFNotificationInfo, UnknownData_LWVV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSOTFNotificationInfo, DisplayData, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSOTFNotificationInfo, bLastPlayer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSOTFNotificationInfo, Type, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSOTFNotificationInfo, UnknownData_NAZS, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSOTFNotificationInfo, 0x0070);
		}

		// ScriptStruct ShooterGame.SOTFNotificationDisplay.ScrollingTextInfo
		TEST_METHOD(ScriptStruct__ShooterGame__SOTFNotificationDisplay__ScrollingTextInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollingTextInfo, TextComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollingTextInfo, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollingTextInfo, bActive, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollingTextInfo, UnknownData_EBV2, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollingTextInfo, 0x0010);
		}

		// ScriptStruct ShooterGame.SOTFNotificationDisplay.PlayerPreviewImage
		TEST_METHOD(ScriptStruct__ShooterGame__SOTFNotificationDisplay__PlayerPreviewImage)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPreviewImage, UnknownData_ZP4A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPreviewImage, PreviewMesh, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPreviewImage, PlayerNameText, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPreviewImage, TribeComponent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPreviewImage, DeathInfo, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerPreviewImage, 0x0030);
		}

		// ScriptStruct ShooterGame.SOTFNotificationDisplay.BannerTextInfo
		TEST_METHOD(ScriptStruct__ShooterGame__SOTFNotificationDisplay__BannerTextInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBannerTextInfo, TextComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBannerTextInfo, BackgroundComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBannerTextInfo, bActive, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBannerTextInfo, UnknownData_K9WV, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBannerTextInfo, 0x0018);
		}

		// ScriptStruct ShooterGame.SoundNodeVehicleEngine.VehicleEngineDatum
		TEST_METHOD(ScriptStruct__ShooterGame__SoundNodeVehicleEngine__VehicleEngineDatum)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineDatum, FadeInRPMStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineDatum, FadeInRPMEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineDatum, FadeOutRPMStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineDatum, FadeOutRPMEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineDatum, MaxPitchMultiplier, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleEngineDatum, 0x0014);
		}

		// ScriptStruct ShooterGame.SupplyCrateSpawningVolume.SupplyCrateSpawnEntry
		TEST_METHOD(ScriptStruct__ShooterGame__SupplyCrateSpawningVolume__SupplyCrateSpawnEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateSpawnEntry, EntryWeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateSpawnEntry, UnknownData_T9KW, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateSpawnEntry, CrateTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateSpawnEntry, CrateEnemySpawnEntries, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupplyCrateSpawnEntry, 0x0018);
		}

		// ScriptStruct ShooterGame.SupplyCrateSpawningVolume.SupplyCrateSpawnPointEntry
		TEST_METHOD(ScriptStruct__ShooterGame__SupplyCrateSpawningVolume__SupplyCrateSpawnPointEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateSpawnPointEntry, LinkedSpawnPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateSpawnPointEntry, LinkedEnemySpawnZoneManager, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateSpawnPointEntry, LinkedEnemySpawnZoneManagerTag, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateSpawnPointEntry, UnknownData_H4VS, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateSpawnPointEntry, TraceGroundPointDownOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateSpawnPointEntry, TraceGroundPointUpOffset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateSpawnPointEntry, SpawnPointWeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateSpawnPointEntry, OverrideSupplyCrateEntries, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupplyCrateSpawnPointEntry, UnknownData_CEG9, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupplyCrateSpawnPointEntry, 0x0050);
		}

		// ScriptStruct ShooterGame.VRBattleGroupDataAsset.VRBattleWaveUnit
		TEST_METHOD(ScriptStruct__ShooterGame__VRBattleGroupDataAsset__VRBattleWaveUnit)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRBattleWaveUnit, DinoType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRBattleWaveUnit, DinoBlueprintPath, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRBattleWaveUnit, DinoLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRBattleWaveUnit, SpawnOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRBattleWaveUnit, PrioritizeStats, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVRBattleWaveUnit, 0x0038);
		}

		// ScriptStruct ShooterGame.WaterVolumeWithFlow.GridIndex
		TEST_METHOD(ScriptStruct__ShooterGame__WaterVolumeWithFlow__GridIndex)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridIndex, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridIndex, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGridIndex, 0x0008);
		}

		// ScriptStruct ShooterGame.WorldModifiersContainer.PrimalWorldModifierList
		TEST_METHOD(ScriptStruct__ShooterGame__WorldModifiersContainer__PrimalWorldModifierList)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalWorldModifierList, bUseActiveEvent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalWorldModifierList, UnknownData_6LJI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalWorldModifierList, ActiveEventNames, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalWorldModifierList, bUseINIStringOptionValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalWorldModifierList, UnknownData_39UF, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalWorldModifierList, INIStringOptionValues, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalWorldModifierList, bHasOverridePriority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalWorldModifierList, UnknownData_ETTH, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalWorldModifierList, WorldModifierClass, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalWorldModifierList, 0x0040);
		}

		// ScriptStruct ShooterGame.ARKTributeData
		TEST_METHOD(ScriptStruct__ShooterGame__ARKTributeData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeData, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeData, DataType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeData, UnknownData_HNP7, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeData, DataBytes, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeData, DataClassName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeData, DataTagName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeData, Name, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeData, DataStats, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeData, LastReceiveDataTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeData, DataID1, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARKTributeData, DataID2, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARKTributeData, 0x0078);
		}

		// ScriptStruct ShooterGame.SaveLoadDyePaintingItem
		TEST_METHOD(ScriptStruct__ShooterGame__SaveLoadDyePaintingItem)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveLoadDyePaintingItem, ItemId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveLoadDyePaintingItem, ColorName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveLoadDyePaintingItem, DyeColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveLoadDyePaintingItem, MissingPercentage, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveLoadDyePaintingItem, NeededPercentage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveLoadDyePaintingItem, ArchIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveLoadDyePaintingItem, UnknownData_G8UX, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveLoadDyePaintingItem, ColorPixels, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSaveLoadDyePaintingItem, 0x0038);
		}

		// ScriptStruct ShooterGame.FishSnareData
		TEST_METHOD(ScriptStruct__ShooterGame__FishSnareData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FFishSnareData, DinoCharacter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFishSnareData, SnareTime, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFishSnareData, 0x000C);
		}

		// ScriptStruct ShooterGame.GamePadKeyName
		TEST_METHOD(ScriptStruct__ShooterGame__GamePadKeyName)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGamePadKeyName, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGamePadKeyName, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGamePadKeyName, KeyIcon, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGamePadKeyName, 0x0030);
		}

		// ScriptStruct ShooterGame.TekGrenadeLauncherSlot
		TEST_METHOD(ScriptStruct__ShooterGame__TekGrenadeLauncherSlot)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTekGrenadeLauncherSlot, AmmoType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTekGrenadeLauncherSlot, LastFireTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTekGrenadeLauncherSlot, bIsLoaded, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTekGrenadeLauncherSlot, UnknownData_RNGW, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTekGrenadeLauncherSlot, 0x0018);
		}

		// ScriptStruct ShooterGame.MekBackpackData
		TEST_METHOD(ScriptStruct__ShooterGame__MekBackpackData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMekBackpackData, BackpackType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMekBackpackData, BoolData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMekBackpackData, FloatData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMekBackpackData, TimeData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMekBackpackData, VectorData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMekBackpackData, StringData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMekBackpackData, 0x0058);
		}

		// ScriptStruct ShooterGame.PrimalGameData.EscapeRoom_RoomItemSetup
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__EscapeRoom_RoomItemSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomItemSetup, ItemClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomItemSetup, NumItems, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomItemSetup, UnknownData_6I18, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomItemSetup, MeshOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomItemSetup, ScaleOverride, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomItemSetup, UnknownData_YSC0, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomItemSetup, MaterialOverride, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEscapeRoom_RoomItemSetup, 0x0030);
		}

		// ScriptStruct ShooterGame.PrimalGameData.EscapeRoom_RoomSetup
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__EscapeRoom_RoomSetup)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, RoomUnlockRequirements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, UnlockHintTypes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, CorrectHintWeight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, UnknownData_H35Z, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, MultiplierPerReset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, NumDinosToKill, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, UnknownData_RNRG, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, RoomGroupDinoSetups, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, ItemSetup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, NumHintFloors, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, NumHintRoomPulses, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, TimeToComplete, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, TeleportToNextRoomOnUnlock, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, TeleportToNextRoomOnCorrectOverlap, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, SpawnEnemiesWithoutUnlockReq, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, UnknownData_L7OO, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, NumDinosPerWave, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, WaveInterval, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, ShowIndicatorsForUnlockReqs, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, MaxActiveDinos, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, UseClosestDinosSpawnToPlayers, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, UseForcedTargeting, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, UnknownData_89SV, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, MaxAggroDistance, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, ChooseSingleUniqueUnlockReqForRoom, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeRoom_RoomSetup, UnknownData_3M6P, 0x00B5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEscapeRoom_RoomSetup, 0x00B8);
		}

		// ScriptStruct ShooterGame.PrimalGameData.TutorialDefinition
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__TutorialDefinition)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialDefinition, TutorialTitle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialDefinition, TutorialText, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialDefinition, TutorialImage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialDefinition, TutorialDuration, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialDefinition, NextTutorialIndex, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTutorialDefinition, 0x0030);
		}

		// ScriptStruct ShooterGame.PrimalGameData.ItemToDinoStatParams
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalGameData__ItemToDinoStatParams)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemToDinoStatParams, ItemStat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemToDinoStatParams, DinoStat, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemToDinoStatParams, UnknownData_8PBQ, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemToDinoStatParams, MinItemStatValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemToDinoStatParams, MaxItemStatValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemToDinoStatParams, MinDinoStatValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemToDinoStatParams, MaxDinoStatValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemToDinoStatParams, ConversionCurve, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemToDinoStatParams, UnknownData_PLAZ, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemToDinoStatParams, 0x0018);
		}

		// ScriptStruct ShooterGame.PrimalItem.RequiresInventorySubclassMapping
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalItem__RequiresInventorySubclassMapping)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequiresInventorySubclassMapping, InventoryComponentClassParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequiresInventorySubclassMapping, RequiresInventoryComponentClassChildren, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRequiresInventorySubclassMapping, 0x0018);
		}

		// ScriptStruct ShooterGame.AllClustersInventory.PlayerAllClustersInventory
		TEST_METHOD(ScriptStruct__ShooterGame__AllClustersInventory__PlayerAllClustersInventory)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerAllClustersInventory, UnknownData_ZA4Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerAllClustersInventory, 0x0038);
		}

		// ScriptStruct ShooterGame.ShooterPlayerController.PrimalStats
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterPlayerController__PrimalStats)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStats, bUsed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStats, UnknownData_4W8D, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStats, StartStatsTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStats, PrimalStatsValues, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalStats, UnknownData_4WL7, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalStats, 0x0030);
		}

		// ScriptStruct ShooterGame.ShooterPlayerController.NonClusterCharacterUploadData
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterPlayerController__NonClusterCharacterUploadData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNonClusterCharacterUploadData, PlayerData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNonClusterCharacterUploadData, TribeId, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNonClusterCharacterUploadData, Items, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNonClusterCharacterUploadData, 0x0138);
		}

		// ScriptStruct ShooterGame.HibernationManager.HibernationEntity
		TEST_METHOD(ScriptStruct__ShooterGame__HibernationManager__HibernationEntity)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FHibernationEntity, UnknownData_YHDF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHibernationEntity, 0x0060);
		}

		// ScriptStruct ShooterGame.MissionDispatcher.Int32Array
		TEST_METHOD(ScriptStruct__ShooterGame__MissionDispatcher__Int32Array)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Array, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Array, 0x0010);
		}

		// ScriptStruct ShooterGame.MissionType.MissionDinoPath
		TEST_METHOD(ScriptStruct__ShooterGame__MissionType__MissionDinoPath)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionDinoPath, TargetActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionDinoPath, CurrentTarget, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionDinoPath, LastTarget, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionDinoPath, CurrentSplineKeyTarget, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionDinoPath, LastSplineKeyTarget, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionDinoPath, LastUpdateTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionDinoPath, UpdateInterval, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionDinoPath, ForcePathSpline, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionDinoPath, UnknownData_N4K2, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionDinoPath, 0x0040);
		}

		// ScriptStruct ShooterGame.PaintingCache.PaintingStreamingJob
		TEST_METHOD(ScriptStruct__ShooterGame__PaintingCache__PaintingStreamingJob)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintingStreamingJob, UnknownData_4QZ0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintingStreamingJob, 0x0040);
		}

		// ScriptStruct ShooterGame.PrimalChatFontData
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalChatFontData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalChatFontData, FontName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalChatFontData, FontSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalChatFontData, UnknownData_XUZ8, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalChatFontData, FontColor, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalChatFontData, 0x0038);
		}

		// ScriptStruct ShooterGame.PrimalStructureElevatorPlatform.PrimalDroppedItemOnPlatform
		TEST_METHOD(ScriptStruct__ShooterGame__PrimalStructureElevatorPlatform__PrimalDroppedItemOnPlatform)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalDroppedItemOnPlatform, ItemRelativeLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalDroppedItemOnPlatform, ItemRelativeRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalDroppedItemOnPlatform, BoneName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimalDroppedItemOnPlatform, MyItem, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimalDroppedItemOnPlatform, 0x0028);
		}

		// ScriptStruct ShooterGame.UI_MainMenu.UI_MainMenuLink
		TEST_METHOD(ScriptStruct__ShooterGame__UI_MainMenu__UI_MainMenuLink)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_MainMenuLink, MapName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_MainMenuLink, Class, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUI_MainMenuLink, 0x0018);
		}

		// ScriptStruct ShooterGame.ShooterCheatManager.DinoClassCountStruct
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterCheatManager__DinoClassCountStruct)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoClassCountStruct, DinoClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoClassCountStruct, NumberofTamedClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDinoClassCountStruct, NumberofWildClass, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDinoClassCountStruct, 0x0010);
		}

		// ScriptStruct ShooterGame.ShooterGameMode.DynamicUndermeshVolumes_Data
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterGameMode__DynamicUndermeshVolumes_Data)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicUndermeshVolumes_Data, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicUndermeshVolumes_Data, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicUndermeshVolumes_Data, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicUndermeshVolumes_Data, R, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicUndermeshVolumes_Data, 0x0010);
		}

		// ScriptStruct ShooterGame.ShooterGameMode.DynamicUndermeshVolumes_MapSet
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterGameMode__DynamicUndermeshVolumes_MapSet)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicUndermeshVolumes_MapSet, Map, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicUndermeshVolumes_MapSet, volumes, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicUndermeshVolumes_MapSet, 0x0020);
		}

		// ScriptStruct ShooterGame.ShooterGameMode.DynamicUndermeshVolumes_Root
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterGameMode__DynamicUndermeshVolumes_Root)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicUndermeshVolumes_Root, Root, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicUndermeshVolumes_Root, 0x0010);
		}

		// ScriptStruct ShooterGame.ShooterGameMode.AtlasAdminCommandTrackingEntry
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterGameMode__AtlasAdminCommandTrackingEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlasAdminCommandTrackingEntry, ServerUTCTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlasAdminCommandTrackingEntry, UnknownData_BSJK, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlasAdminCommandTrackingEntry, PlayerId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlasAdminCommandTrackingEntry, SteamID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlasAdminCommandTrackingEntry, IP, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlasAdminCommandTrackingEntry, Location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlasAdminCommandTrackingEntry, UnknownData_0RVM, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlasAdminCommandTrackingEntry, CommandType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlasAdminCommandTrackingEntry, Command, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtlasAdminCommandTrackingEntry, 0x0060);
		}

		// ScriptStruct ShooterGame.ShooterGameMode.TributePlayerTribeInfo
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterGameMode__TributePlayerTribeInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FTributePlayerTribeInfo, PlayerDataIDs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTributePlayerTribeInfo, TribeIDs, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTributePlayerTribeInfo, 0x0020);
		}

		// ScriptStruct ShooterGame.ShooterGameMode.MissionGlobalData
		TEST_METHOD(ScriptStruct__ShooterGame__ShooterGameMode__MissionGlobalData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissionGlobalData, LastMissionDeactivatedUtcTime, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissionGlobalData, 0x0008);
		}

		// ScriptStruct ShooterGame.VictoryCore.JoyAnim
		TEST_METHOD(ScriptStruct__ShooterGame__VictoryCore__JoyAnim)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoyAnim, Anim, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoyAnim, Chance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoyAnim, UnknownData_CIIY, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoyAnim, 0x0010);
		}

		// ScriptStruct ShooterGame.StructuresPlus.GlassSettings
		TEST_METHOD(ScriptStruct__ShooterGame__StructuresPlus__GlassSettings)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGlassSettings, TransparencyType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGlassSettings, UnknownData_8BB1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGlassSettings, Opacity, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGlassSettings, 0x0008);
		}

		// ScriptStruct AIModule.AIRequestID
		TEST_METHOD(ScriptStruct__AIModule__AIRequestID)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRequestID, RequestID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIRequestID, 0x0004);
		}

		// ScriptStruct AIModule.BehaviorTreeTypes.BlackboardKeySelector
		TEST_METHOD(ScriptStruct__AIModule__BehaviorTreeTypes__BlackboardKeySelector)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, AllowedTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_N6B1, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_MB41, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardKeySelector, 0x0028);
		}

		// ScriptStruct AIModule.PawnActionsComponent.PawnActionStack
		TEST_METHOD(ScriptStruct__AIModule__PawnActionsComponent__PawnActionStack)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionStack, TopAction, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionStack, 0x0008);
		}

		// ScriptStruct AIModule.PawnActionsComponent.PawnActionEvent
		TEST_METHOD(ScriptStruct__AIModule__PawnActionsComponent__PawnActionEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, UnknownData_2Y7Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionEvent, 0x0018);
		}

		// ScriptStruct AIModule.AISense_Damage.AIDamageEvent
		TEST_METHOD(ScriptStruct__AIModule__AISense_Damage__AIDamageEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, UnknownData_VMW0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, DamagedActor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Instigator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDamageEvent, 0x0030);
		}

		// ScriptStruct AIModule.AISense_Hearing.AINoiseEvent
		TEST_METHOD(ScriptStruct__AIModule__AISense_Hearing__AINoiseEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_P60Z, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Instigator, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAINoiseEvent, 0x0020);
		}

		// ScriptStruct AIModule.AISense_Prediction.AIPredictionEvent
		TEST_METHOD(ScriptStruct__AIModule__AISense_Prediction__AIPredictionEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, Requestor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, PredictedActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, UnknownData_QMVO, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIPredictionEvent, 0x0018);
		}

		// ScriptStruct AIModule.AISense_Team.AITeamStimulusEvent
		TEST_METHOD(ScriptStruct__AIModule__AISense_Team__AITeamStimulusEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, UnknownData_MDU6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Broadcaster, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Enemy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITeamStimulusEvent, 0x0038);
		}

		// ScriptStruct AIModule.AISense_Touch.AITouchEvent
		TEST_METHOD(ScriptStruct__AIModule__AISense_Touch__AITouchEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, UnknownData_8S6G, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, TouchReceiver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, OtherActor, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITouchEvent, 0x0020);
		}

		// ScriptStruct AIModule.BTCompositeNode.BTDecoratorLogic
		TEST_METHOD(ScriptStruct__AIModule__BTCompositeNode__BTDecoratorLogic)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Operation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, UnknownData_SVPG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Number, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTDecoratorLogic, 0x0004);
		}

		// ScriptStruct AIModule.BTCompositeNode.BTCompositeChild
		TEST_METHOD(ScriptStruct__AIModule__BTCompositeNode__BTCompositeChild)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildComposite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildTask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, Decorators, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, DecoratorOps, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTCompositeChild, 0x0030);
		}

		// ScriptStruct AIModule.BehaviorTreeManager.BehaviorTreeTemplateInfo
		TEST_METHOD(ScriptStruct__AIModule__BehaviorTreeManager__BehaviorTreeTemplateInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Asset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Template, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Category, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, UnknownData_Y0J0, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorTreeTemplateInfo, 0x0028);
		}

		// ScriptStruct AIModule.BlackboardData.BlackboardEntry
		TEST_METHOD(ScriptStruct__AIModule__BlackboardData__BlackboardEntry)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, EntryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, KeyType, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardEntry, 0x0010);
		}

		// ScriptStruct AIModule.EnvQueryTypes.EnvNamedValue
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryTypes__EnvNamedValue)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, UnknownData_KNP0, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, Value, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvNamedValue, 0x0010);
		}

		// ScriptStruct AIModule.EnvQueryTypes.EnvFloatParam
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryTypes__EnvFloatParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvFloatParam, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvFloatParam, ParamName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvFloatParam, 0x000C);
		}

		// ScriptStruct AIModule.EnvQueryTypes.EnvBoolParam
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryTypes__EnvBoolParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvBoolParam, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvBoolParam, UnknownData_8YPV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvBoolParam, ParamName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvBoolParam, 0x000C);
		}

		// ScriptStruct AIModule.EnvQueryTypes.EnvTraceData
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryTypes__EnvTraceData)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, NavigationFilter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectDown, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectUp, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentX, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentY, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentZ, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceChannel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceShape, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceMode, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_25IL, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_VJCI, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvTraceData, 0x0028);
		}

		// ScriptStruct AIModule.EnvQueryTypes.EnvDirection
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryTypes__EnvDirection)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineFrom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineTo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, DirMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, UnknownData_ZLMQ, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvDirection, 0x0020);
		}

		// ScriptStruct AIModule.AISense_Sight.AISightEvent
		TEST_METHOD(ScriptStruct__AIModule__AISense_Sight__AISightEvent)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, UnknownData_MCFP, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, SeenActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, Observer, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISightEvent, 0x0018);
		}

		// ScriptStruct AIModule.EnvQueryTypes.EnvIntParam
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryTypes__EnvIntParam)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvIntParam, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvIntParam, ParamName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvIntParam, 0x000C);
		}

		// ScriptStruct AIModule.EnvQueryManager.EnvQueryRequest
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryManager__EnvQueryRequest)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, World, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, UnknownData_I5ML, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryRequest, 0x0068);
		}

		// ScriptStruct AIModule.GenericTeamAgentInterface.GenericTeamId
		TEST_METHOD(ScriptStruct__AIModule__GenericTeamAgentInterface__GenericTeamId)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericTeamId, TeamId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericTeamId, 0x0001);
		}

		// ScriptStruct EngineSettings.ConsoleSettings.AutoCompleteCommand
		TEST_METHOD(ScriptStruct__EngineSettings__ConsoleSettings__AutoCompleteCommand)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Desc, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteCommand, 0x0020);
		}

		// ScriptStruct OnlineSubsystem.NamedInterfaces.NamedInterface
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterfaces__NamedInterface)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceObject, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterface, 0x0010);
		}

		// ScriptStruct OnlineSubsystem.NamedInterfaces.NamedInterfaceDef
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterfaces__NamedInterfaceDef)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceClassName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterfaceDef, 0x0018);
		}

		// ScriptStruct OnlineSubsystem.InAppPurchaseProductInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductInfo)
		{
			// Fields
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayPrice, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo, 0x0040);
		}
	};
}
